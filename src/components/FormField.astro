---
export interface Props {
  type?: 'text' | 'email' | 'tel' | 'textarea' | 'select';
  name: string;
  label: string;
  placeholder?: string;
  required?: boolean;
  disabled?: boolean;
  value?: string;
  options?: Array<{ value: string; label: string }>;
  rows?: number;
  className?: string;
  helpText?: string;
  errorMessage?: string;
  loading?: boolean;
}

const {
  type = 'text',
  name,
  label,
  placeholder,
  required = false,
  disabled = false,
  value = '',
  options = [],
  rows = 4,
  className = '',
  helpText,
  errorMessage,
  loading = false
} = Astro.props;

const fieldId = `field-${name}`;
const errorId = `${fieldId}-error`;
const helpId = `${fieldId}-help`;
---

<div class={`form-field ${className} ${errorMessage ? 'has-error' : ''} ${loading ? 'is-loading' : ''}`}>
  <label for={fieldId} class="form-label">
    {label}
    {required && <span class="required-indicator" aria-label="Campo requerido">*</span>}
  </label>
  
  {type === 'textarea' ? (
    <div class="form-input-wrapper">
      <textarea
        id={fieldId}
        name={name}
        class="form-input form-textarea"
        placeholder={placeholder}
        required={required}
        disabled={disabled || loading}
        rows={rows}
        aria-describedby={`${helpText ? helpId : ''} ${errorMessage ? errorId : ''}`.trim()}
        aria-invalid={errorMessage ? 'true' : 'false'}
      >{value}</textarea>
      {loading && (
        <div class="input-loading" aria-hidden="true">
          <div class="loading-dots">
            <span></span>
            <span></span>
            <span></span>
          </div>
        </div>
      )}
    </div>
  ) : type === 'select' ? (
    <div class="form-input-wrapper">
      <select
        id={fieldId}
        name={name}
        class="form-input form-select"
        required={required}
        disabled={disabled || loading}
        aria-describedby={`${helpText ? helpId : ''} ${errorMessage ? errorId : ''}`.trim()}
        aria-invalid={errorMessage ? 'true' : 'false'}
      >
        {placeholder && (
          <option value="" disabled selected>{placeholder}</option>
        )}
        {options.map(option => (
          <option value={option.value} selected={value === option.value}>
            {option.label}
          </option>
        ))}
      </select>
      <svg class="select-icon" width="16" height="16" viewBox="0 0 16 16" fill="none" aria-hidden="true">
        <path d="M4 6L8 10L12 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
      </svg>
      {loading && (
        <div class="input-loading" aria-hidden="true">
          <div class="loading-dots">
            <span></span>
            <span></span>
            <span></span>
          </div>
        </div>
      )}
    </div>
  ) : (
    <div class="form-input-wrapper">
      <input
        type={type}
        id={fieldId}
        name={name}
        class="form-input"
        placeholder={placeholder}
        required={required}
        disabled={disabled || loading}
        value={value}
        aria-describedby={`${helpText ? helpId : ''} ${errorMessage ? errorId : ''}`.trim()}
        aria-invalid={errorMessage ? 'true' : 'false'}
      />
      {loading && (
        <div class="input-loading" aria-hidden="true">
          <div class="loading-dots">
            <span></span>
            <span></span>
            <span></span>
          </div>
        </div>
      )}
    </div>
  )}
  
  {helpText && (
    <p id={helpId} class="form-help">{helpText}</p>
  )}
  
  {errorMessage && (
    <p id={errorId} class="form-error" role="alert">
      <svg class="error-icon" width="16" height="16" viewBox="0 0 16 16" fill="none" aria-hidden="true">
        <circle cx="8" cy="8" r="7" stroke="currentColor" stroke-width="2"/>
        <path d="M8 4V8" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
        <path d="M8 12H8.01" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
      </svg>
      {errorMessage}
    </p>
  )}
</div>

<style>
  .form-field {
    display: flex;
    flex-direction: column;
    gap: var(--space-2);
    margin-bottom: var(--space-4);
  }
  
  .form-label {
    font-size: var(--fs-sm);
    font-weight: 600;
    color: var(--fg);
    display: flex;
    align-items: center;
    gap: var(--space-1);
  }
  
  .required-indicator {
    color: var(--error);
    font-weight: 700;
  }
  
  .form-input-wrapper {
    position: relative;
    display: flex;
    align-items: center;
  }
  
  .form-input {
    width: 100%;
    padding: var(--space-3) var(--space-4);
    border: 1px solid var(--border);
    border-radius: var(--radius);
    background: var(--bg);
    color: var(--fg);
    font-size: var(--fs-base);
    font-family: var(--font-sans);
    transition: all 0.2s ease;
    outline: none;
    
    &::placeholder {
      color: var(--fg-dim);
    }
    
    &:focus {
      border-color: var(--accent);
      box-shadow: 0 0 0 3px rgba(124, 247, 212, 0.1);
    }
    
    &:disabled {
      background: var(--bg-soft);
      color: var(--fg-dim);
      cursor: not-allowed;
      opacity: 0.7;
    }
  }
  
  .form-textarea {
    resize: vertical;
    min-height: 120px;
    line-height: 1.5;
  }
  
  .form-select {
    appearance: none;
    background-image: none;
    padding-right: var(--space-10);
    cursor: pointer;
    
    &:disabled {
      cursor: not-allowed;
    }
  }
  
  .select-icon {
    position: absolute;
    right: var(--space-3);
    color: var(--fg-dim);
    pointer-events: none;
    transition: transform 0.2s ease;
  }
  
  .form-select:focus + .select-icon {
    transform: rotate(180deg);
  }
  
  .input-loading {
    position: absolute;
    right: var(--space-3);
    display: flex;
    align-items: center;
  }
  
  .loading-dots {
    display: flex;
    gap: var(--space-1);
  }
  
  .loading-dots span {
    width: 4px;
    height: 4px;
    border-radius: 50%;
    background: var(--accent);
    animation: loading-bounce 1.4s ease-in-out infinite both;
  }
  
  .loading-dots span:nth-child(1) {
    animation-delay: -0.32s;
  }
  
  .loading-dots span:nth-child(2) {
    animation-delay: -0.16s;
  }
  
  @keyframes loading-bounce {
    0%, 80%, 100% {
      transform: scale(0);
    }
    40% {
      transform: scale(1);
    }
  }
  
  .form-help {
    font-size: var(--fs-xs);
    color: var(--fg-dim);
    margin: 0;
    line-height: 1.4;
  }
  
  .form-error {
    font-size: var(--fs-xs);
    color: var(--error);
    margin: 0;
    display: flex;
    align-items: center;
    gap: var(--space-1);
    line-height: 1.4;
  }
  
  .error-icon {
    flex-shrink: 0;
  }
  
  /* Error state */
  .has-error .form-input {
    border-color: var(--error);
    box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);
  }
  
  .has-error .form-input:focus {
    border-color: var(--error);
    box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.2);
  }
  
  /* Loading state */
  .is-loading .form-input {
    padding-right: var(--space-12);
  }
  
  .is-loading .form-select {
    padding-right: var(--space-16);
  }
  
  /* Responsive adjustments */
  @media (max-width: 768px) {
    .form-input {
      font-size: 16px; /* Prevent zoom on iOS */
    }
  }
  
  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .form-input {
      transition: none;
    }
    
    .loading-dots span {
      animation: none;
    }
    
    .select-icon {
      transition: none;
    }
  }
  
  /* High contrast mode */
  @media (prefers-contrast: high) {
    .form-input {
      border-width: 2px;
    }
    
    .form-input:focus {
      outline: 2px solid;
      outline-offset: 2px;
    }
  }
</style>