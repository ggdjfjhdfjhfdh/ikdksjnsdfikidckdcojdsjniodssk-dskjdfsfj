---
// Dashboard de Seguridad en Tiempo Real
export interface Props {
  title?: string;
  showLiveIndicator?: boolean;
  refreshInterval?: number;
}

const { 
  title = "Dashboard de Seguridad",
  showLiveIndicator = true,
  refreshInterval = 30000 // 30 segundos
} = Astro.props;
---

<div class="security-dashboard">
  <!-- Header del Dashboard -->
  <div class="dashboard-header">
    <div class="header-content">
      <h2 class="dashboard-title">{title}</h2>
      {showLiveIndicator && (
        <div class="live-indicator">
          <div class="pulse-dot"></div>
          <span>EN VIVO</span>
        </div>
      )}
    </div>
    <div class="last-update">
      <span id="last-update-time">Actualizando...</span>
    </div>
  </div>

  <!-- Grid de M√©tricas -->
  <div class="metrics-grid">
    <!-- Amenazas Detectadas -->
    <div class="metric-card threats-card">
      <div class="metric-header">
        <div class="metric-icon threats-icon">üõ°Ô∏è</div>
        <div class="metric-trend" id="threats-trend">üìà</div>
      </div>
      <div class="metric-content">
        <div class="metric-value" id="threats-count">---</div>
        <div class="metric-label">Amenazas Detectadas</div>
        <div class="metric-subtitle">√öltimas 24 horas</div>
      </div>
      <div class="metric-chart" id="threats-chart"></div>
    </div>

    <!-- Ataques Bloqueados -->
    <div class="metric-card attacks-card">
      <div class="metric-header">
        <div class="metric-icon attacks-icon">üö´</div>
        <div class="metric-trend" id="attacks-trend">üìä</div>
      </div>
      <div class="metric-content">
        <div class="metric-value" id="attacks-count">---</div>
        <div class="metric-label">Ataques Bloqueados</div>
        <div class="metric-subtitle">Tiempo real</div>
      </div>
      <div class="metric-chart" id="attacks-chart"></div>
    </div>

    <!-- Vulnerabilidades -->
    <div class="metric-card vulns-card">
      <div class="metric-header">
        <div class="metric-icon vulns-icon">‚ö†Ô∏è</div>
        <div class="metric-trend" id="vulns-trend">üìâ</div>
      </div>
      <div class="metric-content">
        <div class="metric-value" id="vulns-count">---</div>
        <div class="metric-label">Vulnerabilidades</div>
        <div class="metric-subtitle">Cr√≠ticas y altas</div>
      </div>
      <div class="metric-chart" id="vulns-chart"></div>
    </div>

    <!-- Score de Seguridad -->
    <div class="metric-card score-card">
      <div class="metric-header">
        <div class="metric-icon score-icon">üéØ</div>
        <div class="metric-trend" id="score-trend">üìà</div>
      </div>
      <div class="metric-content">
        <div class="metric-value" id="security-score">---</div>
        <div class="metric-label">Score de Seguridad</div>
        <div class="metric-subtitle">De 100 puntos</div>
      </div>
      <div class="security-gauge" id="security-gauge">
        <div class="gauge-fill"></div>
      </div>
    </div>
  </div>

  <!-- Alertas Recientes -->
  <div class="alerts-section">
    <h3 class="section-title">Alertas Recientes</h3>
    <div class="alerts-container" id="alerts-container">
      <div class="loading-alerts">
        <div class="loading-spinner"></div>
        <span>Cargando alertas...</span>
      </div>
    </div>
  </div>

  <!-- Gr√°fico de Tendencias -->
  <div class="trends-section">
    <h3 class="section-title">Tendencias de Seguridad</h3>
    <div class="trends-chart" id="trends-chart">
      <div class="chart-placeholder">
        <div class="chart-loading">üìä Generando gr√°fico...</div>
      </div>
    </div>
  </div>
</div>

<style>
  .security-dashboard {
    width: 100%;
    max-width: 1400px;
    margin: 0 auto;
    padding: 2rem;
    background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
    border-radius: 16px;
    color: white;
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
  }

  .dashboard-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  }

  .header-content {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .dashboard-title {
    font-size: 2rem;
    font-weight: 700;
    margin: 0;
    background: linear-gradient(135deg, #60a5fa, #34d399);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .live-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background: rgba(34, 197, 94, 0.2);
    padding: 0.5rem 1rem;
    border-radius: 20px;
    border: 1px solid #22c55e;
    font-size: 0.875rem;
    font-weight: 600;
  }

  .pulse-dot {
    width: 8px;
    height: 8px;
    background: #22c55e;
    border-radius: 50%;
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { opacity: 1; transform: scale(1); }
    50% { opacity: 0.5; transform: scale(1.2); }
  }

  .last-update {
    font-size: 0.875rem;
    color: #94a3b8;
  }

  .metrics-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
    margin-bottom: 3rem;
  }

  .metric-card {
    background: rgba(255, 255, 255, 0.05);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    padding: 1.5rem;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .metric-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
    border-color: rgba(255, 255, 255, 0.2);
  }

  .metric-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
  }

  .metric-icon {
    font-size: 2rem;
    padding: 0.5rem;
    border-radius: 8px;
    background: rgba(255, 255, 255, 0.1);
  }

  .metric-trend {
    font-size: 1.25rem;
    opacity: 0.7;
  }

  .metric-value {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
    background: linear-gradient(135deg, #60a5fa, #34d399);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .metric-label {
    font-size: 1.125rem;
    font-weight: 600;
    margin-bottom: 0.25rem;
  }

  .metric-subtitle {
    font-size: 0.875rem;
    color: #94a3b8;
  }

  .metric-chart {
    height: 60px;
    margin-top: 1rem;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 6px;
    position: relative;
  }

  .security-gauge {
    height: 8px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 4px;
    margin-top: 1rem;
    overflow: hidden;
  }

  .gauge-fill {
    height: 100%;
    background: linear-gradient(90deg, #ef4444, #f59e0b, #22c55e);
    border-radius: 4px;
    width: 0%;
    transition: width 1s ease;
  }

  .alerts-section, .trends-section {
    margin-bottom: 2rem;
  }

  .section-title {
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 1rem;
    color: #e2e8f0;
  }

  .alerts-container {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 12px;
    padding: 1.5rem;
    min-height: 200px;
  }

  .loading-alerts {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 1rem;
    height: 100%;
    color: #94a3b8;
  }

  .loading-spinner {
    width: 20px;
    height: 20px;
    border: 2px solid rgba(148, 163, 184, 0.3);
    border-top: 2px solid #94a3b8;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  .trends-chart {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 12px;
    padding: 2rem;
    min-height: 300px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .chart-placeholder {
    text-align: center;
    color: #94a3b8;
    font-size: 1.125rem;
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .security-dashboard {
      padding: 1rem;
    }

    .dashboard-header {
      flex-direction: column;
      gap: 1rem;
      align-items: flex-start;
    }

    .metrics-grid {
      grid-template-columns: 1fr;
    }

    .dashboard-title {
      font-size: 1.5rem;
    }

    .metric-value {
      font-size: 2rem;
    }
  }

  /* Animaciones de entrada */
  .metric-card {
    opacity: 0;
    transform: translateY(20px);
    animation: slideInUp 0.6s ease forwards;
  }

  .metric-card:nth-child(1) { animation-delay: 0.1s; }
  .metric-card:nth-child(2) { animation-delay: 0.2s; }
  .metric-card:nth-child(3) { animation-delay: 0.3s; }
  .metric-card:nth-child(4) { animation-delay: 0.4s; }

  @keyframes slideInUp {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Modo de alto contraste */
  @media (prefers-contrast: high) {
    .metric-card {
      border-color: white;
      background: rgba(0, 0, 0, 0.8);
    }
  }

  /* Reducir animaciones */
  @media (prefers-reduced-motion: reduce) {
    .pulse-dot,
    .loading-spinner,
    .metric-card {
      animation: none;
    }

    .metric-card {
      opacity: 1;
      transform: none;
    }
  }
</style>

<script>
  class SecurityDashboard {
    constructor() {
      this.refreshInterval = 30000; // 30 segundos
      this.isVisible = true;
      this.init();
    }

    init() {
      this.updateLastUpdateTime();
      this.loadInitialData();
      this.startAutoRefresh();
      this.setupVisibilityChange();
    }

    updateLastUpdateTime() {
      const now = new Date();
      const timeString = now.toLocaleTimeString('es-ES', {
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
      });
      
      const element = document.getElementById('last-update-time');
      if (element) {
        element.textContent = `√öltima actualizaci√≥n: ${timeString}`;
      }
    }

    async loadInitialData() {
      try {
        // Simular carga de datos (reemplazar con APIs reales)
        await this.loadMetrics();
        await this.loadAlerts();
        await this.loadTrends();
      } catch (error) {
        console.error('Error cargando datos del dashboard:', error);
      }
    }

    async loadMetrics() {
      try {
        // Obtener datos reales de la API
        const response = await fetch('/api/threat-data');
        const data = await response.json();
        
        if (data.success && data.data) {
          const cloudflareData = data.data.cloudflare;
          const urlhausData = data.data.urlhaus;
          
          // Calcular m√©tricas basadas en datos reales
          const totalAttacks = cloudflareData?.totalAttacks || 0;
          const attackPercentage = cloudflareData?.attackPercentage || 0;
          const malwareUrls = urlhausData?.recentMalware?.length || 0;
          
          // Calcular score de seguridad basado en datos reales
          const securityScore = Math.max(10, 100 - (attackPercentage * 2));
          
          const metrics = {
            threats: totalAttacks,
            attacks: Math.floor(totalAttacks * (attackPercentage / 100)),
            vulnerabilities: malwareUrls,
            securityScore: Math.floor(securityScore)
          };
          
          this.updateMetricValue('threats-count', metrics.threats.toLocaleString());
          this.updateMetricValue('attacks-count', metrics.attacks.toLocaleString());
          this.updateMetricValue('vulns-count', metrics.vulnerabilities.toLocaleString());
          this.updateMetricValue('security-score', metrics.securityScore);
          
          // Actualizar gauge de seguridad
          this.updateSecurityGauge(metrics.securityScore);
        } else {
          console.warn('No se pudieron obtener datos de la API, usando datos de respaldo');
          this.loadFallbackMetrics();
        }
      } catch (error) {
        console.error('Error al cargar m√©tricas:', error);
        this.loadFallbackMetrics();
      }
    }
    
    loadFallbackMetrics() {
      // Datos de respaldo en caso de error
      const metrics = {
        threats: 1250,
        attacks: 89,
        vulnerabilities: 23,
        securityScore: 85
      };
      
      this.updateMetricValue('threats-count', metrics.threats.toLocaleString());
      this.updateMetricValue('attacks-count', metrics.attacks.toLocaleString());
      this.updateMetricValue('vulns-count', metrics.vulnerabilities.toLocaleString());
      this.updateMetricValue('security-score', metrics.securityScore);
      
      this.updateSecurityGauge(metrics.securityScore);
    }

    updateMetricValue(elementId, value) {
      const element = document.getElementById(elementId);
      if (element) {
        element.textContent = value;
      }
    }

    updateSecurityGauge(score) {
      const gauge = document.querySelector('.gauge-fill');
      if (gauge) {
        gauge.style.width = `${score}%`;
      }
    }

    async loadAlerts() {
      const container = document.getElementById('alerts-container');
      if (!container) return;

      try {
        // Obtener datos reales de la API
        const response = await fetch('/api/threat-data');
        const data = await response.json();
        
        const alerts = [];
        
        if (data.success && data.data) {
          const cloudflareData = data.data.cloudflare;
          const urlhausData = data.data.urlhaus;
          const sansData = data.data.sans;
          
          // Generar alertas basadas en datos reales
          if (cloudflareData?.attackPercentage > 15) {
            alerts.push({
              type: 'critical',
              message: `Alto volumen de ataques detectados: ${cloudflareData.attackPercentage.toFixed(1)}% del tr√°fico`,
              time: '1 min'
            });
          }
          
          if (urlhausData?.recentMalware?.length > 0) {
            const recentMalware = urlhausData.recentMalware[0];
            alerts.push({
              type: 'warning',
              message: `Nueva URL maliciosa detectada: ${recentMalware.threat || 'Malware'}`,
              time: '3 min'
            });
          }
          
          if (cloudflareData?.topOriginCountries?.length > 0) {
            const topAttacker = cloudflareData.topOriginCountries[0];
            alerts.push({
              type: 'info',
              message: `Mayor actividad de ataques desde ${topAttacker.originCountryName}`,
              time: '5 min'
            });
          }
          
          if (sansData?.topPorts?.length > 0) {
            const topPort = sansData.topPorts[0];
            alerts.push({
              type: 'warning',
              message: `Escaneos intensivos detectados en puerto ${topPort.port}`,
              time: '7 min'
            });
          }
        }
        
        // Si no hay alertas reales, usar alertas de respaldo
        if (alerts.length === 0) {
          alerts.push(
            { type: 'info', message: 'Sistemas de monitoreo funcionando correctamente', time: '2 min' },
            { type: 'info', message: '√öltima actualizaci√≥n de datos completada', time: '5 min' }
          );
        }

        container.innerHTML = alerts.map(alert => `
          <div class="alert-item alert-${alert.type}">
            <div class="alert-icon">${this.getAlertIcon(alert.type)}</div>
            <div class="alert-content">
              <div class="alert-message">${alert.message}</div>
              <div class="alert-time">Hace ${alert.time}</div>
            </div>
          </div>
        `).join('');
        
      } catch (error) {
        console.error('Error al cargar alertas:', error);
        // Alertas de respaldo en caso de error
        const fallbackAlerts = [
          { type: 'info', message: 'Sistemas de monitoreo en l√≠nea', time: '1 min' },
          { type: 'info', message: 'Verificando fuentes de datos...', time: '3 min' }
        ];
        
        container.innerHTML = fallbackAlerts.map(alert => `
          <div class="alert-item alert-${alert.type}">
            <div class="alert-icon">${this.getAlertIcon(alert.type)}</div>
            <div class="alert-content">
              <div class="alert-message">${alert.message}</div>
              <div class="alert-time">Hace ${alert.time}</div>
            </div>
          </div>
        `).join('');
      }
    }

    getAlertIcon(type) {
      const icons = {
        critical: 'üö®',
        warning: '‚ö†Ô∏è',
        info: '‚ÑπÔ∏è'
      };
      return icons[type] || '‚ÑπÔ∏è';
    }

    async loadTrends() {
      const chartContainer = document.getElementById('trends-chart');
      if (!chartContainer) return;

      // Simular gr√°fico simple
      chartContainer.innerHTML = `
        <div class="simple-chart">
          <div class="chart-title">Amenazas por Hora (√öltimas 24h)</div>
          <div class="chart-bars">
            ${Array.from({length: 24}, (_, i) => {
              const height = Math.random() * 100;
              return `<div class="chart-bar" style="height: ${height}%"></div>`;
            }).join('')}
          </div>
        </div>
      `;
    }

    startAutoRefresh() {
      setInterval(() => {
        if (this.isVisible) {
          this.updateLastUpdateTime();
          this.loadMetrics();
        }
      }, this.refreshInterval);
    }

    setupVisibilityChange() {
      document.addEventListener('visibilitychange', () => {
        this.isVisible = !document.hidden;
      });
    }
  }

  // Inicializar dashboard cuando el DOM est√© listo
  document.addEventListener('DOMContentLoaded', () => {
    new SecurityDashboard();
  });
</script>

<style>
  /* Estilos adicionales para alertas y gr√°ficos */
  .alert-item {
    display: flex;
    align-items: flex-start;
    gap: 1rem;
    padding: 1rem;
    margin-bottom: 0.5rem;
    border-radius: 8px;
    border-left: 4px solid;
  }

  .alert-critical {
    background: rgba(239, 68, 68, 0.1);
    border-left-color: #ef4444;
  }

  .alert-warning {
    background: rgba(245, 158, 11, 0.1);
    border-left-color: #f59e0b;
  }

  .alert-info {
    background: rgba(59, 130, 246, 0.1);
    border-left-color: #3b82f6;
  }

  .alert-icon {
    font-size: 1.25rem;
  }

  .alert-content {
    flex: 1;
  }

  .alert-message {
    font-weight: 500;
    margin-bottom: 0.25rem;
  }

  .alert-time {
    font-size: 0.875rem;
    color: #94a3b8;
  }

  .simple-chart {
    width: 100%;
  }

  .chart-title {
    text-align: center;
    margin-bottom: 1rem;
    font-weight: 600;
  }

  .chart-bars {
    display: flex;
    align-items: end;
    gap: 2px;
    height: 200px;
    padding: 1rem 0;
  }

  .chart-bar {
    flex: 1;
    background: linear-gradient(to top, #3b82f6, #60a5fa);
    border-radius: 2px 2px 0 0;
    min-height: 10px;
    transition: all 0.3s ease;
  }

  .chart-bar:hover {
    background: linear-gradient(to top, #1d4ed8, #3b82f6);
  }
</style>