---
export interface Props {
  lang?: 'es' | 'en';
}
const { lang = 'es' } = Astro.props;

const navigation = {
  es: { home: 'Inicio', services: 'Servicios', methodology: 'MetodologÃ­a', contact: 'Contacto' },
  en: { home: 'Home', services: 'Services', methodology: 'Methodology', contact: 'Contact' }
};

// Utilidades de rutas (normaliza trailing slash)
const normalize = (p: string) => {
  if (!p) return '/';
  return p !== '/' && p.endsWith('/') ? p.slice(0, -1) : p;
};

const routeMapping: Record<string,string> = {
  '/': '/en/',
  '/servicios': '/en/services',
  '/metodologia': '/en/methodology',
  '/contacto': '/en/contact',
  '/aviso-legal': '/en/legal-notice',
  '/politica-privacidad': '/en/privacy-policy',
  '/politica-cookies': '/en/cookie-policy',
  '/terminos-condiciones': '/en/terms-conditions'
};

const normalizedMap = new Map(
  Object.entries(routeMapping).map(([es, en]) => [normalize(es), normalize(en)])
);
const reverseMap = new Map(Array.from(normalizedMap.entries()).map(([es, en]) => [en, es]));

function getAlternateRoute(currentPath: string, currentLang: 'es' | 'en') {
  const p = normalize(currentPath);
  if (currentLang === 'es') return (normalizedMap.get(p) ?? normalize('/en' + (p === '/' ? '/' : p)));
  // EN â†’ ES
  if (reverseMap.has(p)) return reverseMap.get(p)!;
  return p.startsWith('/en') ? normalize(p.slice(3) || '/') : p;
}

const nav = navigation[lang];
const basePath = lang === 'en' ? '/en' : '';
const currentPath = normalize(Astro.url.pathname);

const isActive = (candidate: string) => {
  const c = normalize(candidate);
  return currentPath === c || (c !== '/' && currentPath.startsWith(c + '/'));
};
---

<nav
  class="nav nav-hover-effect"
  id="main-nav"
  role="navigation"
  data-lang={lang}
  aria-label={lang === 'es' ? 'NavegaciÃ³n principal' : 'Main navigation'}
>
  <div class="nav-container">
    <!-- Logo -->
    <div class="nav-brand">
      <a href={basePath + '/'} class="brand-link focus-ring" aria-label={lang === 'es' ? 'Ir al inicio - Sesecpro' : 'Go to home - Sesecpro'}>
        <div class="brand-icon" aria-hidden="true">
          <svg width="32" height="32" viewBox="0 0 32 32" fill="none">
            <path d="M16 2L30 9v14L16 30 2 23V9l14-7z" stroke="currentColor" stroke-width="2" fill="none"/>
            <circle cx="16" cy="16" r="6" stroke="currentColor" stroke-width="2" fill="none"/>
            <circle cx="16" cy="16" r="2" fill="currentColor"/>
          </svg>
        </div>
        <span class="brand-text">Sesecpro</span>
      </a>
    </div>

    <!-- Desktop Navigation -->
    <div class="nav-links" aria-label={lang === 'es' ? 'MenÃº principal' : 'Main menu'}>
      <a
        href={basePath + '/'}
        class="nav-link focus-ring"
        data-nav="home"
        aria-current={isActive(basePath + '/') ? 'page' : undefined}
      >
        <span class="nav-text">{nav.home}</span><div class="nav-indicator" aria-hidden="true"></div>
      </a>

      <a
        href={lang === 'en' ? '/en/services' : '/servicios'}
        class="nav-link focus-ring"
        data-nav="services"
        aria-current={isActive(lang === 'en' ? '/en/services' : '/servicios') ? 'page' : undefined}
      >
        <span class="nav-text">{nav.services}</span><div class="nav-indicator" aria-hidden="true"></div>
      </a>

      <a
        href={lang === 'en' ? '/en/methodology' : '/metodologia'}
        class="nav-link focus-ring"
        data-nav="methodology"
        aria-current={isActive(lang === 'en' ? '/en/methodology' : '/metodologia') ? 'page' : undefined}
      >
        <span class="nav-text">{nav.methodology}</span><div class="nav-indicator" aria-hidden="true"></div>
      </a>

      <a
        href={lang === 'en' ? '/en/contact' : '/contacto'}
        class="nav-link focus-ring"
        data-nav="contact"
        aria-current={isActive(lang === 'en' ? '/en/contact' : '/contacto') ? 'page' : undefined}
      >
        <span class="nav-text">{nav.contact}</span><div class="nav-indicator" aria-hidden="true"></div>
      </a>
    </div>

    <!-- Language Switcher -->
    <div class="nav-actions">
      <div class="lang-switcher">
        <button
          class="lang-btn focus-ring"
          id="lang-toggle"
          aria-label={lang === 'es' ? 'Cambiar idioma' : 'Change language'}
          aria-expanded="false"
          aria-haspopup="menu"
          aria-controls="lang-dropdown"
        >
          <span class="lang-current" aria-hidden="true">{lang.toUpperCase()}</span>
          <svg class="lang-icon" width="16" height="16" viewBox="0 0 16 16" fill="none" aria-hidden="true">
            <path d="M8 3C10.7614 3 13 5.23858 13 8C13 10.7614 10.7614 13 8 13C5.23858 13 3 10.7614 3 8C3 5.23858 5.23858 3 8 3Z" stroke="currentColor" stroke-width="1.5"/>
            <path d="M8 1V3M8 13V15M15 8H13M3 8H1" stroke="currentColor" stroke-width="1.5"/>
          </svg>
        </button>
        <div class="lang-dropdown" id="lang-dropdown" role="menu">
          <a
            href={getAlternateRoute(Astro.url.pathname, lang)}
            class="lang-option focus-ring"
            role="menuitem"
            aria-label={lang === 'es' ? 'Cambiar a inglÃ©s' : 'Cambiar a espaÃ±ol'}
          >
            <span class="lang-flag" aria-hidden="true">{lang === 'es' ? 'ðŸ‡ºðŸ‡¸' : 'ðŸ‡ªðŸ‡¸'}</span>
            <span>{lang === 'es' ? 'English' : 'EspaÃ±ol'}</span>
          </a>
        </div>
      </div>

      <!-- Mobile Menu Toggle -->
      <button
        class="mobile-toggle magnetic-hover focus-ring"
        id="mobile-toggle"
        aria-label={lang === 'es' ? 'Abrir menÃº' : 'Open menu'}
        aria-expanded="false"
        aria-controls="mobile-menu"
      >
        <span class="hamburger-line" aria-hidden="true"></span>
        <span class="hamburger-line" aria-hidden="true"></span>
        <span class="hamburger-line" aria-hidden="true"></span>
      </button>
    </div>
  </div>

  <!-- Mobile Menu -->
  <div class="mobile-menu" id="mobile-menu" role="dialog" aria-modal="true" aria-labelledby="mobile-menu-title" aria-hidden="true">
    <div class="mobile-menu-content">
      <h2 id="mobile-menu-title" class="sr-only">{lang === 'es' ? 'MenÃº ' : 'MenÃº'}</h2>
      <nav class="mobile-links" aria-label={lang === 'es' ? 'NavegaciÃ³n mÃ³vil' : 'Mobile navigation'}>
        <a href={basePath + '/'} class="mobile-link focus-ring" aria-current={isActive(basePath + '/') ? 'page' : undefined}>
          <span class="mobile-link-text">{nav.home}</span>
        </a>
        <a href={lang === 'en' ? '/en/services' : '/servicios'} class="mobile-link focus-ring" aria-current={isActive(lang === 'en' ? '/en/services' : '/servicios') ? 'page' : undefined}>
          <span class="mobile-link-text">{nav.services}</span>
        </a>
        <a href={lang === 'en' ? '/en/methodology' : '/metodologia'} class="mobile-link focus-ring" aria-current={isActive(lang === 'en' ? '/en/methodology' : '/metodologia') ? 'page' : undefined}>
          <span class="mobile-link-text">{nav.methodology}</span>
        </a>
        <a href={lang === 'en' ? '/en/contact' : '/contacto'} class="mobile-link focus-ring" aria-current={isActive(lang === 'en' ? '/en/contact' : '/contacto') ? 'page' : undefined}>
          <span class="mobile-link-text">{nav.contact}</span>
        </a>
      </nav>
    </div>
  </div>

  <div class="nav-backdrop"></div>
</nav>

<link rel="stylesheet" href="/styles/navigation.css" />

<script>
  class Navigation {
    constructor() {
      this.nav = document.getElementById('main-nav');
      this.mobileToggle = document.getElementById('mobile-toggle');
      this.mobileMenu = document.getElementById('mobile-menu');
      this.langToggle = document.getElementById('lang-toggle');
      this.langDropdown = document.getElementById('lang-dropdown');
      this.lastScrollY = 0;
      this.isMenuOpen = false;
      this.lang = this.nav?.dataset.lang || 'es';
      this.lblOpen = this.lang === 'es' ? 'Abrir menÃº' : 'Open menu';
      this.lblClose = this.lang === 'es' ? 'Cerrar menÃº' : 'Close menu';
      this.focusTrapHandler = null;
      this.prevFocus = null;
      this.init();
    }

    init() {
      this.setupScrollHandler();
      this.setupMobileMenu();
      this.setupLanguageSwitcher();
      this.setupActiveLinks();
      this.setupKeyboardNavigation();
    }

    setupScrollHandler() {
      let ticking = false;
      const updateNav = () => {
        const scrollY = window.scrollY;
        if (scrollY > 50) this.nav.classList.add('scrolled'); else this.nav.classList.remove('scrolled');
        this.nav.style.transform = (scrollY > this.lastScrollY && scrollY > 100) ? 'translateY(-100%)' : 'translateY(0)';
        this.lastScrollY = scrollY;
        ticking = false;
      };
      window.addEventListener('scroll', () => {
        if (!ticking) { requestAnimationFrame(updateNav); ticking = true; }
      });
    }

    setupMobileMenu() {
      if (this.mobileToggle) {
        this.mobileToggle.addEventListener('click', () => this.toggleMobileMenu());
      }

      // Cierra al hacer click en un enlace del menÃº mÃ³vil
      this.mobileMenu?.querySelectorAll('a').forEach(a => {
        a.addEventListener('click', () => this.closeMobileMenu());
      });

      // Cierra al click fuera
      document.addEventListener('click', (e) => {
        if (this.isMenuOpen && !this.nav.contains(e.target)) this.closeMobileMenu();
      });

      // Cierra con Escape
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && this.isMenuOpen) this.closeMobileMenu();
      });
    }

    toggleMobileMenu() { this.isMenuOpen ? this.closeMobileMenu() : this.openMobileMenu(); }

    openMobileMenu() {
      console.log('Abriendo menÃº mÃ³vil');
      console.log('Elemento mobileMenu:', this.mobileMenu);
      console.log('Clases antes:', this.mobileMenu.className);
      
      this.isMenuOpen = true;
      this.prevFocus = document.activeElement;
      this.mobileToggle.classList.add('active');
      this.mobileMenu.classList.add('active');
      
      console.log('Clases despuÃ©s:', this.mobileMenu.className);
      console.log('Tiene clase active:', this.mobileMenu.classList.contains('active'));
      
      this.mobileToggle.setAttribute('aria-expanded', 'true');
      this.mobileToggle.setAttribute('aria-label', this.lblClose);
      document.body.style.overflow = 'hidden';
      this.activateFocusTrap(this.mobileMenu);
    }

    closeMobileMenu() {
      this.isMenuOpen = false;
      this.mobileToggle.classList.remove('active');
      this.mobileMenu.classList.remove('active');
      this.mobileToggle.setAttribute('aria-expanded', 'false');
      this.mobileToggle.setAttribute('aria-label', this.lblOpen);
      document.body.style.overflow = '';
      this.deactivateFocusTrap();
      if (this.prevFocus && this.prevFocus.focus) this.prevFocus.focus();
    }

    // Focus trap bÃ¡sico
    activateFocusTrap(container) {
      const selectors = 'a[href], button:not([disabled]), textarea, input, select, [tabindex]:not([tabindex="-1"])';
      const getNodes = () => Array.from(container.querySelectorAll(selectors)).filter(el => el.offsetParent !== null);
      const nodes = getNodes();
      if (nodes[0]) nodes[0].focus();

      this.focusTrapHandler = (e) => {
        if (e.key !== 'Tab') return;
        const focusables = getNodes();
        const first = focusables[0], last = focusables[focusables.length - 1];
        if (e.shiftKey && document.activeElement === first) { e.preventDefault(); last.focus(); }
        else if (!e.shiftKey && document.activeElement === last) { e.preventDefault(); first.focus(); }
      };
      document.addEventListener('keydown', this.focusTrapHandler);
    }

    deactivateFocusTrap() {
      if (this.focusTrapHandler) document.removeEventListener('keydown', this.focusTrapHandler);
      this.focusTrapHandler = null;
    }

    setupActiveLinks() {
      const normalize = (p) => (p !== '/' && p.endsWith('/') ? p.slice(0,-1) : p);
      const currentPath = normalize(window.location.pathname);
      const links = this.nav.querySelectorAll('.nav-link, .mobile-link');
      links.forEach(link => {
        const href = normalize(link.getAttribute('href') || '');
        const active = (href === currentPath) || (href !== '/' && currentPath.startsWith(href + '/'));
        if (active) link.classList.add('active');
      });
    }

    setupLanguageSwitcher() {
      if (!this.langToggle || !this.langDropdown) return;
      let open = false;

      const openDD = () => {
        this.langDropdown.classList.add('active');
        this.langToggle.setAttribute('aria-expanded', 'true');
        open = true;
      };
      const closeDD = () => {
        this.langDropdown.classList.remove('active');
        this.langToggle.setAttribute('aria-expanded', 'false');
        open = false;
      };

      this.langToggle.addEventListener('click', (e) => {
        e.preventDefault(); e.stopPropagation();
        open ? closeDD() : openDD();
      });

      document.addEventListener('click', (e) => {
        if (open && !this.langToggle.contains(e.target) && !this.langDropdown.contains(e.target)) closeDD();
      });

      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && open) { closeDD(); this.langToggle.focus(); }
      });
    }

    setupKeyboardNavigation() {
      this.langToggle?.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') { e.preventDefault(); this.langToggle.click(); }
      });
    }
  }

  function cleanupMobileMenuState() {
    const mobileToggle = document.getElementById('mobile-toggle');
    const mobileMenu = document.getElementById('mobile-menu');
    if (mobileToggle) {
      mobileToggle.classList.remove('active');
      mobileToggle.setAttribute('aria-expanded', 'false');
      const lang = document.getElementById('main-nav')?.dataset.lang || 'es';
      mobileToggle.setAttribute('aria-label', lang === 'es' ? 'Abrir menÃº' : 'Open menu');
    }
    if (mobileMenu) {
      mobileMenu.classList.remove('active');
      mobileMenu.setAttribute('aria-hidden', 'true');
    }
    document.body.style.overflow = '';
  }

  cleanupMobileMenuState();

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => { cleanupMobileMenuState(); new Navigation(); });
  } else {
    cleanupMobileMenuState(); new Navigation();
  }

  document.addEventListener('astro:before-preparation', cleanupMobileMenuState);
  window.addEventListener('pageshow', cleanupMobileMenuState);
</script>
