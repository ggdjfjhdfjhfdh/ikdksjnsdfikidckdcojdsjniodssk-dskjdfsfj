---
import Button from './Button.astro';

export interface Props {
  title: string;
  subtitle: string;
  description?: string;
  ctaPrimary: {
    text: string;
    href: string;
  };
  ctaSecondary?: {
    text: string;
    href: string;
  };
}

const { title, subtitle, description, ctaPrimary, ctaSecondary } = Astro.props;
---

<!-- Importar estilos de animaciones avanzadas -->
<style>
  @import '../styles/hero-animations.css';
</style>

<section class="hero">
  <div class="hero-bg">
    <!-- Fondo geométrico animado -->
    <div class="hero-geometric-bg">
      <div class="geometric-shape shape-1"></div>
      <div class="geometric-shape shape-2"></div>
      <div class="geometric-shape shape-3"></div>
      <div class="geometric-shape shape-4"></div>
      <div class="geometric-shape shape-5"></div>
    </div>
    
    <!-- Grid de fondo -->
    <div class="hero-grid"></div>
    
    <!-- Canvas para partículas -->
    <canvas id="hero-canvas" class="hero-canvas"></canvas>
    
    <!-- Gradientes superpuestos -->
    <div class="hero-gradient-primary"></div>
    <div class="hero-gradient-secondary"></div>
    <div class="hero-gradient-overlay"></div>
    
    <!-- Efectos de luz -->
    <div class="hero-light-effects">
      <div class="light-beam light-beam-1"></div>
      <div class="light-beam light-beam-2"></div>
      <div class="light-orb light-orb-1"></div>
      <div class="light-orb light-orb-2"></div>
    </div>
    
    <!-- Línea de escaneo -->
    <div class="hero-scan-line"></div>
    
    <!-- Matriz de código de fondo -->
    <div class="hero-code-matrix" id="code-matrix"></div>
  </div>
  
  <div class="container">
    <div class="hero-content stagger-children">
      <h1 class="hero-title fade-in" data-text={title}>{title}</h1>
      <p class="hero-subtitle fade-in stagger-1">{subtitle}</p>
      {description && (
        <p class="hero-description fade-in stagger-2">{description}</p>
      )}
      
      <div class="hero-actions fade-in stagger-3 animate-fade-in delay-300">
        <Button 
          href={ctaPrimary.href} 
          variant="primary" 
          size="lg"
          icon="→"
          iconPosition="right"
          ariaLabel={`${ctaPrimary.text} - Ir a ${ctaPrimary.href}`}
        >
          {ctaPrimary.text}
        </Button>
        {ctaSecondary && (
          <Button 
            href={ctaSecondary.href} 
            variant="secondary" 
            size="lg"
            ariaLabel={`${ctaSecondary.text} - Ir a ${ctaSecondary.href}`}
          >
            {ctaSecondary.text}
          </Button>
        )}
      </div>
    </div>
  </div>
</section>

<style>
  .hero {
    position: relative;
    min-height: 100vh;
    display: flex;
    align-items: center;
    overflow: hidden;
  }
  
  .hero-bg {
    position: absolute;
    inset: 0;
    z-index: -1;
  }
  
  .hero-canvas {
    position: absolute;
    inset: 0;
    width: 100%;
    height: 100%;
  }
  
  /* Fondo geométrico */
  .hero-geometric-bg {
    position: absolute;
    inset: 0;
    overflow: hidden;
  }
  
  .geometric-shape {
    position: absolute;
    border-radius: 50%;
    filter: blur(1px);
    animation: float 20s ease-in-out infinite;
  }
  
  .shape-1 {
    width: 300px;
    height: 300px;
    background: radial-gradient(circle, rgba(124, 247, 212, 0.15) 0%, transparent 70%);
    top: 10%;
    left: -10%;
    animation-delay: 0s;
  }
  
  .shape-2 {
    width: 200px;
    height: 200px;
    background: radial-gradient(circle, rgba(155, 140, 255, 0.12) 0%, transparent 70%);
    top: 60%;
    right: -5%;
    animation-delay: -5s;
  }
  
  .shape-3 {
    width: 150px;
    height: 150px;
    background: radial-gradient(circle, rgba(59, 130, 246, 0.1) 0%, transparent 70%);
    top: 30%;
    right: 20%;
    animation-delay: -10s;
  }
  
  .shape-4 {
    width: 250px;
    height: 250px;
    background: radial-gradient(circle, rgba(16, 185, 129, 0.08) 0%, transparent 70%);
    bottom: 20%;
    left: 15%;
    animation-delay: -15s;
  }
  
  .shape-5 {
    width: 180px;
    height: 180px;
    background: radial-gradient(circle, rgba(139, 92, 246, 0.1) 0%, transparent 70%);
    top: 5%;
    left: 50%;
    animation-delay: -8s;
  }
  
  /* Grid de fondo */
  .hero-grid {
    position: absolute;
    inset: 0;
    background-image: 
      linear-gradient(rgba(124, 247, 212, 0.03) 1px, transparent 1px),
      linear-gradient(90deg, rgba(124, 247, 212, 0.03) 1px, transparent 1px);
    background-size: 50px 50px;
    animation: gridMove 30s linear infinite;
  }
  
  /* Gradientes principales */
  .hero-gradient-primary {
    position: absolute;
    inset: 0;
    background: radial-gradient(
      ellipse 80% 50% at 50% 0%,
      rgba(124, 247, 212, 0.15) 0%,
      transparent 50%
    );
  }
  
  .hero-gradient-secondary {
    position: absolute;
    inset: 0;
    background: radial-gradient(
      ellipse 60% 40% at 100% 100%,
      rgba(155, 140, 255, 0.12) 0%,
      transparent 50%
    );
  }
  
  .hero-gradient-overlay {
    position: absolute;
    inset: 0;
    background: linear-gradient(
      135deg,
      rgba(11, 15, 20, 0.8) 0%,
      rgba(11, 15, 20, 0.4) 50%,
      rgba(11, 15, 20, 0.8) 100%
    );
  }
  
  /* Efectos de luz */
  .hero-light-effects {
    position: absolute;
    inset: 0;
    pointer-events: none;
  }
  
  .light-beam {
    position: absolute;
    background: linear-gradient(45deg, transparent, rgba(124, 247, 212, 0.1), transparent);
    filter: blur(2px);
    animation: beamMove 15s ease-in-out infinite;
  }
  
  .light-beam-1 {
    width: 2px;
    height: 100%;
    left: 20%;
    animation-delay: 0s;
  }
  
  .light-beam-2 {
    width: 1px;
    height: 100%;
    right: 30%;
    animation-delay: -7s;
  }
  
  .light-orb {
    position: absolute;
    width: 4px;
    height: 4px;
    border-radius: 50%;
    background: rgba(124, 247, 212, 0.8);
    box-shadow: 0 0 20px rgba(124, 247, 212, 0.5);
    animation: orbFloat 12s ease-in-out infinite;
  }
  
  .light-orb-1 {
    top: 20%;
    left: 15%;
    animation-delay: 0s;
  }
  
  .light-orb-2 {
    bottom: 30%;
    right: 25%;
    animation-delay: -6s;
  }
  
  .hero-content {
    position: relative;
    z-index: 1;
    max-width: 800px;
    text-align: center;
    margin: 0 auto;
  }
  
  .hero-title {
    margin-bottom: var(--sp-6);
    background: linear-gradient(
      135deg,
      var(--fg) 0%,
      var(--accent) 50%,
      var(--fg) 100%
    );
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 200% 200%;
    animation: gradientShift 8s ease-in-out infinite;
  }
  
  .hero-subtitle {
    font-size: clamp(18px, 2.5vw, 24px);
    color: var(--fg-dim);
    margin-bottom: var(--sp-6);
    max-width: 600px;
    margin-left: auto;
    margin-right: auto;
    line-height: 1.6;
  }
  
  .hero-description {
    font-size: var(--fs-body);
    color: var(--fg-muted);
    margin-bottom: var(--sp-8);
    max-width: 700px;
    margin-left: auto;
    margin-right: auto;
    line-height: 1.7;
  }
  
  .hero-actions {
    display: flex;
    gap: var(--sp-4);
    justify-content: center;
    flex-wrap: wrap;
  }
  
  @keyframes gradientShift {
    0%, 100% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
  }
  
  @keyframes float {
    0%, 100% {
      transform: translate(0, 0) rotate(0deg);
    }
    25% {
      transform: translate(20px, -20px) rotate(90deg);
    }
    50% {
      transform: translate(-10px, -40px) rotate(180deg);
    }
    75% {
      transform: translate(-30px, -10px) rotate(270deg);
    }
  }
  
  @keyframes gridMove {
    0% {
      transform: translate(0, 0);
    }
    100% {
      transform: translate(50px, 50px);
    }
  }
  
  @keyframes beamMove {
    0%, 100% {
      opacity: 0;
      transform: translateX(-20px);
    }
    50% {
      opacity: 1;
      transform: translateX(20px);
    }
  }
  
  @keyframes orbFloat {
    0%, 100% {
      transform: translate(0, 0);
      opacity: 0.3;
    }
    25% {
      transform: translate(30px, -30px);
      opacity: 0.8;
    }
    50% {
      transform: translate(-20px, -60px);
      opacity: 0.5;
    }
    75% {
      transform: translate(-40px, -20px);
      opacity: 0.7;
    }
  }
  
  /* Optimizaciones para móvil */
  @media (max-width: 768px) {
    .hero {
      min-height: 80vh;
      padding: var(--sp-20) 0;
    }
    
    .hero-actions {
      flex-direction: column;
      align-items: center;
    }
    
    .btn {
      width: 100%;
      max-width: 280px;
    }
    
    /* Reducir complejidad en móvil */
    .geometric-shape {
      animation-duration: 30s; /* Más lento */
    }
    
    .shape-3,
    .shape-5 {
      display: none; /* Ocultar algunas formas */
    }
    
    .hero-grid {
      background-size: 30px 30px; /* Grid más pequeño */
      animation-duration: 40s;
    }
    
    .light-beam {
      display: none; /* Ocultar efectos de luz en móvil */
    }
    
    .light-orb {
      animation-duration: 20s; /* Más lento */
    }
  }
  
  /* Soporte para modo de movimiento reducido */
  @media (prefers-reduced-motion: reduce) {
    .geometric-shape,
    .hero-grid,
    .light-beam,
    .light-orb {
      animation: none;
    }
    
    .hero-gradient-primary,
    .hero-gradient-secondary {
      opacity: 0.5;
    }
  }
  
  /* Optimizaciones para pantallas de alta densidad */
  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
    .geometric-shape {
      filter: blur(0.5px);
    }
    
    .light-beam {
      filter: blur(1px);
    }
  }
</style>

<script>
  // Animación de fondo generativa
  class HeroAnimation {
    constructor(canvas) {
      this.canvas = canvas;
      this.ctx = canvas.getContext('2d');
      this.particles = [];
      this.mouse = { x: 0, y: 0 };
      this.animationId = null;
      
      this.init();
      this.setupEventListeners();
      this.animate();
    }
    
    init() {
      this.resize();
      this.createParticles();
    }
    
    resize() {
      this.canvas.width = window.innerWidth;
      this.canvas.height = window.innerHeight;
    }
    
    createParticles() {
      const particleCount = Math.min(50, Math.floor(window.innerWidth / 20));
      
      for (let i = 0; i < particleCount; i++) {
        this.particles.push({
          x: Math.random() * this.canvas.width,
          y: Math.random() * this.canvas.height,
          vx: (Math.random() - 0.5) * 0.5,
          vy: (Math.random() - 0.5) * 0.5,
          size: Math.random() * 2 + 1,
          opacity: Math.random() * 0.5 + 0.1
        });
      }
    }
    
    setupEventListeners() {
      window.addEventListener('resize', () => this.resize());
      
      this.canvas.addEventListener('mousemove', (e) => {
        this.mouse.x = e.clientX;
        this.mouse.y = e.clientY;
      });
    }
    
    animate() {
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      
      // Dibujar líneas de conexión
      this.drawConnections();
      
      // Actualizar y dibujar partículas
      this.particles.forEach(particle => {
        this.updateParticle(particle);
        this.drawParticle(particle);
      });
      
      this.animationId = requestAnimationFrame(() => this.animate());
    }
    
    updateParticle(particle) {
      particle.x += particle.vx;
      particle.y += particle.vy;
      
      // Rebote en los bordes
      if (particle.x < 0 || particle.x > this.canvas.width) {
        particle.vx *= -1;
      }
      if (particle.y < 0 || particle.y > this.canvas.height) {
        particle.vy *= -1;
      }
      
      // Mantener dentro del canvas
      particle.x = Math.max(0, Math.min(this.canvas.width, particle.x));
      particle.y = Math.max(0, Math.min(this.canvas.height, particle.y));
    }
    
    drawParticle(particle) {
      this.ctx.beginPath();
      this.ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
      this.ctx.fillStyle = `rgba(124, 247, 212, ${particle.opacity})`;
      this.ctx.fill();
    }
    
    drawConnections() {
      for (let i = 0; i < this.particles.length; i++) {
        for (let j = i + 1; j < this.particles.length; j++) {
          const dx = this.particles[i].x - this.particles[j].x;
          const dy = this.particles[i].y - this.particles[j].y;
          const distance = Math.sqrt(dx * dx + dy * dy);
          
          if (distance < 150) {
            const opacity = (150 - distance) / 150 * 0.1;
            this.ctx.beginPath();
            this.ctx.moveTo(this.particles[i].x, this.particles[i].y);
            this.ctx.lineTo(this.particles[j].x, this.particles[j].y);
            this.ctx.strokeStyle = `rgba(124, 247, 212, ${opacity})`;
            this.ctx.lineWidth = 1;
            this.ctx.stroke();
          }
        }
      }
    }
    
    destroy() {
      if (this.animationId) {
        cancelAnimationFrame(this.animationId);
      }
    }
  }
  
  // Inicializar animación
  const canvas = document.getElementById('hero-canvas');
  let animation = null;
  
  if (canvas && !window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
    animation = new HeroAnimation(canvas);
  }
  
  // Cleanup al cambiar de página
  document.addEventListener('astro:before-swap', () => {
    if (animation) {
      animation.destroy();
    }
  });
</script>

<!-- Efectos avanzados de movimiento -->
<script>
  import('../scripts/hero-effects.js');
</script>

<script>
  // Generar matriz de código de fondo
  function createCodeMatrix() {
    const matrix = document.getElementById('code-matrix');
    if (!matrix) return;
    
    const codeSnippets = [
      'function encrypt(data) {',
      'const hash = SHA256(input);',
      'if (authenticated) {',
      'return jwt.sign(payload);',
      'ssl.verify(certificate);',
      'firewall.block(ip);',
      'const token = generate();',
      'security.scan(file);',
      'vpn.connect(server);',
      'auth.validate(user);',
      'crypto.randomBytes(32);',
      'bcrypt.hash(password);',
      'tls.createSecureContext();',
      'rsa.encrypt(message);',
      'aes.decrypt(cipher);'
    ];
    
    // Crear líneas de código
    for (let i = 0; i < 8; i++) {
      const codeLine = document.createElement('div');
      codeLine.className = 'code-line';
      codeLine.textContent = codeSnippets[Math.floor(Math.random() * codeSnippets.length)];
      codeLine.style.top = `${i * 12}%`;
      codeLine.style.animationDelay = `${i * 0.5}s`;
      matrix.appendChild(codeLine);
    }
  }
  
  // Inicializar matriz de código
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', createCodeMatrix);
  } else {
    createCodeMatrix();
  }
  
  // Limpiar al cambiar de página
  document.addEventListener('astro:before-swap', () => {
    const matrix = document.getElementById('code-matrix');
    if (matrix) {
      matrix.innerHTML = '';
    }
  });
</script>