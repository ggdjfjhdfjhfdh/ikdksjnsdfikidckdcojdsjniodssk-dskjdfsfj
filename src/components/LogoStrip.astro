---
export interface Props {
  logos: Array<{
    name: string;
    src: string;
    alt: string;
    width?: number;
    height?: number;
  }>;
  speed?: 'slow' | 'normal' | 'fast';
  direction?: 'left' | 'right';
  pauseOnHover?: boolean;
}

const { 
  logos, 
  speed = 'normal', 
  direction = 'left',
  pauseOnHover = true 
} = Astro.props;

// Usar logos sin duplicar
const displayLogos = logos;
---

<div class={`logo-strip ${pauseOnHover ? 'pause-on-hover' : ''}`}>
  <div class="logo-strip-track" data-speed={speed} data-direction={direction}>
    {displayLogos.map((logo, index) => (
      <div class="logo-item" key={`${logo.name}-${index}`}>
        <img 
          src={logo.src} 
          alt={logo.alt}
          width={logo.width || 120}
          height={logo.height || 60}
          loading="lazy"
          class="logo-image"
        />
      </div>
    ))}
  </div>
</div>

<link rel="stylesheet" href="/styles/logo-strip.css" />

<script>
  class LogoStripController {
    constructor() {
      this.strips = document.querySelectorAll('.logo-strip');
      this.init();
    }
    
    init() {
      // Verificar si las animaciones están deshabilitadas
      const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
      
      if (prefersReducedMotion) {
        this.disableAnimations();
        return;
      }
      
      // Configurar observador de visibilidad para optimizar rendimiento
      this.setupVisibilityObserver();
    }
    
    disableAnimations() {
      this.strips.forEach(strip => {
        const track = strip.querySelector('.logo-strip-track');
        if (track) {
          track.style.animation = 'none';
        }
      });
    }
    
    setupVisibilityObserver() {
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach(entry => {
            const track = entry.target.querySelector('.logo-strip-track');
            if (track) {
              if (entry.isIntersecting) {
                track.style.animationPlayState = 'running';
              } else {
                track.style.animationPlayState = 'paused';
              }
            }
          });
        },
        {
          threshold: 0.1,
          rootMargin: '50px 0px'
        }
      );
      
      this.strips.forEach(strip => {
        observer.observe(strip);
      });
      
      // Guardar referencia para cleanup
      this.observer = observer;
    }
    
    destroy() {
      if (this.observer) {
        this.observer.disconnect();
      }
    }
  }
  
  // Inicializar controlador
  let logoStripController = null;
  
  // Esperar a que el DOM esté listo
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      logoStripController = new LogoStripController();
    });
  } else {
    logoStripController = new LogoStripController();
  }
  
  // Cleanup al cambiar de página
  document.addEventListener('astro:before-swap', () => {
    if (logoStripController) {
      logoStripController.destroy();
    }
  });
</script>