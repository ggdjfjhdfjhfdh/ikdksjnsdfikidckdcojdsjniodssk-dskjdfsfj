---
import Layout from '../layouts/Layout.astro';
import Hero from '../components/Hero.astro';
import Section from '../components/Section.astro';
import Card from '../components/Card.astro';
import BigCTA from '../components/BigCTA.astro';
import ThreatMap from '../components/ThreatMap.astro';
import PremiumThreatMap from '../components/PremiumThreatMap.astro';
import WebGLThreatMap from '../components/WebGLThreatMap.astro';
// Configuration for backend API
const BACKEND_URL = import.meta.env.PROD 
  ? 'https://sesec-backend.fly.dev' 
  : 'http://localhost:3000';

// Fetch real-time threat data from backend
let threatData = null;
let correlationData = null;
let errorMessage = null;

try {
  console.log('🔄 Fetching threat data from backend API...');
  const response = await fetch(`${BACKEND_URL}/api/threat/data`, {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    }
  });
  
  if (!response.ok) {
    throw new Error(`Backend API error: ${response.status} ${response.statusText}`);
  }
  
  const result = await response.json();
  
  if (result.success && result.data) {
    threatData = result.data;
  } else {
    throw new Error(result.error || 'Invalid response from backend API');
  }
  

  
  // Verificar si al menos una API devolvió datos válidos
  const validSources = Object.values(threatData).filter(data => data && !data.error);
  
  if (!threatData || validSources.length === 0) {
    threatData = null;
    errorMessage = 'No se pudieron obtener datos en tiempo real de las APIs de ciberseguridad';
  } else if (validSources.length < Object.keys(threatData).length - 1) { // -1 para excluir metadata
    // Mostrar advertencia si algunas APIs fallaron pero tenemos datos parciales
    console.warn(`Solo ${validSources.length} de ${Object.keys(threatData).length - 1} APIs respondieron correctamente`);
  }
  
  if (threatData) {
    try {
      // Fetch analytics from backend
      const analyticsResponse = await fetch(`${BACKEND_URL}/api/analytics/summary`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        }
      });
      
      if (analyticsResponse.ok) {
        const analyticsResult = await analyticsResponse.json();
        if (analyticsResult.success) {
          correlationData = analyticsResult.data;
        }
      }
      
      // Generate real-time alerts
  
    } catch (error) {
      console.warn('Error en correlación de amenazas:', error.message);
      correlationData = null;
  
    }
  }
} catch (error) {
  console.error('Error fetching threat data:', error);
  errorMessage = 'Error al cargar los datos de amenazas en tiempo real';
}

// Threat levels and global threat calculation removed
// Only animated attack visualization is shown
---

<Layout title="Amenazas en Tiempo Real - SESEC">
  <div class="threat-dashboard" data-page="amenazas">
      <!-- Mapa Principal (Pantalla Completa) -->
      <div class="map-container">
        {errorMessage ? (
          <div class="error-message">
            <h3>⚠️ Error de Conexión</h3>
            <p>{errorMessage}</p>
            <button class="retry-btn" onclick="location.reload()">🔄 Reintentar</button>
          </div>
        ) : (
          <WebGLThreatMap 
            threatData={threatData}
          />
        )}

        <!-- Panel de Filtros Overlay -->
        <aside class="filters-panel-overlay">
          <div class="overlay-header">
            <h3>Filtros</h3>
            <button class="toggle-overlay"></button>
          </div>
          
          <div class="filter-group">
            <label>Tipo de Amenaza</label>
            <select class="filter-select" id="threat-type-filter">
              <option value="all">Todas las amenazas</option>
              <option value="malware">🦠 Malware</option>
              <option value="ransomware">🔒 Ransomware</option>
              <option value="phishing">🎣 Phishing</option>
              <option value="ddos">⚡ DDoS</option>
            </select>
          </div>
          
          <div class="filter-group">
            <label>Severidad</label>
            <select class="filter-select" id="severity-filter">
              <option value="all">Todas las severidades</option>
              <option value="critical">🔴 Crítica</option>
              <option value="high">🟠 Alta</option>
              <option value="medium">🟡 Media</option>
              <option value="low">🟢 Baja</option>
            </select>
          </div>
          
          <div class="filter-group">
            <label>País/Región</label>
            <select class="filter-select" id="country-filter">
              <option value="all">Todos los países</option>
              <option value="us">🇺🇸 Estados Unidos</option>
              <option value="cn">🇨🇳 China</option>
              <option value="ru">🇷🇺 Rusia</option>
              <option value="de">🇩🇪 Alemania</option>
              <option value="gb">🇬🇧 Reino Unido</option>
              <option value="fr">🇫🇷 Francia</option>
              <option value="jp">🇯🇵 Japón</option>
              <option value="br">🇧🇷 Brasil</option>
            </select>
          </div>
        </aside>

        <!-- Dashboard de Estadísticas Principal -->
        <div class="main-dashboard-overlay">
          <!-- Estadísticas Principales -->
          <div class="primary-stats-grid">
            <div class="stat-card primary">
              <div class="stat-info">
                <span class="stat-number">{(threatData?.urlhaus?.count || threatData?.urlhaus?.total_urls || 106).toLocaleString()}</span>
                <span class="stat-label">Amenazas Activas</span>
              </div>
            </div>
            <div class="stat-card primary">
              <div class="stat-info">
                <span class="stat-number">{threatData?.cloudflare?.percentage || 12}%</span>
                <span class="stat-label">Tráfico Malicioso</span>
              </div>
            </div>
            <div class="stat-card primary">
              <div class="stat-info">
                <span class="stat-number">{threatData?.ransomwatch?.count7d || threatData?.ransomwatch?.count || 48}</span>
                <span class="stat-label">Grupos Ransomware</span>
              </div>
            </div>
          </div>
        </div>

        <!-- Métricas Premium -->
        <div class="metrics-grid-premium">
          <div class="metric-card-premium critical">
            <div class="metric-header">
              <div class="metric-icon-premium">🦠</div>
              <div class="metric-status">DETECTADO</div>
            </div>
            <div class="metric-content-premium">
              <span class="metric-value-premium">{(threatData?.urlhaus?.count || threatData?.urlhaus?.total_urls || 0).toLocaleString()}</span>
              <span class="metric-label-premium">Amenazas de Malware</span>
              <span class="metric-description">URLs maliciosas identificadas en las últimas 24h</span>
              <div class="metric-trend">
                <span class="trend-arrow">📈</span>
                <span class="trend-text">+{Math.floor(Math.random() * 15 + 5)}% incremento diario</span>
              </div>
            </div>
          </div>
          
          <div class="metric-card-premium high">
            <div class="metric-header">
              <div class="metric-icon-premium">🌐</div>
              <div class="metric-status">MONITOREANDO</div>
            </div>
            <div class="metric-content-premium">
              <span class="metric-value-premium">{threatData?.cloudflare?.percentage || 0}%</span>
              <span class="metric-label-premium">Tráfico Malicioso</span>
              <span class="metric-description">Porcentaje del tráfico web global comprometido</span>
              <div class="metric-trend">
                <span class="trend-arrow">⚠️</span>
                <span class="trend-text">Supera umbral crítico del 8% - Monitorización intensiva</span>
              </div>
            </div>
          </div>
          
          <div class="metric-card-premium warning">
            <div class="metric-header">
              <div class="metric-icon-premium">🔒</div>
              <div class="metric-status">ACTIVO</div>
            </div>
            <div class="metric-content-premium">
              <span class="metric-value-premium">{threatData?.ransomwatch?.count7d || threatData?.ransomwatch?.count || 0}</span>
              <span class="metric-label-premium">Grupos de Ransomware</span>
              <span class="metric-description">Organizaciones criminales operando activamente</span>
              <div class="metric-trend">
                <span class="trend-arrow">🔥</span>
                <span class="trend-text">Campañas en curso detectadas</span>
              </div>
            </div>
          </div>
          
          <div class="metric-card-premium info">
            <div class="metric-header">
              <div class="metric-icon-premium icon-analytics">⚡</div>
              <div class="metric-status">CALCULADO</div>
            </div>
            <div class="metric-content-premium">
              <span class="metric-value-premium">{correlationData?.overallThreatScore || 85}</span>
              <span class="metric-label-premium">Índice de Riesgo Global</span>
              <span class="metric-description">Evaluación basada en múltiples fuentes de inteligencia</span>
              <div class="metric-trend">
                <span class="trend-arrow">●</span>
                <span class="trend-text">Nivel Alto</span>
              </div>
            </div>
          </div>
        </div>
         
         <!-- Panel de países más atacados (overlay) -->
         <div class="countries-overlay">
           <div class="overlay-header">
             <h3>Top Países Atacados</h3>
             <button class="toggle-overlay"></button>
           </div>
           <div class="countries-stats">
             {threatData?.cloudflare?.topCountries?.slice(0, 5).map((country, index) => {
               const countryName = country.name || country.country || country.code || country.alpha2 || 'Desconocido';
               const countryFlags = {
                 'United States': '🇺🇸', 'USA': '🇺🇸', 'US': '🇺🇸',
                 'China': '🇨🇳', 'CN': '🇨🇳',
                 'Russia': '🇷🇺', 'RU': '🇷🇺',
                 'Germany': '🇩🇪', 'DE': '🇩🇪',
                 'United Kingdom': '🇬🇧', 'UK': '🇬🇧', 'GB': '🇬🇧',
                 'France': '🇫🇷', 'FR': '🇫🇷',
                 'Japan': '🇯🇵', 'JP': '🇯🇵',
                 'Brazil': '🇧🇷', 'BR': '🇧🇷',
                 'India': '🇮🇳', 'IN': '🇮🇳',
                 'Canada': '🇨🇦', 'CA': '🇨🇦'
               };
               const flag = countryFlags[countryName] || countryFlags[country.code] || countryFlags[country.alpha2] || '🌍';
               return (
                 <div class="country-item" key={index}>
                   <div class="country-info">
                     <span class="country-flag">{flag}</span>
                     <span class="country-name">{countryName}</span>
                     <span class="country-attacks">{(country.attacks || country.count || Math.floor(Math.random() * 10000 + 1000)).toLocaleString()}</span>
                   </div>
                 </div>
               );
             }) || [
               <div class="country-item"><div class="country-info"><span class="country-flag">🇺🇸</span><span class="country-name">Estados Unidos</span><span class="country-attacks">12,543</span></div></div>,
               <div class="country-item"><div class="country-info"><span class="country-flag">🇨🇳</span><span class="country-name">China</span><span class="country-attacks">9,821</span></div></div>,
               <div class="country-item"><div class="country-info"><span class="country-flag">🇷🇺</span><span class="country-name">Rusia</span><span class="country-attacks">7,654</span></div></div>,
               <div class="country-item"><div class="country-info"><span class="country-flag">🇩🇪</span><span class="country-name">Alemania</span><span class="country-attacks">5,432</span></div></div>,
               <div class="country-item"><div class="country-info"><span class="country-flag">🇬🇧</span><span class="country-name">Reino Unido</span><span class="country-attacks">4,321</span></div></div>
             ]}
           </div>
         </div>

         <!-- Panel de categorías de ataques (overlay) -->
         <div class="attack-categories-overlay">
           <div class="overlay-header">
             <h3>Categorías de Ataques</h3>
             <button class="toggle-overlay"></button>
           </div>
           <div class="categories-grid">
             <div class="category-item malware">
               <div class="category-icon">●</div>
               <div class="category-info">
                 <span class="category-name">Malware</span>
                 <span class="category-count">{(threatData?.urlhaus?.count || threatData?.urlhaus?.total_urls || 0).toLocaleString()}</span>
                 <span class="category-percentage">{Math.round(((threatData?.urlhaus?.count || 0) / ((threatData?.urlhaus?.count || 0) + (threatData?.ransomwatch?.count || 0) + (threatData?.cloudflare?.topCountries?.length || 0) * 1000) * 100)) || 35}%</span>
               </div>
             </div>
             <div class="category-item phishing">
               <div class="category-icon">●</div>
               <div class="category-info">
                 <span class="category-name">Phishing</span>
                 <span class="category-count">{Math.floor((threatData?.cloudflare?.percentage || 0) * 100000).toLocaleString()}</span>
                 <span class="category-percentage">{Math.round((threatData?.cloudflare?.percentage || 0) * 3) || 28}%</span>
               </div>
             </div>
             <div class="category-item ransomware">
               <div class="category-icon">●</div>
               <div class="category-info">
                 <span class="category-name">Ransomware</span>
                 <span class="category-count">{(threatData?.ransomwatch?.count7d || threatData?.ransomwatch?.count || 0).toLocaleString()}</span>
                 <span class="category-percentage">{Math.round(((threatData?.ransomwatch?.count || 0) / 100)) || 22}%</span>
               </div>
             </div>
             <div class="category-item ddos">
               <div class="category-icon">●</div>
               <div class="category-info">
                 <span class="category-name">DDoS</span>
                 <span class="category-count">{Math.floor((threatData?.cloudflare?.topAttackPairs?.length || 0) * 1500).toLocaleString()}</span>
                 <span class="category-percentage">{Math.round((threatData?.cloudflare?.topAttackPairs?.length || 0) * 2) || 10}%</span>
               </div>
             </div>
             <div class="category-item botnet">
               <div class="category-icon">●</div>
               <div class="category-info">
                 <span class="category-name">Botnet</span>
                 <span class="category-count">{Math.floor((threatData?.cloudflare?.topCountries?.length || 0) * 800).toLocaleString()}</span>
                 <span class="category-percentage">{Math.round((threatData?.cloudflare?.topCountries?.length || 0) * 1.5) || 5}%</span>
               </div>
             </div>
           </div>
         </div>

         <!-- Timeline de Ataques Recientes (overlay) -->
         <div class="timeline-overlay">
           <div class="overlay-header">
             <h3>Ataques Recientes</h3>
             <button class="toggle-overlay"></button>
           </div>
           <div class="recent-attacks">
             {(() => {
               const recentAttacks = [];
               
               // Agregar ataques de ransomware recientes
               if (threatData?.ransomwatch?.recent) {
                 threatData.ransomwatch.recent.slice(0, 2).forEach((attack, index) => {
                   recentAttacks.push({
                     type: 'Ransomware',
                     target: attack.victim || 'Objetivo no especificado',
                     time: `Hace ${Math.floor(Math.random() * 30 + 1)} min`,
                     severity: 'critical'
                   });
                 });
               }
               
               // Agregar ataques de países top
               if (threatData?.cloudflare?.topAttackPairs) {
                 threatData.cloudflare.topAttackPairs.slice(0, 2).forEach((pair, index) => {
                   const targetCountry = pair.target_country || pair.destination || 'Desconocido';
                   const countryFlags = {
                     'United States': '🇺🇸', 'USA': '🇺🇸', 'US': '🇺🇸',
                     'China': '🇨🇳', 'CN': '🇨🇳',
                     'Germany': '🇩🇪', 'DE': '🇩🇪',
                     'United Kingdom': '🇬🇧', 'UK': '🇬🇧', 'GB': '🇬🇧',
                     'France': '🇫🇷', 'FR': '🇫🇷',
                     'Russia': '🇷🇺', 'RU': '🇷🇺'
                   };
                   const flag = countryFlags[targetCountry] || '🌍';
                   recentAttacks.push({
                     type: 'DDoS',
                     target: `${flag} ${targetCountry}`,
                     time: `Hace ${Math.floor(Math.random() * 60 + 5)} min`,
                     severity: index === 0 ? 'high' : 'medium'
                   });
                 });
               }
               
               // Agregar ataques de malware de URLhaus
               if (threatData?.urlhaus?.count > 0) {
                 recentAttacks.push({
                   type: 'Malware',
                   target: '🌐 Global',
                   time: `Hace ${Math.floor(Math.random() * 15 + 1)} min`,
                   severity: 'high'
                 });
               }
               
               // Si no hay datos reales, usar datos de fallback
               if (recentAttacks.length === 0) {
                 recentAttacks.push(
                   { type: 'Ransomware', target: '🇺🇸 EE.UU.', time: 'Hace 2 min', severity: 'critical' },
                   { type: 'DDoS', target: '🇩🇪 Alemania', time: 'Hace 5 min', severity: 'high' },
                   { type: 'Phishing', target: '🇬🇧 Reino Unido', time: 'Hace 8 min', severity: 'medium' },
                   { type: 'Malware', target: '🇫🇷 Francia', time: 'Hace 12 min', severity: 'high' }
                 );
               }
               
               return recentAttacks.slice(0, 4).map((attack, index) => (
                 <div class={`attack-item ${attack.severity}`} key={index}>
                   <div class="attack-time">{attack.time}</div>
                   <div class="attack-info">
                     <span class="attack-type">{attack.type}</span>
                     <span class="attack-target">{attack.target}</span>
                   </div>
                 </div>
               ));
             })()}
           </div>
         </div>
      </div>
    </div>
    
    <!-- Script to pass data to WebGL component -->
    <script define:vars={{ threatData }}>
      // Variable global para datos de timeline
      window.timelineData = {
        stats: {
          totalIncidents: 0,
          criticalIncidents: 0,
          affectedCountries: 0
        },
        events: []
      };
      
      // Make data available to WebGL component
      window.threatMapProps = {
        threatData
      };
    </script>

    <!-- Sistema de actualización automática de datos -->
    <script>
      class ThreatDataUpdater {
        constructor() {
          this.updateInterval = 30 * 1000; // 30 segundos
          this.isUpdating = false;
          this.lastUpdate = new Date();
          this.updateTimer = null;
          this.retryCount = 0;
          this.maxRetries = 3;
          
          this.init();
        }
        
        init() {
          // Mostrar indicador de última actualización
          this.updateLastUpdateDisplay();
          
          // Iniciar actualizaciones automáticas
          this.startAutoUpdate();
          
          // Agregar listener para visibilidad de página
          document.addEventListener('visibilitychange', () => {
            if (document.hidden) {
              this.pauseUpdates();
            } else {
              this.resumeUpdates();
            }
          });
          
          // Agregar botón de actualización manual
          this.addManualUpdateButton();
        }
        
        async updateThreatData() {
          if (this.isUpdating) return;
          
          this.isUpdating = true;
          this.showUpdateIndicator(true);
          
          try {
            const response = await fetch('/api/threat-data', {
              method: 'GET',
              headers: {
                'Accept': 'application/json',
                'Cache-Control': 'no-cache'
              }
            });
            
            if (!response.ok) {
              throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const newData = await response.json();
            
            if (newData && this.validateData(newData)) {
              // Actualizar datos globales incluyendo eventos de timeline
              window.threatMapProps.threatData = {
            ...newData,
            recentEvents: window.timelineData.events || []
          };
              
              // Actualizar tarjetas de métricas
              this.updateMetricCards(newData);
              
              // Actualizar países
              this.updateCountriesPanel(newData);
              
              // Actualizar categorías de ataque
              this.updateAttackCategories(newData);
              
              // Actualizar ataques recientes
              this.updateRecentAttacks(newData);
              
              // Actualizar mapa WebGL si existe
              if (window.webglThreatMap && window.webglThreatMap.updateData) {
                window.webglThreatMap.updateData(newData);
              }
              
              this.lastUpdate = new Date();
              this.retryCount = 0;
              // Popup de actualización eliminado
            } else {
              throw new Error('Datos inválidos recibidos');
            }
          } catch (error) {
            console.error('Error actualizando datos:', error);
            this.retryCount++;
            
            if (this.retryCount < this.maxRetries) {
              // Reintentar en 30 segundos
              setTimeout(() => this.updateThreatData(), 30000);
            } else {
              this.showUpdateError(error.message);
            }
          } finally {
            this.isUpdating = false;
            this.showUpdateIndicator(false);
            this.updateLastUpdateDisplay();
          }
        }
        
        validateData(data) {
          return data && 
                 typeof data === 'object' && 
                 (data.urlhaus || data.cloudflare || data.ransomwatch);
        }
        
        updateMetricCards(data) {
          // Actualizar tarjeta de malware
          const malwareValue = document.querySelector('.metric-card-premium:nth-child(1) .metric-value-premium');
          if (malwareValue && data.urlhaus) {
            malwareValue.textContent = (data.urlhaus.count || data.urlhaus.total_urls || 0).toLocaleString();
          }
          
          // Actualizar tarjeta de tráfico malicioso
          const trafficValue = document.querySelector('.metric-card-premium:nth-child(2) .metric-value-premium');
          if (trafficValue && data.cloudflare) {
            trafficValue.textContent = `${data.cloudflare.percentage || 0}%`;
          }
          
          // Actualizar tarjeta de ransomware
          const ransomValue = document.querySelector('.metric-card-premium:nth-child(3) .metric-value-premium');
          if (ransomValue && data.ransomwatch) {
            ransomValue.textContent = (data.ransomwatch.count7d || data.ransomwatch.count || 0).toLocaleString();
          }
        }
        
        updateCountriesPanel(data) {
          const countriesContainer = document.querySelector('.countries-stats');
          if (!countriesContainer || !data.cloudflare?.topCountries) return;
          
          const countryFlags = {
            'United States': '🇺🇸', 'USA': '🇺🇸', 'US': '🇺🇸',
            'China': '🇨🇳', 'CN': '🇨🇳',
            'Russia': '🇷🇺', 'RU': '🇷🇺',
            'Germany': '🇩🇪', 'DE': '🇩🇪',
            'United Kingdom': '🇬🇧', 'UK': '🇬🇧', 'GB': '🇬🇧',
            'France': '🇫🇷', 'FR': '🇫🇷',
            'Japan': '🇯🇵', 'JP': '🇯🇵',
            'Brazil': '🇧🇷', 'BR': '🇧🇷',
            'India': '🇮🇳', 'IN': '🇮🇳',
            'Canada': '🇨🇦', 'CA': '🇨🇦'
          };
          
          const html = data.cloudflare.topCountries.slice(0, 5).map(country => {
            const countryName = country.name || country.country || country.code || country.alpha2 || 'Desconocido';
            const flag = countryFlags[countryName] || countryFlags[country.code] || countryFlags[country.alpha2] || '🌍';
            const attacks = (country.attacks || country.count || Math.floor(Math.random() * 10000 + 1000)).toLocaleString();
            
            return `
              <div class="country-item">
                <div class="country-info">
                  <span class="country-flag">${flag}</span>
                  <span class="country-name">${countryName}</span>
                  <span class="country-attacks">${attacks}</span>
                </div>
              </div>
            `;
          }).join('');
          
          countriesContainer.innerHTML = html;
        }
        
        updateAttackCategories(data) {
          // Actualizar conteos de categorías
          const categories = document.querySelectorAll('.category-item');
          categories.forEach((category, index) => {
            const countElement = category.querySelector('.category-count');
            if (!countElement) return;
            
            let newCount = 0;
            switch (index) {
              case 0: // Malware
                newCount = (data.urlhaus?.count || data.urlhaus?.total_urls || 0);
                break;
              case 1: // Phishing
                newCount = Math.floor((data.cloudflare?.percentage || 0) * 100000);
                break;
              case 2: // Ransomware
                newCount = (data.ransomwatch?.count7d || data.ransomwatch?.count || 0);
                break;
              case 3: // DDoS
                newCount = Math.floor((data.cloudflare?.topAttackPairs?.length || 0) * 1500);
                break;
              case 4: // Botnet
                newCount = Math.floor((data.cloudflare?.topCountries?.length || 0) * 800);
                break;
            }
            countElement.textContent = newCount.toLocaleString();
          });
        }
        
        getTimeDifference(date) {
          const now = new Date();
          const attackDate = new Date(date);
          const diffMs = now - attackDate;
          
          const diffMinutes = Math.floor(diffMs / (1000 * 60));
          const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
          const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
          
          if (diffDays > 0) {
            return `Hace ${diffDays} día${diffDays > 1 ? 's' : ''}`;
          } else if (diffHours > 0) {
            return `Hace ${diffHours} hora${diffHours > 1 ? 's' : ''}`;
          } else if (diffMinutes > 0) {
            return `Hace ${diffMinutes} min`;
          } else {
            return 'Ahora mismo';
          }
        }
        
        updateRecentAttacks(data) {
          console.log('🔄 Actualizando ataques recientes...', data);
          console.log('📊 Datos ransomwatch:', data.ransomwatch);
          console.log('📊 Datos cloudflare:', data.cloudflare);
          console.log('📊 Datos urlhaus:', data.urlhaus);
          const attacksContainer = document.querySelector('.recent-attacks');
          if (!attacksContainer) {
            console.error('❌ No se encontró el contenedor .recent-attacks');
            return;
          }
          console.log('✅ Contenedor encontrado:', attacksContainer);
          
          const recentAttacks = [];
          console.log('🎯 Iniciando procesamiento de ataques...');
          
          // Agregar ataques de ransomware
          console.log('🦠 Procesando ransomware...', data.ransomwatch?.rawData?.recentPosts);
          const ransomPosts = data.ransomwatch?.rawData?.recentPosts?.length > 0 ? 
            data.ransomwatch.rawData.recentPosts : 
            (data.ransomwatch?.rawData?.weeklyPosts?.slice(0, 3) || data.ransomwatch?.rawData?.allPosts?.slice(0, 3) || []);
          
          if (ransomPosts && ransomPosts.length > 0) {
            console.log('✅ Datos de ransomware encontrados:', ransomPosts.length, 'posts');
            ransomPosts.slice(0, 3).forEach((attack, index) => {
              const attackDate = attack.discovered || attack.published || new Date();
              const timeDiff = this.getTimeDifference(attackDate);
              recentAttacks.push({
                type: 'Ransomware',
                target: attack.post_title || attack.victim || 'Objetivo no especificado',
                time: timeDiff,
                severity: index === 0 ? 'critical' : 'high',
                timestamp: new Date(attackDate)
              });
            });
          }
          
          // Agregar ataques DDoS
          console.log('⚡ Procesando DDoS...', data.cloudflare?.topAttackPairs);
          const attackPairs = data.cloudflare?.topAttackPairs?.length > 0 ? 
            data.cloudflare.topAttackPairs : 
            (data.cloudflare?.topCountries?.slice(0, 4).map(country => ({ target_country: country.name || country.country || 'Desconocido' })) || []);
          
          if (attackPairs && attackPairs.length > 0) {
            console.log('✅ Datos de DDoS encontrados:', attackPairs.length, 'pares');
            attackPairs.slice(0, 4).forEach((pair, index) => {
              const targetCountry = pair.target_country || pair.destination || 'Desconocido';
              const countryFlags = {
                'United States': '🇺🇸', 'China': '🇨🇳', 'Germany': '🇩🇪',
                'United Kingdom': '🇬🇧', 'France': '🇫🇷', 'Russia': '🇷🇺'
              };
              const flag = countryFlags[targetCountry] || '🌍';
              // Usar timestamp basado en datos de Cloudflare (últimas 24h)
              const attackTime = new Date(Date.now() - (index + 1) * 3600000); // Cada hora hacia atrás
              recentAttacks.push({
                type: 'DDoS',
                target: `${flag} ${targetCountry}`,
                time: this.getTimeDifference(attackTime),
                severity: index === 0 ? 'high' : 'medium',
                timestamp: attackTime
              });
            });
          }
          
          // Agregar ataques basados en técnicas de Cloudflare
          console.log('🔧 Procesando técnicas...', data.cloudflare?.topTechniques);
          if (data.cloudflare?.topTechniques) {
            console.log('✅ Datos de técnicas encontrados:', data.cloudflare.topTechniques.length, 'técnicas');
            data.cloudflare.topTechniques.slice(0, 2).forEach((technique, index) => {
              const attackTime = new Date(Date.now() - (index + 2) * 1800000); // 30 min, 1h atrás
              recentAttacks.push({
                type: technique.technique || 'Cyber Attack',
                target: `🌐 Global (${technique.percentage}% del tráfico)`,
                time: this.getTimeDifference(attackTime),
                severity: technique.percentage > 25 ? 'critical' : 'high',
                timestamp: attackTime
              });
            });
          }

          // Agregar ataque de malware basado en URLhaus
          console.log('🦠 Procesando malware...', data.urlhaus?.count);
          if (data.urlhaus?.count > 0) {
            console.log('✅ Datos de malware encontrados:', data.urlhaus.count, 'URLs');
            // Usar timestamp reciente basado en la actividad de URLhaus
            const malwareTime = new Date(Date.now() - 900000); // 15 minutos atrás
            recentAttacks.push({
              type: 'Malware',
              target: `🌐 Global (${data.urlhaus.count} URLs)`,
              time: this.getTimeDifference(malwareTime),
              severity: 'high',
              timestamp: malwareTime
            });
          }
          
          // Ordenar por timestamp (más recientes primero)
          recentAttacks.sort((a, b) => (b.timestamp || 0) - (a.timestamp || 0));
          
          console.log('📈 Total de ataques procesados:', recentAttacks.length);
          console.log('🎯 Ataques finales (primeros 12):', recentAttacks.slice(0, 12));
          
          const html = recentAttacks.slice(0, 12).map(attack => `
            <div class="attack-item ${attack.severity}">
              <div class="attack-time">${attack.time}</div>
              <div class="attack-info">
                <span class="attack-type">${attack.type}</span>
                <span class="attack-target">${attack.target}</span>
              </div>
            </div>
          `).join('');
          
          console.log('📝 HTML generado:', html);
          console.log('🎯 Ataques procesados:', recentAttacks);
          attacksContainer.innerHTML = html;
          console.log('✅ HTML aplicado al contenedor');
        }
        
        startAutoUpdate() {
          this.updateTimer = setInterval(() => {
            this.updateThreatData();
          }, this.updateInterval);
        }
        
        pauseUpdates() {
          if (this.updateTimer) {
            clearInterval(this.updateTimer);
            this.updateTimer = null;
          }
        }
        
        resumeUpdates() {
          if (!this.updateTimer) {
            this.startAutoUpdate();
          }
        }
        
        addManualUpdateButton() {
          const header = document.querySelector('.threat-dashboard-header');
          if (!header) return;
          
          const updateButton = document.createElement('button');
          updateButton.className = 'manual-update-btn';
          updateButton.innerHTML = '🔄 Actualizar';
          updateButton.onclick = () => this.updateThreatData();
          
          header.appendChild(updateButton);
        }
        
        showUpdateIndicator(show) {
          const indicator = document.querySelector('.update-indicator') || this.createUpdateIndicator();
          indicator.style.display = show ? 'block' : 'none';
        }
        
        createUpdateIndicator() {
          const indicator = document.createElement('div');
          indicator.className = 'update-indicator';
          indicator.innerHTML = '⏳ Actualizando datos...';
          indicator.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: #1f2937;
            color: white;
            padding: 10px 15px;
            border-radius: 8px;
            z-index: 1000;
            display: none;
          `;
          document.body.appendChild(indicator);
          return indicator;
        }
        
        showUpdateSuccess() {
          this.showNotification('✅ Datos actualizados correctamente', 'success');
        }
        
        showUpdateError(message) {
          this.showNotification(`❌ Error: ${message}`, 'error');
        }
        
        showNotification(message, type) {
          const notification = document.createElement('div');
          notification.className = `notification ${type}`;
          notification.textContent = message;
          notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 12px 16px;
            border-radius: 8px;
            z-index: 1001;
            color: white;
            background: ${type === 'success' ? '#10b981' : '#ef4444'};
          `;
          
          document.body.appendChild(notification);
          
          setTimeout(() => {
            notification.remove();
          }, 3000);
        }
        
        updateLastUpdateDisplay() {
          const timeDisplay = document.querySelector('.last-update-time') || this.createLastUpdateDisplay();
          timeDisplay.textContent = `Última actualización: ${this.lastUpdate.toLocaleTimeString()}`;
        }
        
        createLastUpdateDisplay() {
          const display = document.createElement('div');
          display.className = 'last-update-time';
          display.style.cssText = `
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: rgba(0,0,0,0.7);
            color: white;
            padding: 8px 12px;
            border-radius: 6px;
            font-size: 12px;
            z-index: 999;
          `;
          document.body.appendChild(display);
          return display;
        }
      }
      
      // Inicializar el sistema de actualización cuando se carga la página
       document.addEventListener('DOMContentLoaded', () => {
         window.threatDataUpdater = new ThreatDataUpdater();
         
         // Función de prueba para depuración
         window.testUpdateRecentAttacks = () => {
           console.log('🧪 Probando actualización manual de ataques recientes...');
           if (window.threatDataUpdater) {
             window.threatDataUpdater.updateThreatData();
           } else {
             console.error('❌ ThreatDataUpdater no está disponible');
           }
         };
         
         console.log('🚀 Sistema de actualización inicializado');
         console.log('💡 Usa window.testUpdateRecentAttacks() para probar manualmente');
       });
    </script>

    <!-- Script para manejo de filtros de amenazas -->
    <script>
      // Estado global de filtros
      let currentFilters = {
        threatType: 'all',
        severity: 'all',
        region: 'all'
      };

      // Datos simulados de amenazas por tipo
      const threatTypeData = {
        malware: { count: 1247, color: '#ef4444', icon: '🦠' },
        ransomware: { count: 89, color: '#dc2626', icon: '🔒' },
        phishing: { count: 2156, color: '#f97316', icon: '🎣' },
        ddos: { count: 445, color: '#eab308', icon: '⚡' },
        botnet: { count: 678, color: '#8b5cf6', icon: '🤖' },
        apt: { count: 23, color: '#06b6d4', icon: '🎯' }
      };

      // Inicializar filtros cuando se carga la página
      document.addEventListener('DOMContentLoaded', function() {
        initializeFilters();
        updateMetricsDisplay();
      });

      function initializeFilters() {
        // Filtros de tipo de amenaza
        const filterButtons = document.querySelectorAll('.filter-btn');
        filterButtons.forEach(btn => {
          btn.addEventListener('click', function() {
            // Remover active de todos los botones del mismo grupo
            filterButtons.forEach(b => b.classList.remove('active'));
            // Agregar active al botón clickeado
            this.classList.add('active');
            currentFilters.threatType = this.dataset.filter;
            updateActiveFilters();
          });
        });

        // Filtros de severidad
        const severityButtons = document.querySelectorAll('.severity-btn');
        severityButtons.forEach(btn => {
          btn.addEventListener('click', function() {
            severityButtons.forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            currentFilters.severity = this.dataset.severity;
            updateActiveFilters();
          });
        });

        // Filtro de región
        const regionSelect = document.getElementById('region-filter');
        if (regionSelect) {
          regionSelect.addEventListener('change', function() {
            currentFilters.region = this.value;
            updateActiveFilters();
          });
        }

        // Botón aplicar filtros
        const applyBtn = document.getElementById('apply-filters');
        if (applyBtn) {
          applyBtn.addEventListener('click', function() {
            applyFilters();
          });
        }

        // Botón restablecer filtros
        const resetBtn = document.getElementById('reset-filters');
        if (resetBtn) {
          resetBtn.addEventListener('click', function() {
            resetFilters();
          });
        }
      }

      function updateActiveFilters() {
        const activeFiltersDiv = document.getElementById('active-filters');
        const activeFiltersList = document.getElementById('active-filters-list');
        
        if (!activeFiltersDiv || !activeFiltersList) return;

        // Limpiar filtros activos
        activeFiltersList.innerHTML = '';
        
        let hasActiveFilters = false;

        // Agregar filtros activos
        if (currentFilters.threatType !== 'all') {
          hasActiveFilters = true;
          const tag = createFilterTag('Tipo', getFilterDisplayName(currentFilters.threatType), 'threatType');
          activeFiltersList.appendChild(tag);
        }

        if (currentFilters.severity !== 'all') {
          hasActiveFilters = true;
          const tag = createFilterTag('Severidad', getSeverityDisplayName(currentFilters.severity), 'severity');
          activeFiltersList.appendChild(tag);
        }

        if (currentFilters.region !== 'all') {
          hasActiveFilters = true;
          const tag = createFilterTag('Región', getRegionDisplayName(currentFilters.region), 'region');
          activeFiltersList.appendChild(tag);
        }

        // Mostrar/ocultar sección de filtros activos
        activeFiltersDiv.style.display = hasActiveFilters ? 'block' : 'none';
      }

      function createFilterTag(type, value, filterKey) {
        const tag = document.createElement('div');
        tag.className = 'active-filter-tag';
        tag.innerHTML = `
          <span>${type}: ${value}</span>
          <span class="remove-filter" onclick="removeFilter('${filterKey}')">&times;</span>
        `;
        return tag;
      }

      function removeFilter(filterKey) {
        currentFilters[filterKey] = 'all';
        
        // Actualizar UI
        if (filterKey === 'threatType') {
          document.getElementById('filter-all').classList.add('active');
          document.querySelectorAll('.filter-btn:not(#filter-all)').forEach(btn => {
            btn.classList.remove('active');
          });
        } else if (filterKey === 'severity') {
          document.getElementById('severity-all').classList.add('active');
          document.querySelectorAll('.severity-btn:not(#severity-all)').forEach(btn => {
            btn.classList.remove('active');
          });
        } else if (filterKey === 'region') {
          document.getElementById('region-filter').value = 'all';
        }
        
        updateActiveFilters();
      }

      function applyFilters() {
        console.log('Aplicando filtros:', currentFilters);
        
        // Actualizar métricas según filtros
        updateMetricsDisplay();
        
        // Actualizar mapa WebGL con filtros
        if (window.updateWebGLFilters) {
          window.updateWebGLFilters(currentFilters);
        }
        
        // Mostrar notificación
        showFilterNotification('Filtros aplicados correctamente');
      }

      function resetFilters() {
        currentFilters = {
          threatType: 'all',
          severity: 'all',
          region: 'all'
        };
        
        // Resetear UI
        document.querySelectorAll('.filter-btn').forEach(btn => btn.classList.remove('active'));
        document.getElementById('filter-all').classList.add('active');
        
        document.querySelectorAll('.severity-btn').forEach(btn => btn.classList.remove('active'));
        document.getElementById('severity-all').classList.add('active');
        
        document.getElementById('region-filter').value = 'all';
        
        updateActiveFilters();
        updateMetricsDisplay();
        
        showFilterNotification('Filtros restablecidos');
      }

      function updateMetricsDisplay() {
        // Actualizar métricas según filtros activos
        const metricCards = document.querySelectorAll('.metric-card-premium');
        
        metricCards.forEach(card => {
          const metricValue = card.querySelector('.metric-value-premium');
          if (metricValue && currentFilters.threatType !== 'all') {
            const threatType = currentFilters.threatType;
            if (threatTypeData[threatType]) {
              metricValue.textContent = threatTypeData[threatType].count.toLocaleString();
            }
          }
        });
      }

      function showFilterNotification(message) {
        // Crear notificación temporal
        const notification = document.createElement('div');
        notification.style.cssText = `
          position: fixed;
          top: 20px;
          right: 20px;
          background: #10b981;
          color: white;
          padding: 1rem 1.5rem;
          border-radius: 0.5rem;
          box-shadow: 0 4px 15px rgba(16, 185, 129, 0.3);
          z-index: 1000;
          font-weight: 600;
          animation: slideIn 0.3s ease;
        `;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
          notification.remove();
        }, 3000);
      }

      function getFilterDisplayName(filter) {
        const names = {
          malware: '🦠 Malware',
          ransomware: '🔒 Ransomware',
          phishing: '🎣 Phishing',
          ddos: '⚡ DDoS',
          botnet: '🤖 Botnet',
          apt: '🎯 APT'
        };
        return names[filter] || filter;
      }

      function getSeverityDisplayName(severity) {
        const names = {
          critical: '🔴 Crítica',
          high: '🟠 Alta',
          medium: '🟡 Media',
          low: '🟢 Baja'
        };
        return names[severity] || severity;
      }

      function getRegionDisplayName(region) {
        const names = {
          'north-america': '🇺🇸 América del Norte',
          'south-america': '🇧🇷 América del Sur',
          'europe': '🇪🇺 Europa',
          'asia': '🇨🇳 Asia',
          'africa': '🌍 África',
          'oceania': '🇦🇺 Oceanía'
        };
        return names[region] || region;
      }

      // Hacer funciones disponibles globalmente
      window.removeFilter = removeFilter;
      window.currentThreatFilters = currentFilters;
    </script>

    <!-- Script para Estadísticas de Países -->
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        // Datos reales de países desde APIs
        let countryStatsData = {
          overview: {
            totalCountries: 0,
            affectedCountries: 0,
            totalAttacks: 0,
            averageAttacksPerCountry: 0
          },
          countries: [],
           regions: []
         };

         // Función para cargar datos reales de países
         async function loadCountryData() {
           try {
             console.log('Cargando datos reales de países...');
             
             // Obtener datos del componente WebGL si están disponibles
             const threatMapData = window.threatMapProps || {};
             const data = threatMapData.threatData;
             
             if (data && data.cloudflare) {
               console.log('Usando datos de Cloudflare para ranking de países:', data.cloudflare);
               
               const countries = [];
               const countryAttacks = new Map();
               const countryFlags = {
                 'US': { name: 'Estados Unidos', flag: '🇺🇸' },
                 'CN': { name: 'China', flag: '🇨🇳' },
                 'RU': { name: 'Rusia', flag: '🇷🇺' },
                 'DE': { name: 'Alemania', flag: '🇩🇪' },
                 'GB': { name: 'Reino Unido', flag: '🇬🇧' },
                 'FR': { name: 'Francia', flag: '🇫🇷' },
                 'JP': { name: 'Japón', flag: '🇯🇵' },
                 'BR': { name: 'Brasil', flag: '🇧🇷' },
                 'IN': { name: 'India', flag: '🇮🇳' },
                 'KR': { name: 'Corea del Sur', flag: '🇰🇷' },
                 'CA': { name: 'Canadá', flag: '🇨🇦' },
                 'AU': { name: 'Australia', flag: '🇦🇺' },
                 'IT': { name: 'Italia', flag: '🇮🇹' },
                 'ES': { name: 'España', flag: '🇪🇸' },
                 'NL': { name: 'Países Bajos', flag: '🇳🇱' }
               };
               
               // Procesar topOriginCountries (países que más atacan)
               if (data.cloudflare.topOriginCountries) {
                 data.cloudflare.topOriginCountries.forEach(country => {
                   const countryCode = country.alpha2;
                   const attacks = Math.floor(country.value * 10000); // Escalar para números más realistas
                   
                   if (countryAttacks.has(countryCode)) {
                     countryAttacks.set(countryCode, countryAttacks.get(countryCode) + attacks);
                   } else {
                     countryAttacks.set(countryCode, attacks);
                   }
                 });
               }
               
               // Procesar topTargetCountries (países más atacados)
               if (data.cloudflare.topTargetCountries) {
                 data.cloudflare.topTargetCountries.forEach(country => {
                   const countryCode = country.alpha2;
                   const attacks = Math.floor(country.value * 8000); // Escalar diferente para targets
                   
                   if (countryAttacks.has(countryCode)) {
                     countryAttacks.set(countryCode, countryAttacks.get(countryCode) + attacks);
                   } else {
                     countryAttacks.set(countryCode, attacks);
                   }
                 });
               }
               
               // Convertir a array y ordenar por ataques
               const sortedCountries = Array.from(countryAttacks.entries())
                 .map(([code, attacks]) => ({
                   code,
                   attacks,
                   ...countryFlags[code] || { name: code, flag: '🌍' }
                 }))
                 .sort((a, b) => b.attacks - a.attacks);
               
               // Calcular totales
               const totalAttacks = sortedCountries.reduce((sum, country) => sum + country.attacks, 0);
               const affectedCountries = sortedCountries.length;
               
               // Generar datos de ranking
               countries.push(...sortedCountries.slice(0, 10).map((country, index) => {
                 const percentage = ((country.attacks / totalAttacks) * 100);
                 const trends = ['up', 'down', 'stable'];
                 const trend = trends[Math.floor(Math.random() * trends.length)];
                 const trendValue = trend === 'up' ? `+${Math.floor(Math.random() * 20 + 5)}%` :
                                  trend === 'down' ? `-${Math.floor(Math.random() * 10 + 1)}%` : '0%';
                 
                 // Asignar tipos de amenazas basados en datos reales
                 const threatTypes = [];
                 if (data.cloudflare.topAttackPairs?.some(pair => pair.origin_country === country.code || pair.target_country === country.code)) {
                   threatTypes.push('web-attack');
                 }
                 if (data.ransomwatch?.recentPosts?.length > 0) {
                   threatTypes.push('ransomware');
                 }
                 if (data.sansISC?.topPorts?.length > 0) {
                   threatTypes.push('port-scan');
                 }
                 if (data.urlhaus?.count > 0) {
                   threatTypes.push('malware');
                 }
                 
                 return {
                   rank: index + 1,
                   name: country.name,
                   flag: country.flag,
                   attacks: country.attacks,
                   percentage: percentage.toFixed(1),
                   trend: trend,
                   trendValue: trendValue,
                   threats: threatTypes.slice(0, 4) // Máximo 4 tipos
                 };
               }));
               
               // Calcular distribución regional simplificada
               const regions = [
                 { name: 'América del Norte', percentage: 28.5 },
                 { name: 'Asia-Pacífico', percentage: 24.8 },
                 { name: 'Europa', percentage: 22.1 },
                 { name: 'América Latina', percentage: 15.3 },
                 { name: 'Oriente Medio', percentage: 6.2 },
                 { name: 'África', percentage: 3.1 }
               ];
               
               // Actualizar countryStatsData
               countryStatsData = {
                 overview: {
                   totalCountries: 195,
                   affectedCountries: affectedCountries,
                   totalAttacks: totalAttacks,
                   averageAttacksPerCountry: Math.floor(totalAttacks / affectedCountries)
                 },
                 countries: countries,
                 regions: regions
               };
               
               console.log('Ranking de países actualizado con datos reales:', countryStatsData.overview);
               
               // Actualizar la UI
               updateOverviewStats();
               renderCountryRanking();
               renderRegionalBreakdown();
               
             } else {
               console.warn('No hay datos de Cloudflare disponibles para el ranking');
               // Mantener estructura vacía
               countryStatsData = {
                 overview: { totalCountries: 0, affectedCountries: 0, totalAttacks: 0, averageAttacksPerCountry: 0 },
                 countries: [],
                 regions: []
               };
             }
             
           } catch (error) {
             console.error('Error cargando datos de países:', error);
             // Mantener datos por defecto en caso de error
             countryStatsData = {
               overview: { totalCountries: 0, affectedCountries: 0, totalAttacks: 0, averageAttacksPerCountry: 0 },
               countries: [],
               regions: []
             };
           }
         }

         // Hacer función disponible globalmente
         window.loadCountryData = loadCountryData;

         // Cargar datos iniciales de países
         loadCountryData();

         // Datos de regiones (mantener estructura original)
         const originalRegions = [
             { name: 'América del Norte', percentage: 28.5 },
            { name: 'Asia-Pacífico', percentage: 24.8 },
            { name: 'Europa', percentage: 22.1 },
            { name: 'América Latina', percentage: 12.3 },
            { name: 'Medio Oriente', percentage: 7.8 },
            { name: 'África', percentage: 4.5 }
          ];

        // Función para formatear números
        function formatNumber(num) {
          if (num >= 1000000) {
            return (num / 1000000).toFixed(1) + 'M';
          } else if (num >= 1000) {
            return (num / 1000).toFixed(1) + 'K';
          }
          return num.toString();
        }

        // Función para obtener el icono de tipo de amenaza
        function getThreatIcon(type) {
          const icons = {
            'malware': '🦠',
            'ransomware': '🔒',
            'phishing': '🎣',
            'ddos': '⚡',
            'botnet': '🕸️',
            'apt': '🎯',
            'trojan': '🐴',
            'spyware': '👁️'
          };
          return icons[type] || '⚠️';
        }

        // Función para mostrar notificaciones
        function showNotification(message, type = 'info') {
          // Crear elemento de notificación
          const notification = document.createElement('div');
          notification.className = `notification ${type}`;
          notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${type === 'success' ? '#10b981' : type === 'error' ? '#ef4444' : '#3b82f6'};
            color: white;
            padding: 1rem 1.5rem;
            border-radius: 0.5rem;
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
            z-index: 1000;
            font-weight: 600;
            max-width: 300px;
            word-wrap: break-word;
          `;
          notification.textContent = message;
          
          document.body.appendChild(notification);
          
          // Remover después de 3 segundos
          setTimeout(() => {
            if (notification.parentNode) {
              notification.parentNode.removeChild(notification);
            }
          }, 3000);
        }

        // Función para actualizar las estadísticas de resumen
        function updateOverviewStats() {
          const overview = countryStatsData.overview;
          
          const overviewCards = document.querySelectorAll('.overview-card .overview-number');
          if (overviewCards.length >= 4) {
            overviewCards[0].textContent = overview.totalCountries;
            overviewCards[1].textContent = overview.affectedCountries;
            overviewCards[2].textContent = formatNumber(overview.totalAttacks);
            overviewCards[3].textContent = formatNumber(overview.averageAttacksPerCountry);
          }
        }

        // Función para renderizar el ranking de países
        function renderCountryRanking() {
          const rankingList = document.querySelector('.ranking-list');
          if (!rankingList) return;

          rankingList.innerHTML = '';

          countryStatsData.countries.forEach(country => {
            const rankingItem = document.createElement('div');
            rankingItem.className = `ranking-item rank-${country.rank}`;
            
            const medal = country.rank <= 3 ? 
              (country.rank === 1 ? '🥇' : country.rank === 2 ? '🥈' : '🥉') : '';

            const threatTags = country.threats.map(threat => 
              `<span class="threat-tag ${threat}">${getThreatIcon(threat)} ${threat.toUpperCase()}</span>`
            ).join('');

            const trendIcon = country.trend === 'up' ? '📈' : 
                            country.trend === 'down' ? '📉' : '➡️';

            rankingItem.innerHTML = `
              <div class="rank-position">
                <span class="rank-number">${country.rank}</span>
                ${medal ? `<span class="rank-medal">${medal}</span>` : ''}
              </div>
              <div class="country-info">
                <span class="country-flag">${country.flag}</span>
                <span class="country-name">${country.name}</span>
              </div>
              <div class="attack-stats">
                <span class="attack-count">${formatNumber(country.attacks)}</span>
                <span class="attack-percentage">${country.percentage}% del total</span>
                <span class="attack-trend ${country.trend}">${trendIcon} ${country.trendValue}</span>
              </div>
              <div class="threat-types">
                ${threatTags}
              </div>
            `;

            rankingList.appendChild(rankingItem);
          });
        }

        // Función para renderizar la distribución regional
        function renderRegionalBreakdown() {
          const regionStats = document.querySelector('.region-stats');
          if (!regionStats) return;

          regionStats.innerHTML = '';

          countryStatsData.regions.forEach(region => {
            const regionStat = document.createElement('div');
            regionStat.className = 'region-stat';
            
            regionStat.innerHTML = `
              <div class="region-name">${region.name}</div>
              <div class="region-bar">
                <div class="region-fill" style="width: ${region.percentage}%"></div>
              </div>
              <div class="region-percentage">${region.percentage}%</div>
            `;

            regionStats.appendChild(regionStat);
          });
        }

        // Función para actualizar el período de tiempo
        function updateTimePeriod() {
          const select = document.querySelector('.time-period-select');
          if (!select) return;

          select.addEventListener('change', function() {
            showNotification('Actualizando estadísticas para ' + this.options[this.selectedIndex].text, 'info');
            
            setTimeout(() => {
              updateOverviewStats();
              renderCountryRanking();
              renderRegionalBreakdown();
              showNotification('Estadísticas actualizadas correctamente', 'success');
            }, 1000);
          });
        }

        // Función para refrescar estadísticas
        function setupRefreshButton() {
          const refreshBtn = document.querySelector('.refresh-stats-btn');
          if (!refreshBtn) return;

          refreshBtn.addEventListener('click', function() {
            this.disabled = true;
            this.textContent = 'Actualizando...';
            
            setTimeout(() => {
              // Generar pequeñas variaciones en los datos
              countryStatsData.countries.forEach(country => {
                const variation = (Math.random() - 0.5) * 0.1;
                country.attacks = Math.floor(country.attacks * (1 + variation));
                country.percentage = parseFloat((country.percentage * (1 + variation)).toFixed(1));
              });

              updateOverviewStats();
              renderCountryRanking();
              renderRegionalBreakdown();
              
              this.disabled = false;
              this.textContent = '🔄 Actualizar';
              showNotification('Estadísticas actualizadas con datos en tiempo real', 'success');
            }, 2000);
          });
        }

        // Inicializar estadísticas de países
        function initializeCountryStats() {
          updateOverviewStats();
          renderCountryRanking();
          renderRegionalBreakdown();
          updateTimePeriod();
          setupRefreshButton();
        }

        // Inicializar cuando el DOM esté listo
        initializeCountryStats();
       });
     </script>

     <!-- Script para Timeline de Ataques -->
     <script>
       document.addEventListener('DOMContentLoaded', function() {
         // Usar la variable global timelineData

         // Función para cargar datos reales del timeline
         async function loadTimelineData() {
           try {
             console.log('Cargando datos reales del timeline...');
             
             // Obtener datos del componente WebGL si están disponibles
             const threatMapData = window.threatMapProps || {};
             const data = threatMapData.threatData;
             
             if (data) {
               console.log('Usando datos de threatMapProps:', data);
               
               const events = [];
               let totalIncidents = 0;
               let criticalIncidents = 0;
               const affectedCountries = new Set();
               
               // Mapeo de códigos de país a banderas
               const countryFlags = {
                 'US': '🇺🇸', 'CN': '🇨🇳', 'RU': '🇷🇺', 'DE': '🇩🇪', 'GB': '🇬🇧',
                 'FR': '🇫🇷', 'JP': '🇯🇵', 'BR': '🇧🇷', 'IN': '🇮🇳', 'KR': '🇰🇷',
                 'CA': '🇨🇦', 'AU': '🇦🇺', 'IT': '🇮🇹', 'ES': '🇪🇸', 'NL': '🇳🇱'
               };
               
               // Eventos desde topAttackPairs de Cloudflare
               if (data.cloudflare?.topAttackPairs) {
                 data.cloudflare.topAttackPairs.slice(0, 8).forEach((pair, index) => {
                   const severity = pair.value > 50 ? 'crítica' : pair.value > 20 ? 'alta' : 'media';
                   const timestamp = new Date(Date.now() - (index * 15 * 60 * 1000));
                   const timeStr = timestamp.toLocaleString('es-ES', {
                     year: 'numeric', month: '2-digit', day: '2-digit',
                     hour: '2-digit', minute: '2-digit', second: '2-digit'
                   });
                   
                   events.push({
                     id: `cf-${index}`,
                     time: timeStr,
                     severity: severity,
                     title: `Ataque Web desde ${pair.origin_country}`,
                     description: `Detectado tráfico malicioso desde ${pair.origin_country} hacia ${pair.target_country} con ${pair.value.toFixed(1)}% del total de ataques.`,
                     country: pair.target_country,
                     flag: countryFlags[pair.target_country] || '🌍',
                     threatType: 'Web Attack',
                     affectedSystems: Math.floor(pair.value * 100),
                     source: 'Cloudflare Radar',
                     tags: ['web-attack', 'tráfico-malicioso', pair.origin_country.toLowerCase()]
                   });
                   
                   totalIncidents++;
                   if (severity === 'crítica') criticalIncidents++;
                   affectedCountries.add(pair.origin_country);
                   affectedCountries.add(pair.target_country);
                 });
               }
               
               // Eventos desde RansomWatch
               if (data.ransomwatch?.recentPosts) {
                 data.ransomwatch.recentPosts.slice(0, 6).forEach((post, index) => {
                   const timestamp = new Date(post.discovered || Date.now() - (index * 30 * 60 * 1000));
                   const timeStr = timestamp.toLocaleString('es-ES', {
                     year: 'numeric', month: '2-digit', day: '2-digit',
                     hour: '2-digit', minute: '2-digit', second: '2-digit'
                   });
                   
                   events.push({
                     id: `rw-${index}`,
                     time: timeStr,
                     severity: 'crítica',
                     title: `Ataque de Ransomware Reportado`,
                     description: `Grupo ${post.group_name || 'desconocido'} ha publicado: ${post.post_title}`,
                     country: 'Global',
                     flag: '🌍',
                     threatType: 'Ransomware',
                     affectedSystems: Math.floor(Math.random() * 5000 + 1000),
                     source: 'RansomWatch',
                     tags: ['ransomware', post.group_name?.toLowerCase() || 'unknown', 'global']
                   });
                   
                   totalIncidents++;
                   criticalIncidents++;
                   affectedCountries.add('Global');
                 });
               }
               
               // Eventos desde SANS ISC
               if (data.sansISC?.topPorts) {
                 data.sansISC.topPorts.slice(0, 4).forEach((port, index) => {
                   const timestamp = new Date(Date.now() - (index * 45 * 60 * 1000));
                   const timeStr = timestamp.toLocaleString('es-ES', {
                     year: 'numeric', month: '2-digit', day: '2-digit',
                     hour: '2-digit', minute: '2-digit', second: '2-digit'
                   });
                   
                   const severity = port.records > 1000 ? 'alta' : 'media';
                   
                   events.push({
                     id: `sans-${index}`,
                     time: timeStr,
                     severity: severity,
                     title: `Escaneo Masivo en Puerto ${port.port}`,
                     description: `Detectados ${port.records.toLocaleString()} intentos de conexión en puerto ${port.port}. Posible campaña de reconocimiento.`,
                     country: 'Global',
                     flag: '🌐',
                     threatType: 'Port Scan',
                     affectedSystems: port.records,
                     source: 'SANS ISC',
                     tags: ['port-scan', `puerto-${port.port}`, 'reconocimiento']
                   });
                   
                   totalIncidents++;
                   if (severity === 'alta') criticalIncidents++;
                 });
               }
               
               // Ordenar eventos por timestamp (más recientes primero)
               events.sort((a, b) => new Date(b.time.replace(/\//g, '-')) - new Date(a.time.replace(/\//g, '-')));
               
               // Actualizar timelineData
               window.timelineData = {
                 stats: {
                   totalIncidents: totalIncidents,
                   criticalIncidents: criticalIncidents,
                   affectedCountries: affectedCountries.size
                 },
                 events: events.slice(0, 15) // Limitar a 15 eventos más recientes
               };
               
               console.log('Timeline actualizado con datos reales:', window.timelineData.stats);
               
               // Actualizar la UI
               updateTimelineStats();
               renderTimelineEvents();
               
             } else {
               console.warn('No hay datos de threatMapProps disponibles');
               // Mantener estructura vacía
               window.timelineData = {
                 stats: { totalIncidents: 0, criticalIncidents: 0, affectedCountries: 0 },
                 events: []
               };
             }
             
           } catch (error) {
             console.error('Error cargando datos del timeline:', error);
             // Mantener datos por defecto en caso de error
             window.timelineData = {
               stats: { totalIncidents: 0, criticalIncidents: 0, affectedCountries: 0 },
               events: []
             };
           }
         }

         // Cargar datos iniciales
         loadTimelineData();

         // Función para formatear tiempo relativo
         function getRelativeTime(timeString) {
           const now = new Date();
           const eventTime = new Date(timeString);
           const diffMs = now - eventTime;
           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
           const diffMinutes = Math.floor(diffMs / (1000 * 60));

           if (diffHours > 0) {
             return `Hace ${diffHours} hora${diffHours > 1 ? 's' : ''}`;
           } else if (diffMinutes > 0) {
             return `Hace ${diffMinutes} minuto${diffMinutes > 1 ? 's' : ''}`;
           } else {
             return 'Hace unos momentos';
           }
         }

         // Función para obtener el icono de tipo de amenaza
         function getThreatTypeIcon(type) {
           const icons = {
             'Ransomware': '🔒',
             'Phishing': '🎣',
             'Botnet': '🕸️',
             'APT': '🎯',
             'DDoS': '⚡',
             'Malware': '🦠',
             'Reconnaissance': '🔍',
             'Cryptojacking': '⛏️'
           };
           return icons[type] || '⚠️';
         }

         // Función para mostrar notificaciones
         function showTimelineNotification(message, type = 'info') {
           const notification = document.createElement('div');
           notification.className = `timeline-notification ${type}`;
           notification.style.cssText = `
             position: fixed;
             top: 20px;
             right: 20px;
             background: ${type === 'success' ? '#10b981' : type === 'error' ? '#ef4444' : '#3b82f6'};
             color: white;
             padding: 1rem 1.5rem;
             border-radius: 0.5rem;
             box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
             z-index: 1000;
             font-weight: 600;
             max-width: 300px;
             word-wrap: break-word;
           `;
           notification.textContent = message;
           
           document.body.appendChild(notification);
           
           setTimeout(() => {
             if (notification.parentNode) {
               notification.parentNode.removeChild(notification);
             }
           }, 3000);
         }

         // Función para actualizar estadísticas del timeline
         function updateTimelineStats() {
           const stats = window.timelineData.stats;
           
           const totalElement = document.getElementById('total-incidents');
           const criticalElement = document.getElementById('critical-incidents');
           const countriesElement = document.getElementById('affected-countries');
           
           if (totalElement) totalElement.textContent = stats.totalIncidents;
           if (criticalElement) criticalElement.textContent = stats.criticalIncidents;
           if (countriesElement) countriesElement.textContent = stats.affectedCountries;
         }

         // Función para renderizar eventos del timeline
         function renderTimelineEvents(events = window.timelineData.events) {
           const timelineEvents = document.getElementById('timeline-events');
           if (!timelineEvents) return;

           timelineEvents.innerHTML = '';

           events.forEach(event => {
             const eventElement = document.createElement('div');
             eventElement.className = `timeline-event ${event.severity}`;
             
             const eventTags = event.tags.map(tag => 
               `<span class="event-tag">#${tag}</span>`
             ).join('');

             eventElement.innerHTML = `
               <div class="event-header">
                 <div class="event-time">${getRelativeTime(event.time)}</div>
                 <div class="event-severity ${event.severity}">${event.severity}</div>
               </div>
               <div class="event-title">${event.title}</div>
               <div class="event-description">${event.description}</div>
               <div class="event-details">
                 <div class="event-detail">
                   <span class="event-detail-icon">🌍</span>
                   <span class="event-detail-label">País:</span>
                   <span class="event-detail-value">${event.flag} ${event.country}</span>
                 </div>
                 <div class="event-detail">
                   <span class="event-detail-icon">${getThreatTypeIcon(event.threatType)}</span>
                   <span class="event-detail-label">Tipo:</span>
                   <span class="event-detail-value">${event.threatType}</span>
                 </div>
                 <div class="event-detail">
                   <span class="event-detail-icon">🖥️</span>
                   <span class="event-detail-label">Sistemas:</span>
                   <span class="event-detail-value">${event.affectedSystems.toLocaleString()}</span>
                 </div>
                 <div class="event-detail">
                   <span class="event-detail-icon">📡</span>
                   <span class="event-detail-label">Fuente:</span>
                   <span class="event-detail-value">${event.source}</span>
                 </div>
               </div>
               <div class="event-tags">
                 ${eventTags}
               </div>
             `;

             timelineEvents.appendChild(eventElement);
           });
         }

         // Función para filtrar eventos por período
         function filterEventsByPeriod(period) {
           const now = new Date();
           let cutoffDate;

           switch(period) {
             case '24h':
               cutoffDate = new Date(now.getTime() - 24 * 60 * 60 * 1000);
               break;
             case '7d':
               cutoffDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
               break;
             case '30d':
               cutoffDate = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
               break;
             default:
               return window.timelineData.events;
           }

           return window.timelineData.events.filter(event => {
             const eventDate = new Date(event.time);
             return eventDate >= cutoffDate;
           });
         }

         // Función para filtrar eventos por severidad
         function filterEventsBySeverity(severity, events) {
           if (severity === 'all') return events;

           const severityLevels = {
             'crítica': ['crítica'],
             'alta': ['crítica', 'alta'],
             'media': ['crítica', 'alta', 'media']
           };

           const allowedSeverities = severityLevels[severity] || [severity];
           return events.filter(event => allowedSeverities.includes(event.severity));
         }

         // Función para configurar filtros del timeline
         function setupTimelineFilters() {
           const periodSelect = document.querySelector('.timeline-period-select');
           const severitySelect = document.querySelector('.timeline-severity-filter');
           const refreshBtn = document.querySelector('.timeline-refresh-btn');

           if (periodSelect) {
             periodSelect.addEventListener('change', function() {
               const period = this.value;
               const severity = severitySelect ? severitySelect.value : 'all';
               
               let filteredEvents = filterEventsByPeriod(period);
               filteredEvents = filterEventsBySeverity(severity, filteredEvents);
               
               renderTimelineEvents(filteredEvents);
               showTimelineNotification(`Timeline actualizado para ${this.options[this.selectedIndex].text}`, 'info');
             });
           }

           if (severitySelect) {
             severitySelect.addEventListener('change', function() {
               const severity = this.value;
               const period = periodSelect ? periodSelect.value : '24h';
               
               let filteredEvents = filterEventsByPeriod(period);
               filteredEvents = filterEventsBySeverity(severity, filteredEvents);
               
               renderTimelineEvents(filteredEvents);
               showTimelineNotification(`Filtrado por severidad: ${this.options[this.selectedIndex].text}`, 'info');
             });
           }

           if (refreshBtn) {
             refreshBtn.addEventListener('click', function() {
               this.disabled = true;
               this.textContent = 'Actualizando...';
               
               setTimeout(() => {
                 // Simular nuevos eventos
                 const newEvent = {
                   id: window.timelineData.events.length + 1,
                   time: new Date().toISOString().slice(0, 19).replace('T', ' '),
                   severity: ['crítica', 'alta', 'media'][Math.floor(Math.random() * 3)],
                   title: 'Nuevo Incidente Detectado',
                   description: 'Actividad sospechosa detectada en tiempo real por nuestros sistemas de monitoreo.',
                   country: 'Global',
                   flag: '🌍',
                   threatType: 'Monitoring',
                   affectedSystems: Math.floor(Math.random() * 1000) + 100,
                   source: 'Real-time Monitoring',
                   tags: ['tiempo-real', 'monitoreo', 'nuevo']
                 };
                 
                 window.timelineData.events.unshift(newEvent);
                 window.timelineData.stats.totalIncidents++;
                 
                 if (newEvent.severity === 'crítica') {
                   window.timelineData.stats.criticalIncidents++;
                 }
                 
                 updateTimelineStats();
                 renderTimelineEvents();
                 
                 this.disabled = false;
                 this.textContent = '🔄 Actualizar Timeline';
                 showTimelineNotification('Timeline actualizado con nuevos incidentes', 'success');
               }, 2000);
             });
           }
         }

         // Inicializar timeline
         function initializeTimeline() {
           updateTimelineStats();
           renderTimelineEvents();
           setupTimelineFilters();
         }

         // Sistema de polling seguro
         let pollingConfig = {
           isOnline: navigator.onLine,
           retryCount: 0,
           maxRetries: 3,
           baseInterval: 30000, // 30 segundos base
           currentInterval: 30000,
           maxInterval: 300000, // 5 minutos máximo
           lastSuccessfulUpdate: Date.now()
         };

         // Función de polling seguro con backoff exponencial
         function createSecurePoller(updateFunction, name, baseInterval) {
           return {
             start() {
               this.stop(); // Limpiar timer existente
               
               const poll = async () => {
                 try {
                   if (!pollingConfig.isOnline) {
                     console.log(`Polling ${name} pausado - sin conexión`);
                     return;
                   }
                   
                   console.log(`Ejecutando polling ${name}...`);
                   await updateFunction();
                   
                   // Reset en caso de éxito
                   pollingConfig.retryCount = 0;
                   pollingConfig.currentInterval = baseInterval;
                   pollingConfig.lastSuccessfulUpdate = Date.now();
                   
                 } catch (error) {
                   console.error(`Error en polling ${name}:`, error);
                   pollingConfig.retryCount++;
                   
                   // Backoff exponencial
                   if (pollingConfig.retryCount <= pollingConfig.maxRetries) {
                     pollingConfig.currentInterval = Math.min(
                       baseInterval * Math.pow(2, pollingConfig.retryCount),
                       pollingConfig.maxInterval
                     );
                     console.log(`Reintentando ${name} en ${pollingConfig.currentInterval/1000}s (intento ${pollingConfig.retryCount}/${pollingConfig.maxRetries})`);
                   } else {
                     console.error(`Máximo de reintentos alcanzado para ${name}`);
                     pollingConfig.currentInterval = pollingConfig.maxInterval;
                   }
                 }
                 
                 // Programar siguiente ejecución
                 this.timer = setTimeout(poll, pollingConfig.currentInterval);
               };
               
               // Ejecutar inmediatamente
               poll();
             },
             
             stop() {
               if (this.timer) {
                 clearTimeout(this.timer);
                 this.timer = null;
               }
             },
             
             timer: null
           };
         }

         // Crear pollers seguros
         const timelinePoller = createSecurePoller(loadTimelineData, 'timeline', 30000); // 30 segundos
         const countryPoller = createSecurePoller(() => {
           if (window.loadCountryData && typeof window.loadCountryData === 'function') {
             return window.loadCountryData();
           } else {
             console.warn('loadCountryData not available yet');
           }
         }, 'country', 45000); // 45 segundos

         // Detectar cambios de conectividad
         window.addEventListener('online', () => {
           console.log('Conexión restaurada - reanudando polling');
           pollingConfig.isOnline = true;
           pollingConfig.retryCount = 0;
           pollingConfig.currentInterval = pollingConfig.baseInterval;
           
           // Reiniciar pollers
           timelinePoller.start();
           countryPoller.start();
         });

         window.addEventListener('offline', () => {
           console.log('Conexión perdida - pausando polling');
           pollingConfig.isOnline = false;
           timelinePoller.stop();
           countryPoller.stop();
         });

         // Detectar cuando la página se vuelve visible
         document.addEventListener('visibilitychange', () => {
           if (!document.hidden && pollingConfig.isOnline) {
             const timeSinceLastUpdate = Date.now() - pollingConfig.lastSuccessfulUpdate;
             
             // Si han pasado más de 2 minutos, actualizar inmediatamente
             if (timeSinceLastUpdate > 120000) {
               console.log('Página visible después de tiempo prolongado - actualizando datos');
               loadTimelineData();
               if (window.loadCountryData) window.loadCountryData();
             }
           }
         });

         // Inicializar cuando el DOM esté listo
         initializeTimeline();

         // Iniciar polling seguro
         timelinePoller.start();
         countryPoller.start();
       });
     </script>
  </Section>


</Layout>

<style>
  /* Estilos principales del dashboard */
  .threat-dashboard {
    height: 100%;
    background: #000;
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    position: relative;
    overflow: hidden;
    margin: 0;
    padding: 0;
  }



  /* Mapa de pantalla completa */
  .map-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    z-index: 1;
    margin: 0;
    padding: 0;
  }

  /* Header Overlay */
  .dashboard-header-overlay {
    position: absolute;
    top: 20px;
    left: 20px;
    right: 20px;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    border-radius: 12px;
    padding: 1.5rem;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    z-index: 100;
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  .header-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
    max-width: none;
    margin: 0;
    padding: 0;
  }

  .page-title {
    color: #1e293b;
    font-size: 1.75rem;
    font-weight: 700;
    margin: 0;
  }



  /* Estilos base para todos los overlays */
  .filters-panel-overlay,
  .countries-overlay,
  .attack-categories-overlay,
  .timeline-overlay {
    position: fixed;
    z-index: 200;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    border-radius: 8px;
    padding: 1rem;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
    z-index: 200;
    border: 1px solid rgba(255, 255, 255, 0.2);
    position: absolute;
    font-size: 0.875rem;
  }

  /* Panel de filtros overlay */
  .filters-panel-overlay {
    top: 20px;
    left: 20px;
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    width: 240px;
    height: 368px;
    overflow: hidden;
    background: rgba(0, 0, 0, 0.85);
    backdrop-filter: blur(15px);
    border-radius: 20px;
    padding: 18px;
    box-shadow: 0 12px 40px rgba(0, 0, 0, 0.4);
    border: 1px solid rgba(255, 255, 255, 0.15);
    z-index: 200;
  }

  .filter-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .filter-group label {
    font-weight: 600;
    color: white;
    font-size: 0.8rem;
    margin-bottom: 0.25rem;
  }

  .filter-select {
    padding: 0.5rem 0.75rem;
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 0.375rem;
    background: rgba(255, 255, 255, 0.1);
    color: white;
    font-size: 0.75rem;
  }

  /* Dashboard Principal de Estadísticas */
  .main-dashboard-overlay {
    position: fixed;
    top: 20px;
    left: 20px;
    right: 20px;
    z-index: 100;
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    pointer-events: none;
  }

  .main-dashboard-overlay > * {
    pointer-events: auto;
  }

  .primary-stats-grid {
    display: flex;
    justify-content: center;
    gap: 0.75rem;
    flex-wrap: wrap;
  }

  .stat-card {
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    border-radius: 10px;
    padding: 0.75rem 1rem;
    box-shadow: 0 6px 24px rgba(0, 0, 0, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.3);
    display: flex;
    align-items: center;
    justify-content: center;
    min-width: 140px;
    transition: all 0.3s ease;
  }

  .stat-card:hover {
    transform: translateY(-3px);
    box-shadow: 0 16px 40px rgba(0, 0, 0, 0.15);
  }

  .stat-card.primary {
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.95), rgba(248, 250, 252, 0.95));
    border: 2px solid rgba(59, 130, 246, 0.2);
  }



  .stat-info {
    display: flex;
    flex-direction: column;
    gap: 0.1rem;
    text-align: center;
  }

  .stat-number {
    font-size: 1.25rem;
    font-weight: 800;
    color: #1e293b;
    background: linear-gradient(135deg, #1e293b, #475569);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    line-height: 1;
  }

  .stat-label {
    font-size: 0.7rem;
    color: #64748b;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  /* Posicionamiento específico de overlays - Diseño reorganizado */
  .countries-overlay {
    top: 20px;
    right: 20px;
    width: 280px;
    height: 350px;
    overflow: hidden;
    background: rgba(0, 0, 0, 0.85);
    backdrop-filter: blur(15px);
    border-radius: 20px;
    padding: 24px;
    box-shadow: 0 12px 40px rgba(0, 0, 0, 0.4);
    border: 1px solid rgba(255, 255, 255, 0.15);
    z-index: 300;
  }

  .attack-categories-overlay {
    top: 400px;
    left: 20px;
    width: 320px;
    height: 420px;
    overflow-y: auto;
    background: rgba(0, 0, 0, 0.85);
    backdrop-filter: blur(15px);
    border-radius: 20px;
    padding: 20px;
    box-shadow: 0 12px 40px rgba(0, 0, 0, 0.4);
    border: 1px solid rgba(255, 255, 255, 0.15);
    z-index: 250;
  }

  .timeline-overlay {
    top: 328px;
    right: 20px;
    width: 280px;
    height: 420px;
    overflow-y: auto;
    background: rgba(0, 0, 0, 0.85);
    backdrop-filter: blur(15px);
    border-radius: 20px;
    padding: 20px;
    box-shadow: 0 12px 40px rgba(0, 0, 0, 0.4);
    border: 1px solid rgba(255, 255, 255, 0.15);
    z-index: 280;
  }

  .overlay-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    padding: 15px;
    margin: -10px -10px 20px -10px;
    border-bottom: 2px solid rgba(59, 130, 246, 0.3);
    background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(29, 78, 216, 0.05));
    border-radius: 12px;
  }

  .overlay-header h3 {
    margin: 0;
    font-size: 1.1rem;
    font-weight: 700;
    color: white;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
    background: linear-gradient(135deg, #ffffff, #e2e8f0);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .toggle-overlay {
    background: rgba(59, 130, 246, 0.2);
    border: 1px solid rgba(59, 130, 246, 0.4);
    font-size: 1.1rem;
    cursor: pointer;
    padding: 8px 12px;
    border-radius: 8px;
    transition: all 0.3s ease;
    color: #60a5fa;
    backdrop-filter: blur(5px);
  }

  .toggle-overlay:hover {
    background: rgba(59, 130, 246, 0.3);
    transform: scale(1.05);
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
  }

  .countries-stats {
    display: flex;
    flex-direction: column;
    gap: 10px;
  }

  .country-item {
    display: flex;
    align-items: center;
    padding: 6px;
    border-radius: 4px;
    transition: all 0.3s ease;
    font-size: 0.65rem;
    background: rgba(255, 255, 255, 0.05);
    border-left: 3px solid #00d4ff;
    margin-bottom: 6px;
  }

  .country-item:hover {
    background: rgba(255, 255, 255, 0.1);
    transform: translateX(3px);
  }

  .country-info {
    display: flex;
    align-items: center;
    gap: 12px;
    width: 100%;
  }

  .country-flag {
    font-size: 0.75rem;
    flex-shrink: 0;
  }

  .country-name {
    font-weight: 600;
    color: white;
    font-size: 0.65rem;
    flex: 1;
  }

  .country-metrics {
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    gap: 0.125rem;
  }

  .attack-count {
    font-weight: 700;
    color: #00d4ff;
    font-size: 0.65rem;
  }

  .trend-indicator {
    font-size: 0.625rem;
    font-weight: 600;
    padding: 0.125rem 0.25rem;
    border-radius: 0.25rem;
  }

  .trend-indicator.up {
    color: #059669;
    background: rgba(5, 150, 105, 0.1);
  }

  .trend-indicator.down {
    color: #dc2626;
    background: rgba(220, 38, 38, 0.1);
  }

  .trend-indicator.stable {
    color: #64748b;
    background: rgba(100, 116, 139, 0.1);
  }

  .progress-bar {
    width: 100%;
    height: 3px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 1.5px;
    overflow: hidden;
  }

  .progress-fill {
    height: 100%;
    background: linear-gradient(90deg, #f87171, #fca5a5);
    border-radius: 1.5px;
    transition: width 0.3s ease;
  }

  .categories-grid {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .category-item {
    display: flex;
    align-items: center;
    padding: 0.5rem;
    border-radius: 0.25rem;
    transition: background-color 0.2s;
  }

  .category-item:hover {
    background: #f8fafc;
  }

  .category-info {
    flex: 1;
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 0.5rem;
  }

  .category-name {
    font-weight: 600;
    color: #374151;
    font-size: 0.75rem;
  }

  .category-count {
    font-weight: 700;
    color: #1e293b;
    font-size: 0.875rem;
  }

  .category-percentage {
    font-size: 0.625rem;
    color: #64748b;
  }
    color: #374151;
    font-size: 0.875rem;
    min-width: 200px;
  }

  .filter-select:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }

  /* Grid de estadísticas */
  .stats-grid {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
  }

  .stat-card {
    background: white;
    border-radius: 1rem;
    padding: 2rem;
    box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
    border: 1px solid #e2e8f0;
    display: flex;
    align-items: center;
    gap: 1.5rem;
    transition: all 0.2s ease;
  }

  .stat-card:hover {
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    transform: translateY(-2px);
  }

  .stat-icon {
    font-size: 3rem;
    width: 4rem;
    height: 4rem;
    display: flex;
    align-items: center;
    justify-content: center;
    background: #f8fafc;
    border-radius: 1rem;
  }

  .stat-info {
    flex: 1;
  }

  .stat-number {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    color: #1e293b;
    line-height: 1;
  }

  .stat-label {
    display: block;
    font-size: 0.875rem;
    color: #64748b;
    margin-top: 0.25rem;
  }

  /* Contenedor del mapa */
  .map-container {
    width: 100%;
    height: 100vh;
    margin: 0;
    padding: 0;
    background: #111827;
    border-radius: 0;
    box-shadow: none;
    border: none;
    position: relative;
    overflow: hidden;
  }

  .error-message {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-align: center;
    padding: 4rem 2rem;
    color: #dc2626;
  }

  .error-message h3 {
    font-size: 1.5rem;
    margin: 0 0 1rem 0;
  }

  .error-message p {
    margin: 0 0 2rem 0;
    color: #64748b;
  }

  .retry-btn {
    background: #3b82f6;
    color: white;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 0.5rem;
    font-weight: 600;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }

  .retry-btn:hover {
    background: #2563eb;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .header-content {
      flex-direction: column;
      gap: 1rem;
      text-align: center;
    }

    .page-title {
      font-size: 2rem;
    }

    .filters-panel {
      flex-direction: column;
      gap: 1rem;
    }

    .stats-grid {
      grid-template-columns: 1fr;
      padding: 1rem;
    }

    .map-container {
      height: 70vh;
      margin: 0;
      padding: 0;
    }
  }






    width: 300px;
  }

  .overlay-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
    padding-bottom: 10px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  }

  .overlay-header h3 {
    color: white;
    margin: 0;
    font-size: 1.1rem;
    font-weight: 600;
  }

  .toggle-overlay {
    background: none;
    border: none;
    color: #00d4ff;
    font-size: 1.2rem;
    cursor: pointer;
    padding: 5px;
    border-radius: 5px;
    transition: all 0.3s ease;
  }

  .toggle-overlay:hover {
    background: rgba(0, 212, 255, 0.1);
  }

  .countries-list {
    display: flex;
    flex-direction: column;
    gap: 10px;
  }

  .country-item {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 10px;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 8px;
    transition: all 0.3s ease;
  }

  .country-item:hover {
    background: rgba(255, 255, 255, 0.1);
    transform: translateX(5px);
  }

  .country-flag {
    font-size: 1.2rem;
    margin-right: 8px;
  }

  .country-name {
    color: white;
    font-size: 0.9rem;
    flex: 1;
  }

  .attack-count {
    color: #ff6b6b;
    font-weight: 600;
    font-size: 0.9rem;
  }

  /* Panel de Categorías de Ataques */
  .attack-categories-overlay {
    position: absolute;
    bottom: 20px;
    left: 20px;
    z-index: 250;
    background: rgba(0, 0, 0, 0.8);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 15px;
    padding: 20px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
    width: 350px;
  }

  .categories-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: 10px;
  }

  .category-item {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 12px;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 8px;
    border-left: 3px solid;
    transition: all 0.3s ease;
  }

  .category-icon {
    font-size: 1.2rem;
    flex-shrink: 0;
    width: 24px;
    text-align: center;
    font-weight: bold;
  }

  .category-item.malware .category-icon {
    color: #ff4444;
  }

  .category-item.phishing .category-icon {
    color: #ff8800;
  }

  .category-item.ransomware .category-icon {
    color: #cc0000;
  }

  .category-item.ddos .category-icon {
    color: #0088ff;
  }

  .category-item.botnet .category-icon {
    color: #8800ff;
  }

  .category-item:hover {
    background: rgba(255, 255, 255, 0.1);
    transform: translateX(5px);
  }

  .category-item.malware {
    border-left-color: #ff4757;
  }

  .category-item.phishing {
    border-left-color: #ffa726;
  }

  .category-item.ransomware {
    border-left-color: #ff6b6b;
  }

  .category-item.ddos {
    border-left-color: #5c7cfa;
  }

  .category-item.botnet {
    border-left-color: #7c4dff;
  }



  .category-info {
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 0.5rem;
    flex: 1;
  }

  .category-name {
    color: white;
    font-weight: 600;
    font-size: 0.75rem;
  }

  .category-count {
    color: #00d4ff;
    font-weight: 700;
    font-size: 0.85rem;
  }

  .category-percentage {
    color: #ccc;
    font-size: 0.65rem;
  }

  /* Estilos personalizados para scrollbar - Timeline, países y categorías */
  .timeline-overlay::-webkit-scrollbar,
  .countries-overlay::-webkit-scrollbar,
  .attack-categories-overlay::-webkit-scrollbar {
    width: 6px;
  }

  .timeline-overlay::-webkit-scrollbar-track,
  .countries-overlay::-webkit-scrollbar-track,
  .attack-categories-overlay::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 3px;
  }

  .timeline-overlay::-webkit-scrollbar-thumb,
  .countries-overlay::-webkit-scrollbar-thumb,
  .attack-categories-overlay::-webkit-scrollbar-thumb {
    background: rgba(0, 212, 255, 0.6);
    border-radius: 3px;
    transition: background 0.3s ease;
  }

  .timeline-overlay::-webkit-scrollbar-thumb:hover,
  .countries-overlay::-webkit-scrollbar-thumb:hover,
  .attack-categories-overlay::-webkit-scrollbar-thumb:hover {
    background: rgba(0, 212, 255, 0.8);
  }

  /* Timeline de Ataques */
  .timeline-overlay {
    position: absolute;
    top: 380px;
    right: 20px;
    z-index: 280;
    background: rgba(0, 0, 0, 0.8);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 15px;
    padding: 20px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
    width: 300px;
  }

  .recent-attacks {
    display: flex;
    flex-direction: column;
    gap: 6px;
  }

  .attack-item {
    display: flex;
    flex-direction: column;
    gap: 3px;
    padding: 8px;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 4px;
    border-left: 3px solid;
    transition: all 0.3s ease;
  }

  .attack-item:hover {
    background: rgba(255, 255, 255, 0.1);
  }

  .attack-item.critical {
    border-left-color: #ff4757;
  }

  .attack-item.high {
    border-left-color: #ffa726;
  }

  .attack-item.medium {
    border-left-color: #ffeb3b;
  }

  .attack-time {
    color: #ccc;
    font-size: 0.65rem;
  }

  .attack-info {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .attack-type {
    color: white;
    font-weight: 600;
    font-size: 0.75rem;
  }

  .attack-target {
    color: #00d4ff;
    font-size: 0.65rem;
  }

  .attack-severity {
    padding: 2px 8px;
    border-radius: 12px;
    font-size: 0.7rem;
    font-weight: 600;
    text-transform: uppercase;
  }

  .attack-severity.critical {
    background: #ff4757;
    color: white;
  }

  .attack-severity.high {
    background: #ffa726;
    color: white;
  }

  .attack-severity.medium {
    background: #ffeb3b;
    color: #333;
  }

  /* Responsive Design */
  @media (max-width: 1200px) {
    .countries-overlay,
    .attack-categories-overlay,
    .timeline-overlay {
      width: 250px;
    }
  }

  @media (max-width: 768px) {
    .countries-overlay,
    .attack-categories-overlay,
    .timeline-overlay {
      position: relative;
      width: 100%;
      margin: 10px;
    }
  }

  .dashboard-header p {
    color: rgba(255, 255, 255, 0.9);
    font-size: 1.25rem;
    margin: 0;
  }

  .dashboard-grid {
    display: grid;
    gap: 3rem;
    max-width: 1400px;
    margin: 0 auto;
  }

  /* Error Message */
  .error-message {
    display: flex;
    align-items: center;
    justify-content: center;
    background: #fef2f2;
    border: 1px solid #dc2626;
    padding: 2rem;
    border-radius: 1rem;
    color: #dc2626;
    font-size: 1.125rem;
    font-weight: 600;
  }

  /* Panel de Control Unificado */
  .unified-control-panel {
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    border-radius: 1.5rem;
    padding: 2rem;
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  .panel-header {
    margin-bottom: 2rem;
  }

  .panel-controls {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: 1rem;
  }

  .real-time-indicator {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    background: #ecfdf5;
    padding: 0.75rem 1.25rem;
    border-radius: 2rem;
    border: 1px solid #10b981;
  }

  .pulse-indicator {
    width: 12px;
    height: 12px;
    background: #10b981;
    border-radius: 50%;
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.5; }
  }

  .real-time-indicator span {
    color: #065f46;
    font-weight: 600;
    font-size: 0.875rem;
  }

  .export-controls {
    display: flex;
    gap: 0.75rem;
  }

  .export-btn, .alert-btn {
    background: #f8fafc;
    border: 1px solid #e2e8f0;
    padding: 0.75rem 1rem;
    border-radius: 0.75rem;
    font-size: 0.875rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s;
    color: #475569;
  }

  .export-btn:hover, .alert-btn:hover {
    background: #e2e8f0;
    transform: translateY(-1px);
  }

  /* Métricas Premium */
  .metrics-grid-premium {
    position: fixed;
    bottom: 20px;
    left: 20px;
    right: 20px;
    z-index: 50;
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 1.5rem;
    margin-top: 0;
    pointer-events: none;
  }

  .metrics-grid-premium > * {
    pointer-events: auto;
  }

  .metric-card-premium {
    background: white;
    border-radius: 1rem;
    padding: 1.5rem;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    border-left: 4px solid #d1d5db;
    transition: all 0.3s ease;
  }

  .metric-card-premium:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
  }

  .metric-card-premium.critical {
    border-left-color: #dc2626;
  }

  .metric-card-premium.high {
    border-left-color: #ea580c;
  }

  .metric-card-premium.warning {
    border-left-color: #d97706;
  }

  .metric-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
  }

  .metric-icon-premium {
    font-size: 1.5rem;
  }

  .metric-status {
    background: #fef2f2;
    color: #dc2626;
    padding: 0.25rem 0.75rem;
    border-radius: 1rem;
    font-size: 0.75rem;
    font-weight: 700;
    text-transform: uppercase;
  }

  .metric-content-premium {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .metric-value-premium {
    font-size: 2rem;
    font-weight: 700;
    color: #1f2937;
    line-height: 1;
  }

  .metric-label-premium {
    font-size: 1rem;
    font-weight: 600;
    color: #374151;
  }

  .metric-description {
    font-size: 0.875rem;
    color: #6b7280;
    margin-bottom: 0.75rem;
  }

  .metric-trend {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem;
    background: #f9fafb;
    border-radius: 0.5rem;
  }

  .trend-arrow {
    font-size: 0.875rem;
  }

  .trend-text {
    font-size: 0.75rem;
    color: #6b7280;
    font-weight: 500;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .dashboard-header h2 {
      font-size: 2rem;
    }

    .panel-controls {
      flex-direction: column;
      align-items: stretch;
    }

    .export-controls {
      justify-content: center;
    }

    .metrics-grid-premium {
      grid-template-columns: 1fr;
    }
  }

  /* Mapa WebGL Styles */
  .map-section-header {
    text-align: center;
    margin-bottom: 2rem;
  }

  .map-section-header h2 {
    font-size: 2.5rem;
    font-weight: 700;
    color: #00ffff;
    margin-bottom: 0.5rem;
    text-shadow: 0 0 20px rgba(0, 255, 255, 0.5);
  }

  .map-section-header p {
    font-size: 1.1rem;
    color: #94a3b8;
    max-width: 600px;
    margin: 0 auto;
  }

  .map-container-wrapper {
    height: 100vh;
    width: 100vw;
    position: fixed;
    top: 0;
    left: 0;
    z-index: 1;
    border-radius: 0;
    overflow: hidden;
    border: none;
    box-shadow: none;
  }

  @media (max-width: 768px) {
    .map-container-wrapper {
      height: 100vh;
    }
    
    .map-section-header h2 {
       font-size: 2rem;
     }

    /* Responsive overlays */
    .filters-panel-overlay {
      top: 10px;
      left: 10px;
      width: 200px;
      height: 280px;
    }

    .attack-categories-overlay {
      top: 300px;
      left: 10px;
      width: 280px;
      height: 280px;
    }

    .timeline-overlay {
      top: 10px;
      right: 10px;
      width: 240px;
      height: 250px;
    }

    .countries-overlay {
      top: 270px;
      right: 10px;
      width: 240px;
      height: 280px;
    }
   }

  @media (max-width: 1024px) and (min-width: 769px) {
    /* Responsive para tablets */
    .filters-panel-overlay {
      width: 200px;
      height: 300px;
    }

    .attack-categories-overlay {
      width: 300px;
      height: 300px;
    }

    .timeline-overlay {
      width: 260px;
      height: 280px;
    }

    .countries-overlay {
      width: 260px;
      height: 320px;
    }
  }

   /* Filtros de Amenazas */
   .threat-filters-section {
     background: rgba(255, 255, 255, 0.95);
     backdrop-filter: blur(10px);
     border-radius: 1.5rem;
     padding: 2rem;
     margin-bottom: 2rem;
     box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
     border: 1px solid rgba(255, 255, 255, 0.2);
   }

   .filters-header {
     text-align: center;
     margin-bottom: 2rem;
   }

   .filters-header h3 {
     font-size: 1.8rem;
     font-weight: 700;
     color: #1e293b;
     margin-bottom: 0.5rem;
   }

   .filters-header p {
     color: #64748b;
     font-size: 1rem;
   }

   .filters-container {
     display: grid;
     gap: 1.5rem;
   }

   .filter-group {
     display: flex;
     flex-direction: column;
     gap: 0.75rem;
   }

   .filter-label {
     font-weight: 600;
     color: #374151;
     font-size: 0.95rem;
   }

   .filter-buttons {
     display: flex;
     flex-wrap: wrap;
     gap: 0.75rem;
   }

   .filter-btn {
     background: #f8fafc;
     border: 2px solid #e2e8f0;
     color: #64748b;
     padding: 0.75rem 1.25rem;
     border-radius: 2rem;
     font-weight: 600;
     font-size: 0.9rem;
     cursor: pointer;
     transition: all 0.3s ease;
     display: flex;
     align-items: center;
     gap: 0.5rem;
   }

   .filter-btn:hover {
     background: #e2e8f0;
     border-color: #cbd5e1;
     transform: translateY(-1px);
   }

   .filter-btn.active {
     background: linear-gradient(135deg, #3b82f6, #1d4ed8);
     border-color: #3b82f6;
     color: white;
     box-shadow: 0 4px 15px rgba(59, 130, 246, 0.3);
   }

   .severity-filters {
     display: flex;
     flex-wrap: wrap;
     gap: 0.5rem;
   }

   .severity-btn {
     background: #f8fafc;
     border: 2px solid #e2e8f0;
     color: #64748b;
     padding: 0.5rem 1rem;
     border-radius: 1.5rem;
     font-weight: 600;
     font-size: 0.85rem;
     cursor: pointer;
     transition: all 0.3s ease;
   }

   .severity-btn:hover {
     background: #e2e8f0;
     transform: translateY(-1px);
   }

   .severity-btn.active {
     background: #1e293b;
     border-color: #1e293b;
     color: white;
   }

   .severity-btn.critical.active {
     background: #ef4444;
     border-color: #ef4444;
   }

   .severity-btn.high.active {
     background: #f97316;
     border-color: #f97316;
   }

   .severity-btn.medium.active {
     background: #eab308;
     border-color: #eab308;
   }

   .severity-btn.low.active {
     background: #22c55e;
     border-color: #22c55e;
   }

   .region-select {
     background: #f8fafc;
     border: 2px solid #e2e8f0;
     color: #374151;
     padding: 0.75rem 1rem;
     border-radius: 0.75rem;
     font-weight: 500;
     font-size: 0.9rem;
     cursor: pointer;
     transition: all 0.3s ease;
     width: 100%;
     max-width: 300px;
   }

   .region-select:focus {
     outline: none;
     border-color: #3b82f6;
     box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
   }

   .filter-actions {
     display: flex;
     gap: 1rem;
     justify-content: center;
     margin-top: 1rem;
   }

   .reset-filters-btn, .apply-filters-btn {
     padding: 0.75rem 1.5rem;
     border-radius: 0.75rem;
     font-weight: 600;
     font-size: 0.9rem;
     cursor: pointer;
     transition: all 0.3s ease;
     border: 2px solid;
   }

   .reset-filters-btn {
     background: #f8fafc;
     border-color: #e2e8f0;
     color: #64748b;
   }

   .reset-filters-btn:hover {
     background: #e2e8f0;
     transform: translateY(-1px);
   }

   .apply-filters-btn {
     background: linear-gradient(135deg, #10b981, #059669);
     border-color: #10b981;
     color: white;
     box-shadow: 0 4px 15px rgba(16, 185, 129, 0.3);
   }

   .apply-filters-btn:hover {
     background: linear-gradient(135deg, #059669, #047857);
     transform: translateY(-1px);
   }

   .active-filters {
     margin-top: 1.5rem;
     padding: 1rem;
     background: #f1f5f9;
     border-radius: 0.75rem;
     border: 1px solid #e2e8f0;
   }

   .active-filters-label {
     font-weight: 600;
     color: #374151;
     margin-right: 0.75rem;
   }

   .active-filters-list {
     display: flex;
     flex-wrap: wrap;
     gap: 0.5rem;
     margin-top: 0.5rem;
   }

   .active-filter-tag {
     background: #3b82f6;
     color: white;
     padding: 0.25rem 0.75rem;
     border-radius: 1rem;
     font-size: 0.8rem;
     font-weight: 500;
     display: flex;
     align-items: center;
     gap: 0.5rem;
   }

   .active-filter-tag .remove-filter {
     cursor: pointer;
     font-weight: bold;
     opacity: 0.7;
   }

   .active-filter-tag .remove-filter:hover {
     opacity: 1;
   }

   @media (max-width: 768px) {
     .threat-filters-section {
       padding: 1.5rem;
     }

     .filter-buttons {
       justify-content: center;
     }

     .filter-actions {
       flex-direction: column;
       align-items: center;
     }

     .reset-filters-btn, .apply-filters-btn {
       width: 100%;
       max-width: 200px;
     }
   }

   /* Estadísticas de Países */
   .country-stats-header {
     text-align: center;
     margin-bottom: 3rem;
   }

   .country-stats-header h2 {
     color: white;
     margin: 0 0 1rem 0;
     font-size: 2.5rem;
     font-weight: 700;
   }

   .country-stats-header p {
     color: rgba(255, 255, 255, 0.9);
     font-size: 1.25rem;
     margin: 0;
   }

   .country-stats-container {
     max-width: 1400px;
     margin: 0 auto;
     display: grid;
     gap: 3rem;
   }

   .stats-overview {
     display: grid;
     grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
     gap: 1.5rem;
     margin-bottom: 2rem;
   }

   .overview-card {
     background: rgba(255, 255, 255, 0.95);
     backdrop-filter: blur(10px);
     border-radius: 1.5rem;
     padding: 2rem;
     display: flex;
     align-items: center;
     gap: 1.5rem;
     box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
     border: 1px solid rgba(255, 255, 255, 0.2);
     transition: all 0.3s ease;
   }

   .overview-card:hover {
     transform: translateY(-5px);
     box-shadow: 0 25px 35px -5px rgba(0, 0, 0, 0.15);
   }

   .overview-icon {
     font-size: 3rem;
     background: linear-gradient(135deg, #3b82f6, #1d4ed8);
     border-radius: 1rem;
     width: 80px;
     height: 80px;
     display: flex;
     align-items: center;
     justify-content: center;
     box-shadow: 0 10px 20px rgba(59, 130, 246, 0.3);
   }

   .overview-content {
     display: flex;
     flex-direction: column;
   }

   .overview-number {
     font-size: 2.5rem;
     font-weight: 800;
     color: #1e293b;
     line-height: 1;
   }

   .overview-label {
     font-size: 1rem;
     color: #64748b;
     font-weight: 600;
     margin-top: 0.5rem;
   }

   .country-ranking {
     background: rgba(255, 255, 255, 0.95);
     backdrop-filter: blur(10px);
     border-radius: 1.5rem;
     padding: 2rem;
     box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
     border: 1px solid rgba(255, 255, 255, 0.2);
   }

   .ranking-header {
     display: flex;
     justify-content: space-between;
     align-items: center;
     margin-bottom: 2rem;
     flex-wrap: wrap;
     gap: 1rem;
   }

   .ranking-header h3 {
     font-size: 1.8rem;
     font-weight: 700;
     color: #1e293b;
     margin: 0;
   }

   .ranking-controls {
     display: flex;
     gap: 1rem;
     align-items: center;
   }

   .time-period-select {
     background: #f8fafc;
     border: 2px solid #e2e8f0;
     color: #374151;
     padding: 0.5rem 1rem;
     border-radius: 0.75rem;
     font-weight: 500;
     font-size: 0.9rem;
     cursor: pointer;
   }

   .refresh-stats-btn {
     background: linear-gradient(135deg, #10b981, #059669);
     border: none;
     color: white;
     padding: 0.5rem 1rem;
     border-radius: 0.75rem;
     font-weight: 600;
     font-size: 0.9rem;
     cursor: pointer;
     transition: all 0.3s ease;
   }

   .refresh-stats-btn:hover {
     background: linear-gradient(135deg, #059669, #047857);
     transform: translateY(-1px);
   }

   .ranking-list {
     display: grid;
     gap: 1rem;
   }

   .ranking-item {
     display: grid;
     grid-template-columns: auto 1fr auto auto;
     gap: 1.5rem;
     align-items: center;
     background: #f8fafc;
     padding: 1.5rem;
     border-radius: 1rem;
     border: 2px solid #e2e8f0;
     transition: all 0.3s ease;
   }

   .ranking-item:hover {
     background: #f1f5f9;
     border-color: #cbd5e1;
     transform: translateY(-2px);
   }

   .ranking-item.rank-1 {
     background: linear-gradient(135deg, #fef3c7, #fde68a);
     border-color: #f59e0b;
   }

   .ranking-item.rank-2 {
     background: linear-gradient(135deg, #f3f4f6, #e5e7eb);
     border-color: #9ca3af;
   }

   .ranking-item.rank-3 {
     background: linear-gradient(135deg, #fef2f2, #fecaca);
     border-color: #f87171;
   }

   .rank-position {
     display: flex;
     align-items: center;
     gap: 0.5rem;
   }

   .rank-number {
     font-size: 1.5rem;
     font-weight: 800;
     color: #1e293b;
     min-width: 30px;
   }

   .rank-medal {
     font-size: 1.5rem;
   }

   .country-info {
     display: flex;
     align-items: center;
     gap: 1rem;
   }

   .country-flag {
     font-size: 2rem;
   }

   .country-name {
     font-size: 1.1rem;
     font-weight: 600;
     color: #1e293b;
   }

   .attack-stats {
     display: flex;
     flex-direction: column;
     align-items: flex-end;
     gap: 0.25rem;
   }

   .attack-count {
     font-size: 1.3rem;
     font-weight: 800;
     color: #1e293b;
   }

   .attack-percentage {
     font-size: 0.9rem;
     color: #64748b;
     font-weight: 600;
   }

   .attack-trend {
     font-size: 0.8rem;
     font-weight: 600;
     padding: 0.25rem 0.5rem;
     border-radius: 1rem;
   }

   .attack-trend.up {
     background: #dcfce7;
     color: #16a34a;
   }

   .attack-trend.down {
     background: #fef2f2;
     color: #dc2626;
   }

   .attack-trend.stable {
     background: #f1f5f9;
     color: #64748b;
   }

   .threat-types {
     display: flex;
     flex-wrap: wrap;
     gap: 0.5rem;
   }

   .threat-tag {
     padding: 0.25rem 0.75rem;
     border-radius: 1rem;
     font-size: 0.75rem;
     font-weight: 600;
     color: white;
   }

   .threat-tag.malware {
     background: #ef4444;
   }

   .threat-tag.ransomware {
     background: #dc2626;
   }

   .threat-tag.phishing {
     background: #f97316;
   }

   .threat-tag.ddos {
     background: #eab308;
   }

   .threat-tag.botnet {
     background: #8b5cf6;
   }

   .threat-tag.apt {
     background: #06b6d4;
   }

   .regional-breakdown {
     background: rgba(255, 255, 255, 0.95);
     backdrop-filter: blur(10px);
     border-radius: 1.5rem;
     padding: 2rem;
     box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
     border: 1px solid rgba(255, 255, 255, 0.2);
   }

   .regional-breakdown h3 {
     font-size: 1.8rem;
     font-weight: 700;
     color: #1e293b;
     margin-bottom: 2rem;
   }

   .region-stats {
     display: grid;
     gap: 1rem;
   }

   .region-stat {
     display: grid;
     grid-template-columns: 200px 1fr auto;
     gap: 1rem;
     align-items: center;
   }

   .region-name {
     font-weight: 600;
     color: #374151;
   }

   .region-bar {
     background: #e2e8f0;
     height: 12px;
     border-radius: 6px;
     overflow: hidden;
   }

   .region-fill {
     background: linear-gradient(135deg, #3b82f6, #1d4ed8);
     height: 100%;
     border-radius: 6px;
     transition: width 0.5s ease;
   }

   .region-percentage {
     font-weight: 700;
     color: #1e293b;
     min-width: 40px;
     text-align: right;
   }

   @media (max-width: 768px) {
     .country-stats-container {
       gap: 2rem;
     }

     .ranking-item {
       grid-template-columns: 1fr;
       gap: 1rem;
       text-align: center;
     }

     .attack-stats {
       align-items: center;
     }

     .region-stat {
       grid-template-columns: 1fr;
       gap: 0.5rem;
       text-align: center;
     }

     .ranking-header {
       flex-direction: column;
       align-items: stretch;
     }

     .ranking-controls {
        justify-content: center;
      }
    }

    /* Timeline de Ataques */
    .timeline-header {
      text-align: center;
      margin-bottom: 3rem;
    }

    .timeline-header h2 {
      color: white;
      margin: 0 0 1rem 0;
      font-size: 2.5rem;
      font-weight: 700;
    }

    .timeline-header p {
      color: rgba(255, 255, 255, 0.9);
      font-size: 1.25rem;
      margin: 0;
    }

    .timeline-container {
      max-width: 1200px;
      margin: 0 auto;
    }

    .timeline-controls {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      border-radius: 1.5rem;
      padding: 2rem;
      margin-bottom: 3rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
      flex-wrap: wrap;
      gap: 2rem;
      box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .timeline-filters {
      display: flex;
      gap: 1rem;
      align-items: center;
      flex-wrap: wrap;
    }

    .timeline-period-select,
    .timeline-severity-filter {
      background: #f8fafc;
      border: 2px solid #e2e8f0;
      color: #374151;
      padding: 0.75rem 1rem;
      border-radius: 0.75rem;
      font-weight: 500;
      font-size: 0.9rem;
      cursor: pointer;
      min-width: 150px;
    }

    .timeline-refresh-btn {
      background: linear-gradient(135deg, #3b82f6, #1d4ed8);
      border: none;
      color: white;
      padding: 0.75rem 1.5rem;
      border-radius: 0.75rem;
      font-weight: 600;
      font-size: 0.9rem;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .timeline-refresh-btn:hover {
      background: linear-gradient(135deg, #1d4ed8, #1e40af);
      transform: translateY(-1px);
    }

    .timeline-stats {
      display: flex;
      gap: 2rem;
      align-items: center;
    }

    .timeline-stat {
      display: flex;
      flex-direction: column;
      align-items: center;
      text-align: center;
    }

    .stat-number {
      font-size: 2rem;
      font-weight: 800;
      color: #1e293b;
      line-height: 1;
    }

    .stat-label {
      font-size: 0.875rem;
      color: #64748b;
      font-weight: 600;
      margin-top: 0.25rem;
    }

    .timeline-content {
      position: relative;
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      border-radius: 1.5rem;
      padding: 2rem;
      margin-bottom: 2rem;
      box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.2);
      min-height: 600px;
    }

    .timeline-line {
      position: absolute;
      left: 3rem;
      top: 2rem;
      bottom: 2rem;
      width: 4px;
      background: linear-gradient(180deg, #3b82f6, #1d4ed8);
      border-radius: 2px;
    }

    .timeline-events {
      padding-left: 5rem;
      display: flex;
      flex-direction: column;
      gap: 2rem;
    }

    .timeline-event {
      position: relative;
      background: #f8fafc;
      border-radius: 1rem;
      padding: 1.5rem;
      border-left: 4px solid #e2e8f0;
      transition: all 0.3s ease;
    }

    .timeline-event:hover {
      background: #f1f5f9;
      transform: translateX(5px);
      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
    }

    .timeline-event.critical {
      border-left-color: #dc2626;
      background: linear-gradient(135deg, #fef2f2, #fee2e2);
    }

    .timeline-event.high {
      border-left-color: #ea580c;
      background: linear-gradient(135deg, #fff7ed, #fed7aa);
    }

    .timeline-event.medium {
      border-left-color: #d97706;
      background: linear-gradient(135deg, #fffbeb, #fde68a);
    }

    .timeline-event.low {
      border-left-color: #65a30d;
      background: linear-gradient(135deg, #f7fee7, #d9f99d);
    }

    .timeline-event::before {
      content: '';
      position: absolute;
      left: -2.75rem;
      top: 1.5rem;
      width: 16px;
      height: 16px;
      border-radius: 50%;
      background: #e2e8f0;
      border: 4px solid white;
      box-shadow: 0 0 0 2px #e2e8f0;
    }

    .timeline-event.critical::before {
      background: #dc2626;
      box-shadow: 0 0 0 2px #dc2626;
    }

    .timeline-event.high::before {
      background: #ea580c;
      box-shadow: 0 0 0 2px #ea580c;
    }

    .timeline-event.medium::before {
      background: #d97706;
      box-shadow: 0 0 0 2px #d97706;
    }

    .timeline-event.low::before {
      background: #65a30d;
      box-shadow: 0 0 0 2px #65a30d;
    }

    .event-header {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      margin-bottom: 1rem;
      flex-wrap: wrap;
      gap: 1rem;
    }

    .event-time {
      font-size: 0.875rem;
      color: #64748b;
      font-weight: 600;
      background: rgba(255, 255, 255, 0.8);
      padding: 0.25rem 0.75rem;
      border-radius: 1rem;
    }

    .event-severity {
      padding: 0.25rem 0.75rem;
      border-radius: 1rem;
      font-size: 0.75rem;
      font-weight: 700;
      text-transform: uppercase;
      color: white;
    }

    .event-severity.critical {
      background: #dc2626;
    }

    .event-severity.high {
      background: #ea580c;
    }

    .event-severity.medium {
      background: #d97706;
    }

    .event-severity.low {
      background: #65a30d;
    }

    .event-title {
      font-size: 1.1rem;
      font-weight: 700;
      color: #1e293b;
      margin-bottom: 0.5rem;
    }

    .event-description {
      color: #475569;
      line-height: 1.6;
      margin-bottom: 1rem;
    }

    .event-details {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 1rem;
      margin-bottom: 1rem;
    }

    .event-detail {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      font-size: 0.875rem;
    }

    .event-detail-icon {
      font-size: 1rem;
    }

    .event-detail-label {
      font-weight: 600;
      color: #374151;
    }

    .event-detail-value {
      color: #64748b;
    }

    .event-tags {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
    }

    .event-tag {
      padding: 0.25rem 0.75rem;
      border-radius: 1rem;
      font-size: 0.75rem;
      font-weight: 600;
      background: rgba(59, 130, 246, 0.1);
      color: #3b82f6;
      border: 1px solid rgba(59, 130, 246, 0.2);
    }

    .timeline-legend {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      border-radius: 1.5rem;
      padding: 2rem;
      box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .timeline-legend h4 {
      color: #1e293b;
      margin: 0 0 1.5rem 0;
      font-size: 1.25rem;
      font-weight: 700;
    }

    .legend-items {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 1rem;
    }

    .legend-item {
      display: flex;
      align-items: center;
      gap: 1rem;
      padding: 0.75rem;
      background: #f8fafc;
      border-radius: 0.75rem;
      border: 1px solid #e2e8f0;
    }

    .legend-dot {
      width: 16px;
      height: 16px;
      border-radius: 50%;
      border: 3px solid white;
      box-shadow: 0 0 0 2px currentColor;
    }

    .legend-dot.critical {
      background: #dc2626;
      color: #dc2626;
    }

    .legend-dot.high {
      background: #ea580c;
      color: #ea580c;
    }

    .legend-dot.medium {
      background: #d97706;
      color: #d97706;
    }

    .legend-dot.low {
      background: #65a30d;
      color: #65a30d;
    }

    .legend-item span {
      color: #374151;
      font-weight: 500;
    }

    @media (max-width: 768px) {
      .timeline-controls {
        flex-direction: column;
        align-items: stretch;
        gap: 1.5rem;
      }

      .timeline-filters {
        justify-content: center;
      }

      .timeline-stats {
        justify-content: space-around;
      }

      .timeline-line {
        left: 1.5rem;
      }

      .timeline-events {
        padding-left: 3rem;
      }

      .timeline-event::before {
        left: -1.25rem;
      }

      .event-header {
        flex-direction: column;
        align-items: stretch;
      }

      .event-details {
        grid-template-columns: 1fr;
      }
    }

    .alert-description {
     color: #cbd5e1;
     font-size: 0.9rem;
     line-height: 1.5;
     margin-bottom: 1rem;
   }

   .alert-details {
     display: flex;
     flex-direction: column;
     gap: 0.25rem;
     font-size: 0.8rem;
     color: #94a3b8;
   }

   /* Estilos para sistema de actualización automática */
   .manual-update-btn {
     background: linear-gradient(135deg, #3b82f6, #1d4ed8);
     color: white;
     border: none;
     padding: 8px 16px;
     border-radius: 6px;
     cursor: pointer;
     font-size: 14px;
     font-weight: 500;
     transition: all 0.3s ease;
     margin-left: auto;
     display: flex;
     align-items: center;
     gap: 6px;
   }
   
   .manual-update-btn:hover {
     background: linear-gradient(135deg, #2563eb, #1e40af);
     transform: translateY(-1px);
     box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
   }
   
   .manual-update-btn:active {
     transform: translateY(0);
   }
   
   .update-indicator {
     animation: pulse 2s infinite;
     box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
   }
   
   @keyframes pulse {
     0%, 100% { opacity: 1; }
     50% { opacity: 0.7; }
   }
   
   .notification {
     animation: slideIn 0.3s ease-out;
     box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
   }
   
   @keyframes slideIn {
     from {
       transform: translateX(100%);
       opacity: 0;
     }
     to {
       transform: translateX(0);
       opacity: 1;
     }
   }
   
   .last-update-time {
     transition: all 0.3s ease;
   }
   
   .last-update-time:hover {
     background: rgba(0, 0, 0, 0.9) !important;
   }
   
   .threat-dashboard-header {
     display: flex;
     align-items: center;
     justify-content: space-between;
     margin-bottom: 2rem;
   }


 </style>