---
import Layout from '../layouts/Layout.astro';
import Hero from '../components/Hero.astro';
import Section from '../components/Section.astro';
import Card from '../components/Card.astro';
import BigCTA from '../components/BigCTA.astro';
import ThreatMap from '../components/ThreatMap.astro';

import WebGLThreatMap from '../components/WebGLThreatMap.astro';

// Configuration for backend API
const BACKEND_URL = import.meta.env.PUBLIC_BACKEND_URL || 'https://sesec-backend.fly.dev';

// Fetch real-time threat data from backend
let threatData = null;
let correlationData = null;

try {
  console.log('🔄 Fetching threat data from backend API...');
  const response = await fetch(`${BACKEND_URL}/api/threat/data`, {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    }
  });
  
  if (!response.ok) {
    throw new Error(`Backend API error: ${response.status} ${response.statusText}`);
  }
  
  const result = await response.json();
  
  if (result.success && result.data) {
    threatData = result.data;
  } else {
    throw new Error(result.error || 'Invalid response from backend API');
  }
  

  
  // Verificar si al menos una API devolvió datos válidos
  const validSources = Object.values(threatData).filter(data => data && !(data as any)?.error);
  
  if (!threatData || validSources.length === 0) {
    console.log('🔄 No valid data from APIs, no data available');
    threatData = null;
  } else if (validSources.length < Object.keys(threatData).length - 1) { // -1 para excluir metadata
    // Mostrar advertencia si algunas APIs fallaron pero tenemos datos parciales
    console.warn(`Solo ${validSources.length} de ${Object.keys(threatData).length - 1} APIs respondieron correctamente`);
  }
  
  if (threatData) {
    try {
      // Fetch analytics from backend
      const analyticsResponse = await fetch(`${BACKEND_URL}/api/analytics/summary`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        }
      });
      
      if (analyticsResponse.ok) {
        const analyticsResult = await analyticsResponse.json();
        if (analyticsResult.success) {
          correlationData = analyticsResult.data;
        }
      }
      
      // Generate real-time alerts
  
    } catch (error) {
      console.warn('Error en correlación de amenazas:', error.message);
      correlationData = null;
  
    }
  }
} catch (error) {
  console.error('Error fetching threat data:', error);
  threatData = null;
}

// Threat levels and global threat calculation removed
// Only animated attack visualization is shown
---

<Layout title="Amenazas en Tiempo Real - Sesecpro">
  <div class="threat-dashboard" data-page="amenazas">
      <!-- Mapa Principal (Pantalla Completa) -->
      <div class="map-container">
        <WebGLThreatMap 
          threatData={threatData}
        />

        <!-- Contenedor para panel de filtros y ataques recientes -->
        <div class="right-panel-container">


          <!-- Card de Ataques Recientes - Posición fija a la derecha -->
          <div class="dashboard-card recent-attacks-card">
            <div class="card-header">
              <h3>Ataques Recientes</h3>
              <button class="toggle-card"></button>
            </div>
            <div class="recent-attacks-list">
              <div class="loading-placeholder">
                <!-- Skeleton loaders para simular cards de ataques -->
                <div class="attack-skeleton">
                  <div class="skeleton-header">
                    <div class="skeleton-icon"></div>
                    <div class="skeleton-time"></div>
                  </div>
                  <div class="skeleton-content">
                    <div class="skeleton-severity"></div>
                    <div class="skeleton-title"></div>
                    <div class="skeleton-description"></div>
                    <div class="skeleton-location"></div>
                  </div>
                </div>
                <div class="attack-skeleton">
                  <div class="skeleton-header">
                    <div class="skeleton-icon"></div>
                    <div class="skeleton-time"></div>
                  </div>
                  <div class="skeleton-content">
                    <div class="skeleton-severity"></div>
                    <div class="skeleton-title"></div>
                    <div class="skeleton-description"></div>
                    <div class="skeleton-location"></div>
                  </div>
                </div>
                <div class="attack-skeleton">
                  <div class="skeleton-header">
                    <div class="skeleton-icon"></div>
                    <div class="skeleton-time"></div>
                  </div>
                  <div class="skeleton-content">
                    <div class="skeleton-severity"></div>
                    <div class="skeleton-title"></div>
                    <div class="skeleton-description"></div>
                    <div class="skeleton-location"></div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Dashboard Principal con Grid de Cards -->
        <div class="main-dashboard-overlay">
          <div class="dashboard-cards-grid">
            <!-- Columna izquierda con las dos cards -->
            <div class="left-cards-column">
              <!-- Card de Top Países Atacados -->
              <div class="dashboard-card countries-card">
                <div class="card-header">
                  <h3>🌍 Top Países Atacados</h3>
                  <button class="toggle-card"></button>
                </div>
                <div class="countries-stats">
                  <div class="country-item">
                    <div class="country-header">
                      <div class="country-info">
                        <div class="country-flag">🇺🇸</div>
                        <span class="country-name">Estados Unidos</span>
                      </div>
                      <span class="country-attacks">{Math.floor((threatData?.cloudflare?.topCountries?.find(c => c.code === 'US')?.value || 25) * 1000).toLocaleString() || '25,000'}</span>
                    </div>
                    <div class="country-progress">
                      <div class="country-progress-bar"></div>
                    </div>
                  </div>
                  <div class="country-item">
                    <div class="country-header">
                      <div class="country-info">
                        <div class="country-flag">🇨🇳</div>
                        <span class="country-name">China</span>
                      </div>
                      <span class="country-attacks">{Math.floor((threatData?.cloudflare?.topCountries?.find(c => c.code === 'CN')?.value || 18) * 1000).toLocaleString() || '18,000'}</span>
                    </div>
                    <div class="country-progress">
                      <div class="country-progress-bar"></div>
                    </div>
                  </div>
                  <div class="country-item">
                    <div class="country-header">
                      <div class="country-info">
                        <div class="country-flag">🇷🇺</div>
                        <span class="country-name">Rusia</span>
                      </div>
                      <span class="country-attacks">{Math.floor((threatData?.cloudflare?.topCountries?.find(c => c.code === 'RU')?.value || 15) * 1000).toLocaleString() || '15,000'}</span>
                    </div>
                    <div class="country-progress">
                      <div class="country-progress-bar"></div>
                    </div>
                  </div>
                  <div class="country-item">
                    <div class="country-header">
                      <div class="country-info">
                        <div class="country-flag">🇩🇪</div>
                        <span class="country-name">Alemania</span>
                      </div>
                      <span class="country-attacks">{Math.floor((threatData?.cloudflare?.topCountries?.find(c => c.code === 'DE')?.value || 12) * 1000).toLocaleString() || '12,000'}</span>
                    </div>
                    <div class="country-progress">
                      <div class="country-progress-bar"></div>
                    </div>
                  </div>
                  <div class="country-item">
                    <div class="country-header">
                      <div class="country-info">
                        <div class="country-flag">🇬🇧</div>
                        <span class="country-name">Reino Unido</span>
                      </div>
                      <span class="country-attacks">{Math.floor((threatData?.cloudflare?.topCountries?.find(c => c.code === 'GB')?.value || 10) * 1000).toLocaleString() || '10,000'}</span>
                    </div>
                    <div class="country-progress">
                      <div class="country-progress-bar"></div>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Card de Tasas de Crecimiento de Ataques -->
              <div class="dashboard-card categories-card">
                <div class="card-header">
                  <h3>Tasas de Crecimiento</h3>
                  <button class="toggle-card"></button>
                </div>
                <div class="categories-grid">
                  <div class="category-item malware">
                    <div class="category-info">
                      <div class="category-header">
                        <span class="category-name">Malware</span>
                        <span class="category-count">{(threatData?.urlhaus?.count || threatData?.urlhaus?.total_urls || 1000).toLocaleString()}</span>
                      </div>
                      <div class="category-metrics">
                        <span class="category-percentage">{(threatData?.urlhaus?.count > 0 ? Math.min(Math.round((threatData.urlhaus.count / 10000) * 100), 25) : 12)}%</span>
                        <span class="category-trend up">↗ +{(threatData?.urlhaus?.count > 0 ? Math.round((threatData.urlhaus.count / 1000) * 0.3) : 3)}%</span>
                      </div>
                    </div>
                  </div>
                  <div class="category-item phishing">
                    <div class="category-info">
                      <div class="category-header">
                        <span class="category-name">Phishing</span>
                        <span class="category-count">{Math.floor((threatData?.malwarebazaar?.count || 0) * 1.5 + (threatData?.urlhaus?.count || 0) * 0.8).toLocaleString() || '1,520,000'}</span>
                      </div>
                      <div class="category-metrics">
                        <span class="category-percentage">{(threatData?.malwarebazaar?.count > 0 ? Math.min(Math.round((threatData.malwarebazaar.count / 5000) * 100), 15) : 8)}%</span>
                        <span class="category-trend up">↗ +{(threatData?.malwarebazaar?.count > 0 ? Math.round((threatData.malwarebazaar.count / 1000) * 0.2) : 2)}%</span>
                      </div>
                    </div>
                  </div>
                  <div class="category-item ransomware">
                    <div class="category-info">
                      <div class="category-header">
                        <span class="category-name">Ransomware</span>
                        <span class="category-count">{(threatData?.ransomwatch?.recent?.length || 0) + Math.floor((threatData?.malwarebazaar?.count || 0) * 0.02) || '200'}</span>
                      </div>
                      <div class="category-metrics">
                        <span class="category-percentage">{(threatData?.malwarebazaar?.count > 0 ? Math.min(Math.round((threatData.malwarebazaar.count / 50000) * 100), 8) : 5)}%</span>
                        <span class="category-trend down">↘ -{(threatData?.malwarebazaar?.count > 0 ? Math.round((threatData.malwarebazaar.count / 10000) * 0.5) : 2)}%</span>
                      </div>
                    </div>
                  </div>
                  <div class="category-item ddos">
                    <div class="category-info">
                      <div class="category-header">
                        <span class="category-name">DDoS</span>
                        <span class="category-count">{Math.floor((threatData?.cloudflare?.topAttackPairs?.length || 15) * 1500).toLocaleString() || '22,500'}</span>
                      </div>
                      <div class="category-metrics">
                        <span class="category-percentage">{(threatData?.cloudflare?.topAttackPairs?.length > 0 ? Math.min(Math.round((threatData.cloudflare.topAttackPairs.length / 20) * 100), 18) : 15)}%</span>
                        <span class="category-trend up">↗ +{(threatData?.cloudflare?.topAttackPairs?.length > 0 ? Math.round((threatData.cloudflare.topAttackPairs.length / 5) * 0.8) : 8)}%</span>
                      </div>
                    </div>
                  </div>
                  <div class="category-item botnet">
                    <div class="category-info">
                      <div class="category-header">
                        <span class="category-name">Botnet</span>
                        <span class="category-count">{Math.floor((threatData?.cloudflare?.topCountries?.length || 10) * 800).toLocaleString() || '8,000'}</span>
                      </div>
                      <div class="category-metrics">
                        <span class="category-percentage">{(threatData?.cloudflare?.topCountries?.length > 0 ? Math.min(Math.round((threatData.cloudflare.topCountries.length / 30) * 100), 12) : 5)}%</span>
                        <span class="category-trend up">↗ +{(threatData?.cloudflare?.topCountries?.length > 0 ? Math.round((threatData.cloudflare.topCountries.length / 10) * 0.6) : 3)}%</span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>


          </div>
        </div>

         <!-- Panel de países más atacados (integrado en grid) -->
         <!-- Esta sección ahora se renderiza en el grid principal más abajo -->

         <!-- Panel de categorías de ataques (overlay) - ELIMINADO, ahora en grid principal -->
      </div>
    </div>

    <!-- SISTEMA DE PESTAÑAS MÓVILES ULTRA-MODERNO -->
    <div class="mobile-navigation">
      <div class="nav-tabs">
        <button class="nav-tab" data-panel="stats" aria-label="Ver estadísticas">
          <i class="fas fa-chart-line"></i>
          <span>Stats</span>
        </button>
        <button class="nav-tab" data-panel="attacks" aria-label="Ver actividad de ataques">
          <i class="fas fa-shield-virus"></i>
          <span>Ataques</span>
        </button>
        <button class="nav-tab active" data-panel="map" aria-label="Ver mapa interactivo">
          <i class="fas fa-map-marked-alt"></i>
          <span>Mapa</span>
        </button>
      </div>
    </div>

    <!-- CONTENEDOR DE PANELES MÓVILES - ESTRUCTURA SIMPLIFICADA -->
    <div class="mobile-content-container">
      <!-- Panel de Estadísticas -->
      <div class="mobile-panel stats-panel">
        <button class="close-panel">
          <i class="fas fa-times"></i>
        </button>
        <div class="panel-content" id="mobileStatsContent">
          <div class="loading-spinner">Cargando estadísticas...</div>
        </div>
      </div>

      <!-- Panel de Actividad Reciente -->
      <div class="mobile-panel attacks-panel">
        <button class="close-panel">
          <i class="fas fa-times"></i>
        </button>
        <div class="panel-content" id="mobileAttacksContent">
          <div class="loading-spinner">Cargando actividad...</div>
        </div>
      </div>



      <!-- Panel de Mapa -->
      <div class="mobile-panel map-panel">
        <button class="close-panel">
          <i class="fas fa-times"></i>
        </button>
        <div class="panel-content">
          <div class="map-container">
            <!-- El mapa se carga automáticamente desde la versión de escritorio -->
          </div>
        </div>
      </div>
    </div>
    
    <!-- Script to pass data to WebGL component -->
    <script define:vars={{ threatData }}>
      // Variable global para datos de timeline
      window.timelineData = {
        stats: {
          totalIncidents: 0,
          criticalIncidents: 0,
          affectedCountries: 0
        },
        events: []
      };
      
      // Make data available to WebGL component
      window.threatMapProps = {
        threatData
      };
    </script>

    <!-- Sistema de actualización automática de datos -->
    <script>
      // Declaraciones globales para TypeScript
      declare global {
  interface Window {
    threatMapProps: any;
    timelineData: any;
    webglThreatMap: any;
    loadCountryData: () => void;
    currentThreatFilters: any;
    removeFilter: (filterKey: string) => void;
    threatDataUpdater: ThreatDataUpdater;
  }
}
      
      class ThreatDataUpdater {
        updateInterval: number;
        isUpdating: boolean;
        lastUpdate: Date;
        updateTimer: number | null;
        retryCount: number;
        maxRetries: number;
        
        constructor() {
          this.updateInterval = 30 * 1000; // 30 segundos
          this.isUpdating = false;
          this.lastUpdate = new Date();
          this.updateTimer = null;
          this.retryCount = 0;
          this.maxRetries = 3;
          this.lastDataCache = null; // Cache para optimizar procesamiento
          
          this.init();
        }
        
        init() {
          // Mostrar indicador de última actualización
          this.updateLastUpdateDisplay();
          
          // Mostrar datos estáticos inmediatamente para mejor UX
          this.showStaticDataFirst();
          
          // Intentar cargar desde cache primero para mejorar velocidad percibida
          this.loadFromCacheFirst();
          
          // Cargar datos frescos del servidor
          this.updateThreatData();
          
          // Iniciar actualizaciones automáticas después de la primera carga
          setTimeout(() => {
            this.startAutoUpdate();
          }, this.updateInterval);
          
          // Agregar listener para visibilidad de página
          document.addEventListener('visibilitychange', () => {
            if (document.hidden) {
              this.pauseUpdates();
            } else {
              this.resumeUpdates();
            }
          });
          
          // Agregar botón de actualización manual
          this.addManualUpdateButton();
        }
        
        loadFromCacheFirst() {
          try {
            const cachedData = localStorage.getItem('threatData');
            const cacheTime = localStorage.getItem('threatDataTime');
            
            if (cachedData && cacheTime) {
              const age = Date.now() - parseInt(cacheTime);
              // Si el cache tiene menos de 2 minutos, usarlo para carga rápida
              if (age < 120000) {
                const data = JSON.parse(cachedData);
                this.updateUIWithData(data, true); // true indica que es cache
                console.log('🚀 Datos cargados desde cache para mejor rendimiento');
              }
            }
          } catch (error) {
            console.warn('Error cargando cache:', error);
          }
        }
        
        saveToCache(data) {
          try {
            localStorage.setItem('threatData', JSON.stringify(data));
            localStorage.setItem('threatDataTime', Date.now().toString());
          } catch (error) {
            console.warn('Error guardando en cache:', error);
          }
        }
        
        showStaticDataFirst() {
          // Datos estáticos para mostrar inmediatamente (fallback cuando APIs no responden)
          const staticData = {
            cloudflare: {
              topCountries: [
                { name: 'Estados Unidos', attacks: 3200, flag: '🇺🇸' },
                { name: 'China', attacks: 2400, flag: '🇨🇳' },
                { name: 'Rusia', attacks: 1800, flag: '🇷🇺' }
              ]
            },
            ransomwatch: {
              count: 165,
              rawData: {
                recentPosts: [
                  { group_name: 'LockBit', post_title: 'Manufacturing Company', timestamp: Date.now() - 3600000 },
                  { group_name: 'BlackCat', post_title: 'Healthcare Provider', timestamp: Date.now() - 7200000 }
                ]
              }
            },
            urlhaus: { count: 1100 },
            malwarebazaar: { count: 1400 }
          };
          
          // Actualizar UI con datos estáticos
          this.updateUIWithData(staticData, true);
          
          console.log('📊 Datos estáticos mostrados para mejor UX');
        }
        
        async updateUIWithData(newData, isFromCache = false) {
          // Actualizar datos globales incluyendo eventos de timeline
          if (!window.threatMapProps) window.threatMapProps = {};
          if (!window.timelineData) window.timelineData = { events: [] };
          
          const oldData = window.threatMapProps.threatData;
          window.threatMapProps.threatData = {
            ...newData,
            recentEvents: window.timelineData.events || []
          };
          
          if (!isFromCache) {
            this.showLoadingProgress('Actualizando interfaz...');
          }
          
          // Actualizar componentes en paralelo para mejor rendimiento
          const updatePromises = [];
          
          // Solo actualizar si los datos han cambiado (o si es la primera carga desde cache)
          if (isFromCache || !oldData || JSON.stringify(oldData.cloudflare?.topCountries) !== JSON.stringify(newData.cloudflare?.topCountries)) {
            updatePromises.push(Promise.resolve(this.updateCountriesPanel(newData)));
          }
          
          if (isFromCache || !oldData || JSON.stringify(oldData.categories) !== JSON.stringify(newData.categories)) {
            updatePromises.push(Promise.resolve(this.updateAttackCategories(newData)));
          }
          
          if (isFromCache || !oldData || JSON.stringify(oldData.recentAttacks) !== JSON.stringify(newData.recentAttacks)) {
            updatePromises.push(Promise.resolve(this.updateRecentAttacks(newData)));
          }
          
          // Ejecutar actualizaciones en paralelo
          await Promise.all(updatePromises);
          
          // Actualizar mapa WebGL si existe
          if (window.webglThreatMap && window.webglThreatMap.updateData) {
            window.webglThreatMap.updateData(newData);
          }
        }
        
        async updateThreatData() {
          if (this.isUpdating) return;
          
          this.isUpdating = true;
          this.showUpdateIndicator(true);
          
          try {
            // Mostrar progreso de carga
            this.showLoadingProgress('Conectando con servidor...');
            
            const backendUrl = import.meta.env.PUBLIC_BACKEND_URL || 'https://sesec-backend.fly.dev';
            
            // Configurar timeout y cache para mejorar rendimiento
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 15000); // 15 segundos timeout
            
            const response = await fetch(`${backendUrl}/api/threat/data`, {
              method: 'GET',
              headers: {
                'Accept': 'application/json',
                'Cache-Control': 'max-age=30' // Cache por 30 segundos
              },
              signal: controller.signal
            });
            
            clearTimeout(timeoutId);
            this.showLoadingProgress('Procesando datos...');
            
            if (!response.ok) {
              throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const response_data = await response.json();
            
            if (response_data && response_data.success && this.validateData(response_data.data)) {
              const newData = response_data.data;
              
              // Actualizar datos globales incluyendo eventos de timeline
              if (!window.threatMapProps) window.threatMapProps = {};
              if (!window.timelineData) window.timelineData = { events: [] };
              
              // Actualizar UI con los nuevos datos
              await this.updateUIWithData(newData, false);
              
              // Guardar en cache para futuras cargas rápidas
              this.saveToCache(newData);
              
              this.lastUpdate = new Date();
              this.retryCount = 0;
              // Popup de actualización eliminado
            } else {
              throw new Error('Datos inválidos recibidos');
            }
          } catch (error) {
            console.error('Error actualizando datos:', error);
            
            // Si es error 429, intentar usar datos en caché
            if (error.message.includes('429')) {
              console.log('🔄 Error 429 detectado, intentando usar datos en caché...');
              try {
                const cachedData = localStorage.getItem('threatData');
                if (cachedData) {
                  const data = JSON.parse(cachedData);
                  console.log('✅ Usando datos en caché como fallback');
                  await this.updateUIWithData(data, true);
                  return;
                }
              } catch (cacheError) {
                console.warn('Error accediendo al caché:', cacheError);
              }
            }
            
            this.retryCount++;
            
            if (this.retryCount < this.maxRetries) {
              // Reintentar en 2 minutos para evitar rate limiting
              setTimeout(() => this.updateThreatData(), 120000);
            } else {
              this.showUpdateError(error.message);
            }
          } finally {
            this.isUpdating = false;
            this.showUpdateIndicator(false);
            this.updateLastUpdateDisplay();
          }
        }
        
        validateData(data: any) {
          if (!data || typeof data !== 'object') {
            console.log('❌ Validación falló: datos no válidos o no es objeto');
            return false;
          }
          
          // Verificar que al menos una fuente de datos esté disponible y sin errores
          const validSources = [
            data.urlhaus && !data.urlhaus.error,
            data.cloudflare && !data.cloudflare.error,
            data.ransomwatch && !data.ransomwatch.error,
            data.sansISC && !data.sansISC.error
          ].filter(Boolean);
          
          const isValid = validSources.length > 0;
          
          if (!isValid) {
            console.log('❌ Validación falló: no hay fuentes de datos válidas disponibles');
            console.log('Errores encontrados:', {
              urlhaus: data.urlhaus?.error,
              cloudflare: data.cloudflare?.error,
              ransomwatch: data.ransomwatch?.error,
              sansISC: data.sansISC?.error
            });
          } else {
            console.log('✅ Validación exitosa:', validSources.length, 'fuentes válidas');
          }
          
          return isValid;
        }
        

        
        updateCountriesPanel(data: any) {
          const countriesContainer = document.querySelector('.countries-stats');
          if (!countriesContainer || !data.cloudflare?.topCountries) return;
          
          // Cache estático de banderas para mejor rendimiento
          if (!this.countryFlagsCache) {
            this.countryFlagsCache = {
              'United States': '🇺🇸', 'USA': '🇺🇸', 'US': '🇺🇸',
              'China': '🇨🇳', 'CN': '🇨🇳',
              'Russia': '🇷🇺', 'RU': '🇷🇺',
              'Germany': '🇩🇪', 'DE': '🇩🇪',
              'United Kingdom': '🇬🇧', 'UK': '🇬🇧', 'GB': '🇬🇧',
              'France': '🇫🇷', 'FR': '🇫🇷',
              'Japan': '🇯🇵', 'JP': '🇯🇵',
              'Brazil': '🇧🇷', 'BR': '🇧🇷',
              'India': '🇮🇳', 'IN': '🇮🇳',
              'Canada': '🇨🇦', 'CA': '🇨🇦'
            };
          }
          
          // Usar DocumentFragment para mejor rendimiento
          const fragment = document.createDocumentFragment();
          const countries = data.cloudflare.topCountries.slice(0, 5);
          
          for (let i = 0; i < countries.length; i++) {
            const country = countries[i];
            const countryName = country.name || country.country || country.code || country.alpha2 || 'Desconocido';
            const flag = this.countryFlagsCache[countryName] || this.countryFlagsCache[country.code] || this.countryFlagsCache[country.alpha2] || '🌍';
            const attacks = (country.attacks || country.count || 1500).toLocaleString();
            
            const countryDiv = document.createElement('div');
            countryDiv.className = 'country-item';
            countryDiv.innerHTML = `
              <div class="country-info">
                <span class="country-flag">${flag}</span>
                <span class="country-name">${countryName}</span>
                <span class="country-attacks">${attacks}</span>
              </div>
            `;
            
            fragment.appendChild(countryDiv);
          }
          
          // Actualizar DOM una sola vez
          countriesContainer.innerHTML = '';
          countriesContainer.appendChild(fragment);
        }
        
        updateAttackCategories(data: any) {
          // Actualizar conteos de categorías
          const categories = document.querySelectorAll('.category-item');
          categories.forEach((category, index) => {
            const countElement = category.querySelector('.category-count');
            if (!countElement) return;
            
            let newCount = 0;
            switch (index) {
              case 0: // Malware
                newCount = (data.urlhaus?.count || data.urlhaus?.total_urls || 0);
                break;
              case 1: // Phishing
                newCount = Math.floor((data.cloudflare?.percentage || 0) * 100000);
                break;
              case 2: // Ransomware
                newCount = (data.ransomwatch?.count7d || data.ransomwatch?.count || 0);
                break;
              case 3: // DDoS
                newCount = Math.floor((data.cloudflare?.topAttackPairs?.length || 0) * 1500);
                break;
              case 4: // Botnet
                newCount = Math.floor((data.cloudflare?.topCountries?.length || 0) * 800);
                break;
            }
            countElement.textContent = newCount.toLocaleString();
          });
        }
        
        getTimeDifference(date: any) {
          const now = new Date().getTime();
          const attackDate = new Date(date).getTime();
          const diffMs = now - attackDate;
          
          const diffMinutes = Math.floor(diffMs / (1000 * 60));
          const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
          const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
          
          if (diffDays > 0) {
            return `Hace ${diffDays} día${diffDays > 1 ? 's' : ''}`;
          } else if (diffHours > 0) {
            return `Hace ${diffHours} hora${diffHours > 1 ? 's' : ''}`;
          } else if (diffMinutes > 0) {
            return `Hace ${diffMinutes} min`;
          } else {
            return 'Ahora mismo';
          }
        }
        
        updateRecentAttacks(data: any) {
          console.log('🔄 Actualizando ataques recientes...', data);
          const attacksContainer = document.querySelector('.recent-attacks-list');
          if (!attacksContainer) {
            console.error('❌ No se encontró el contenedor .recent-attacks-list');
            return;
          }
          
          // Usar requestAnimationFrame para mejor rendimiento
          requestAnimationFrame(() => {
            const recentAttacks = this.parseAttackData(data);
            const html = this.generateAttackHTML(recentAttacks);
            this.updateAttacksContainer(attacksContainer, html, recentAttacks);
          });
        }
        
        updateAttacksContainer(attacksContainer, html, recentAttacks) {
          
          // Añadir clase de fade-out a los skeletons
          const loadingPlaceholder = attacksContainer.querySelector('.loading-placeholder');
          if (loadingPlaceholder) {
            (loadingPlaceholder as HTMLElement).style.opacity = '0';
            (loadingPlaceholder as HTMLElement).style.transform = 'translateY(-10px)';
            
            setTimeout(() => {
              attacksContainer.innerHTML = html;
              
              // Añadir animación de entrada a los nuevos elementos
              const attackItems = attacksContainer.querySelectorAll('.attack-item');
              attackItems.forEach((item, index) => {
                const attackElement = item as HTMLElement;
                attackElement.style.opacity = '0';
                attackElement.style.transform = 'translateY(20px)';
                
                setTimeout(() => {
                  attackElement.style.transition = 'all 0.4s ease';
                  attackElement.style.opacity = '1';
                  attackElement.style.transform = 'translateY(0)';
                }, index * 100); // Stagger animation
              });
              
              // Añadir event listeners para el modal
              this.addAttackModalListeners(recentAttacks);
              

            }, 300);
          } else {
            // Si no hay skeletons, actualizar directamente
            attacksContainer.innerHTML = html;
            this.addAttackModalListeners(recentAttacks);
          }
          
          console.log(`✅ ${recentAttacks.length} ataques actualizados`);
        }
        
        parseAttackData(data: any) {
          // Cache para evitar reprocesamiento innecesario
          const cacheKey = JSON.stringify({
            ransomCount: data.ransomwatch?.count || 0,
            cloudflareCount: data.cloudflare?.topCountries?.length || 0,
            urlhausCount: data.urlhaus?.count || 0
          });
          
          if (this.lastDataCache && this.lastDataCache.key === cacheKey) {
            return this.lastDataCache.attacks;
          }
          
          const recentAttacks = [];
          const now = new Date();
          
          // Procesar ataques en paralelo para mejor rendimiento
          const processors = [
            () => this.addRansomwareAttacks(data, recentAttacks, now),
            () => this.addDDoSAttacks(data, recentAttacks, now),
            () => this.addMalwareAttacks(data, recentAttacks, now),
            () => this.addBotnetAttacks(data, recentAttacks, now)
          ];
          
          processors.forEach(processor => processor());
          
          // Ordenar por timestamp y limitar a 10 ataques
          const sortedAttacks = recentAttacks
            .sort((a, b) => (b.timestamp || 0) - (a.timestamp || 0))
            .slice(0, 10);
          
          // Guardar en cache
          this.lastDataCache = { key: cacheKey, attacks: sortedAttacks };
          
          return sortedAttacks;
        }
        
        addRansomwareAttacks(data: any, attacks: any[], now: Date) {
          const ransomPosts = data.ransomwatch?.rawData?.recentPosts || 
                             data.ransomwatch?.rawData?.weeklyPosts?.slice(0, 5) || [];
          
          if (ransomPosts.length > 0) {
            ransomPosts.slice(0, 3).forEach((attack: any, index: number) => {
              const attackTime = new Date(attack.discovered || (now.getTime() - (index + 3) * 3600000));
              const victim = attack.post_title || attack.victim || 'Organización no especificada';
              const group = attack.group_name || attack.group || 'grupo desconocido';
              const industry = attack.industry || this.extractIndustry(victim);
              const country = attack.country || this.extractCountry(victim);
              
              attacks.push({
                type: 'Ransomware',
                description: `Ataque de ${group} contra ${victim}`,
                location: this.extractLocation(victim),
                time: this.getTimeDifference(attackTime),
                severity: this.getRansomwareSeverity(group),
                timestamp: attackTime,
                source: 'RansomWatch',
                details: {
                  victim: victim,
                  group: group,
                  industry: industry,
                  country: country,
                  discovered: attack.discovered,
                  published: attack.published,
                  post_url: attack.post_url,
                  ransomware_family: attack.malware_family || group
                }
              });
            });
          }
        }
        
        addDDoSAttacks(data: any, attacks: any[], now: Date) {
          const attackPairs = data.cloudflare?.topAttackPairs?.slice(0, 3) || [];
          const countries = data.cloudflare?.topCountries?.slice(0, 2) || [];
          
          // Procesar pares de ataque específicos
          attackPairs.forEach((attack: any, index: number) => {
            const attackTime = new Date(now.getTime() - (index + 1) * 3600000);
            const originCountry = attack.origin_country || 'Origen desconocido';
            const targetCountry = attack.target_country || 'Destino desconocido';
            const originFlag = this.getCountryFlag(originCountry);
            const targetFlag = this.getCountryFlag(targetCountry);
            const attackType = attack.type || 'DDoS';
            const attackVolume = attack.attacks || attack.requests || 0;
            
            attacks.push({
              type: attackType.toUpperCase(),
              description: `Ataque ${attackType} de ${originFlag} ${originCountry} a ${targetFlag} ${targetCountry}`,
              location: `${originFlag} → ${targetFlag}`,
              time: this.getTimeDifference(attackTime),
              severity: this.getDDoSSeverity(attackVolume),
              timestamp: attackTime,
              source: 'Cloudflare Radar',
              details: {
                origin_country: originCountry,
                target_country: targetCountry,
                attack_type: attackType,
                volume: attackVolume,
                duration: attack.duration,
                peak_bps: attack.peak_bps,
                peak_pps: attack.peak_pps
              }
            });
          });
          
          // Procesar países con mayor actividad
          countries.forEach((country: any, index: number) => {
            const attackTime = new Date(now.getTime() - (index + 4) * 3600000);
            const countryName = country.name || country.country || 'País desconocido';
            const flag = this.getCountryFlag(countryName);
            const attackCount = country.attacks || country.count || 0;
            
            attacks.push({
              type: 'DDoS',
              description: `${attackCount.toLocaleString()} ataques DDoS desde ${countryName}`,
              location: `${flag} ${countryName}`,
              time: this.getTimeDifference(attackTime),
              severity: this.getDDoSSeverity(attackCount),
              timestamp: attackTime,
              source: 'Cloudflare Radar',
              details: {
                country: countryName,
                attack_count: attackCount,
                percentage: country.percentage,
                rank: country.rank
              }
            });
          });
        }
        
        addMalwareAttacks(data: any, attacks: any[], now: Date) {
          const urlhausData = data.urlhaus;
          if (urlhausData?.count > 0) {
            const attackTime = new Date(now.getTime() - 15 * 60000); // 15 min atrás
            
            // Obtener muestras recientes para detalles específicos
            const recentSamples = urlhausData.recent_samples?.slice(0, 3) || [];
            const topCountries = urlhausData.topCountries?.slice(0, 3) || [];
            const malwareFamilies = urlhausData.malwareFamilies?.slice(0, 2) || [];
            
            attacks.push({
              type: 'Malware',
              description: `${urlhausData.count.toLocaleString()} URLs maliciosas detectadas`,
              location: '🌐 Global',
              time: this.getTimeDifference(attackTime),
              severity: this.getMalwareSeverity(urlhausData.count),
              timestamp: attackTime,
              source: 'URLhaus',
              details: {
                total_urls: urlhausData.count,
                recent_samples: recentSamples,
                top_countries: topCountries,
                malware_families: malwareFamilies,
                threat_types: urlhausData.threatTypes,
                online_ratio: urlhausData.analytics?.onlineRatio,
                average_hourly: urlhausData.analytics?.averageHourly
              }
            });
            
            // Añadir ataques específicos de muestras recientes
            recentSamples.forEach((sample: any, index: number) => {
              const sampleTime = new Date(sample.date_added || (now.getTime() - (index + 5) * 60000));
              const threatType = sample.threat || sample.tags?.[0] || 'Malware';
              const country = sample.country || 'Desconocido';
              const flag = this.getCountryFlag(country);
              
              attacks.push({
                type: threatType,
                description: `URL maliciosa: ${sample.url?.substring(0, 50)}...`,
                location: `${flag} ${country}`,
                time: this.getTimeDifference(sampleTime),
                severity: this.getURLSeverity(sample),
                timestamp: sampleTime,
                source: 'URLhaus',
                details: {
                  url: sample.url,
                  threat_type: threatType,
                  country: country,
                  date_added: sample.date_added,
                  status: sample.url_status,
                  tags: sample.tags
                }
              });
            });
          }
        }
        
        addBotnetAttacks(data: any, attacks: any[], now: Date) {
          if (data.feodotracker?.count > 0) {
            const attackTime = new Date(now.getTime() - 45 * 60000); // 45 min atrás
            
            attacks.push({
              type: 'Botnet',
              description: `${data.feodotracker.count} servidores C&C activos`,
              location: '🌐 Global',
              time: this.getTimeDifference(attackTime),
              severity: 'medium',
              timestamp: attackTime,
              source: 'FeodoTracker'
            });
          }
        }
        
        extractLocation(text: string) {
          // Extraer ubicación del texto si es posible
          const locationPatterns = [
            /\b(USA?|United States)\b/i,
            /\b(UK|United Kingdom|Britain)\b/i,
            /\b(Germany|Deutschland)\b/i,
            /\b(France|Francia)\b/i,
            /\b(Japan|Japón)\b/i,
            /\b(China)\b/i
          ];
          
          for (const pattern of locationPatterns) {
            if (pattern.test(text)) {
              const match = text.match(pattern);
              if (match) {
                return this.getCountryFlag(match[0]) + ' ' + match[0];
              }
            }
          }
          
          return '🌍 Ubicación no especificada';
        }
        
        getCountryFlag(country: string) {
          const flags = {
            'United States': '🇺🇸', 'USA': '🇺🇸', 'US': '🇺🇸',
            'United Kingdom': '🇬🇧', 'UK': '🇬🇧', 'Britain': '🇬🇧',
            'Germany': '🇩🇪', 'Deutschland': '🇩🇪',
            'France': '🇫🇷', 'Francia': '🇫🇷',
            'Japan': '🇯🇵', 'Japón': '🇯🇵',
            'China': '🇨🇳',
            'Russia': '🇷🇺',
            'Canada': '🇨🇦',
            'Australia': '🇦🇺',
            'Brazil': '🇧🇷',
            'India': '🇮🇳'
          };
          
          return flags[country] || '🌍';
        }

        getRansomwareSeverity(group: string) {
          const severityMap = {
            'lockbit': 'critical',
            'blackcat': 'high', 
            'conti': 'high',
            'revil': 'high',
            'hive': 'medium',
            'ransomhouse': 'medium',
            'bianlian': 'medium',
            'royal': 'medium'
          };
          
          const groupLower = group.toLowerCase();
          return severityMap[groupLower] || 'medium';
        }

        getDDoSSeverity(volume: number) {
          if (volume > 1000000) return 'critical';
          if (volume > 100000) return 'high';
          if (volume > 10000) return 'medium';
          return 'low';
        }

        getMalwareSeverity(count: number) {
          if (count > 5000) return 'critical';
          if (count > 1000) return 'high';
          if (count > 500) return 'medium';
          return 'low';
        }

        getURLSeverity(sample: any) {
          const threatTypes = sample.threat || sample.tags || [];
          if (threatTypes.includes('malware_download') || threatTypes.includes('ransomware')) {
            return 'high';
          }
          if (threatTypes.includes('phishing') || threatTypes.includes('scam')) {
            return 'medium';
          }
          return 'low';
        }

        extractIndustry(text: string) {
          // Patrones para detectar industrias en el texto de la víctima
          const industryPatterns = [
            { pattern: /\b(hospital|clinic|medical|healthcare|health care|médico|hospitalario)\b/i, industry: 'Salud' },
            { pattern: /\b(bank|financial|finance|bancario|financiero|credit|loan|insurance|seguros)\b/i, industry: 'Financiero' },
            { pattern: /\b(government|gov|municipal|public sector|gobierno|municipalidad)\b/i, industry: 'Gobierno' },
            { pattern: /\b(education|school|university|college|educación|universidad|colegio)\b/i, industry: 'Educación' },
            { pattern: /\b(energy|oil|gas|petroleum|energía|petróleo|gasolina)\b/i, industry: 'Energía' },
            { pattern: /\b(transport|logistics|shipping|transporte|logística|envío)\b/i, industry: 'Transporte' },
            { pattern: /\b(retail|store|shop|ecommerce|e-commerce|comercio|tienda)\b/i, industry: 'Retail' },
            { pattern: /\b(technology|tech|software|hardware|IT|tecnología|informática)\b/i, industry: 'Tecnología' },
            { pattern: /\b(manufacturing|factory|production|manufactura|fábrica|producción)\b/i, industry: 'Manufactura' },
            { pattern: /\b(telecom|telecommunications|communications|telecomunicaciones)\b/i, industry: 'Telecomunicaciones' }
          ];
          
          for (const { pattern, industry } of industryPatterns) {
            if (pattern.test(text)) {
              return industry;
            }
          }
          
          return 'Industria no especificada';
        }

        extractCountry(text: string) {
          // Patrones para detectar países en el texto
          const countryPatterns = [
            { pattern: /\b(USA|United States|US|EE\.UU\.)\b/i, country: 'Estados Unidos' },
            { pattern: /\b(UK|United Kingdom|Britain|England)\b/i, country: 'Reino Unido' },
            { pattern: /\b(Germany|Deutschland)\b/i, country: 'Alemania' },
            { pattern: /\b(France|Francia)\b/i, country: 'Francia' },
            { pattern: /\b(Spain|España)\b/i, country: 'España' },
            { pattern: /\b(Italy|Italia)\b/i, country: 'Italia' },
            { pattern: /\b(Canada|Canadá)\b/i, country: 'Canadá' },
            { pattern: /\b(Australia)\b/i, country: 'Australia' },
            { pattern: /\b(Japan|Japón)\b/i, country: 'Japón' },
            { pattern: /\b(China)\b/i, country: 'China' },
            { pattern: /\b(Russia|Rusia)\b/i, country: 'Rusia' },
            { pattern: /\b(Brazil|Brasil)\b/i, country: 'Brasil' },
            { pattern: /\b(Mexico|México)\b/i, country: 'México' }
          ];
          
          for (const { pattern, country } of countryPatterns) {
            if (pattern.test(text)) {
              return country;
            }
          }
          
          return 'País no especificado';
        }
        
        getAttackIcon(type: string) {
          const icons = {
            'DDoS': '⚡',
            'Ransomware': '🔒',
            'Malware': '🦠',
            'Phishing': '🎣',
            'Botnet': '🕸️',
            'Data Breach': '💾',
            'SQL Injection': '💉',
            'XSS': '🔗',
            'Brute Force': '🔨',
            'Zero Day': '🎯'
          };
          
          return icons[type] || '⚠️';
        }
        
        generateAttackHTML(attacks: any[]) {
          // Cache para traducciones de severidad
          const severityMap = {
            'critical': 'Crítica',
            'high': 'Alta',
            'medium': 'Media',
            'low': 'Baja'
          };
          
          // Usar un array para mejor rendimiento que concatenación de strings
          const htmlParts = [];
          
          for (let i = 0; i < attacks.length; i++) {
            const attack = attacks[i];
            const icon = this.getAttackIcon(attack.type);
            const severity = severityMap[attack.severity] || 'Media';
            
            const progressClass = `progress-fill-${attack.severity}`;
            
            htmlParts.push(
              `<div class="attack-card ${attack.severity}" style="animation-delay: ${i * 0.1}s">`,
              
              '<!-- Header con icono, timeline y severidad -->',
              '<div class="attack-header">',
              `  <span class="attack-icon">${icon}</span>`,
              '  <div class="attack-timeline">',
              `    <span class="time-ago">${attack.time}</span>`,
              '    <div class="progress-bar">',
              `      <div class="progress-fill ${attack.severity} ${progressClass}"></div>`,
              '    </div>',
              '  </div>',
              `  <span class="severity-badge ${attack.severity}">${severity}</span>`,
              '</div>',
              
              '<!-- Contenido principal -->',
              '<div class="attack-content">',
              `  <h4 class="attack-title">${attack.type}</h4>`,
              `  <p class="attack-description">${attack.description}</p>`,
              
              '  <!-- Métricas de estado e impacto -->',
              '  <div class="attack-metrics">',
              '    <div class="metric">',
              '      <span class="metric-label">Estado</span>',
              '      <span class="metric-value">Activo</span>',
              '    </div>',
              '    <div class="metric">',
              '      <span class="metric-label">Impacto</span>',
              `      <span class="metric-value">${impactText}</span>`,
              '    </div>',
              '  </div>',
              
              '  <!-- Ubicación y acciones -->',
              '  <div class="attack-location-actions">',
              '    <div class="attack-location">',
              '      <span class="location-icon">📍</span>',
              `      <span class="location-text">${attack.location}</span>`,
              '    </div>',
              '    <div class="attack-actions">',
              this.shouldShowAnalyzeButton(attack) ? '      <button class="btn-analyze" onclick="event.stopPropagation();">🔍 Analizar</button>' : '',
              '    </div>',
              '  </div>',
              '</div>',
              
              '<!-- Footer con badge de verificación -->',
              '<div class="attack-footer">',
              '  <span class="verified-badge">✅ Monitorizado</span>',
              '</div>',
              '</div>'
            );
          }
          
          return htmlParts.join('');
        }
        
        shouldShowAnalyzeButton(attack: any): boolean {
          // Solo mostrar el botón ANALIZAR si la ubicación tiene coordenadas válidas
          // (no es global ni tiene coordenadas null)
          const coordinates = this.extractCoordinatesFromLocation(attack.location);
          return coordinates !== null;
        }
        
        addAttackModalListeners(attacks: any[]) {
          const attackCards = document.querySelectorAll('.attack-card');
          attackCards.forEach((card, index) => {
            const attack = attacks[index];
            
            // Click en la tarjeta para mostrar modal
            card.addEventListener('click', () => {
              this.showAttackModal(attack);
            });
            
            // Click en botón Analizar para integración con mapa
            const analyzeBtn = card.querySelector('.btn-analyze');
            if (analyzeBtn) {
              analyzeBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                this.analyzeAttack(attack);
              });
            }
          });
        }
        
        analyzeAttack(attack: any) {
          console.log('Analizando ataque:', attack);
          
          // Integración con el mapa WebGL
          this.highlightAttackOnMap(attack);
          
          // Mostrar notificación de análisis
          this.showAnalysisNotification(attack);
          
          // Scroll al mapa si es necesario
          this.scrollToMap();
        }
        
        highlightAttackOnMap(attack: any) {
          console.log('Destacando ataque en el mapa:', attack);
          
          try {
            // Verificar si el mapa WebGL está disponible
            if (typeof window.threatMap === 'undefined' || !window.threatMap.highlightAttack) {
              console.error('Mapa WebGL no disponible para integración');
              this.showAnalysisNotification(attack);
              return false;
            }
            
            // Extraer coordenadas de la ubicación
            const coordinates = this.extractCoordinatesFromLocation(attack.location);
            
            if (coordinates) {
              // Añadir coordenadas al objeto de ataque
              attack.coordinates = coordinates;
              
              // Destacar el ataque específico en el mapa
              const success = window.threatMap.highlightAttack(attack);
              
              if (success) {
                console.log('Ataque destacado exitosamente en el mapa');
                this.showAnalysisNotification(attack);
                return true;
              }
            }
            
            // Si no hay coordenadas o falló el highlight específico, intentar por tipo
            console.log('Intentando destacar por tipo:', attack.type, attack.severity);
            
            if (window.threatMap.highlightAttackByType) {
              const typeSuccess = window.threatMap.highlightAttackByType(attack.type, attack.severity);
              
              if (typeSuccess) {
                console.log('Ataques por tipo destacados exitosamente');
                this.showAnalysisNotification(attack);
                return true;
              }
            }
            
            console.error('Error al destacar ataque en el mapa');
            this.showAnalysisNotification(attack);
            return false;
            
          } catch (error) {
            console.error('Error en highlightAttackOnMap:', error);
            this.showAnalysisNotification(attack);
            return false;
          }
        }
        
        extractCoordinatesFromLocation(location: string): [number, number] | null {
          // Mapeo mejorado de países a coordenadas aproximadas
          const countryCoords: {[key: string]: [number, number]} = {
            // Países principales
            'japón': [139.6917, 35.6895],    // Tokyo
            'japan': [139.6917, 35.6895],
            'eeuu': [-74.0060, 40.7128],      // New York
            'usa': [-74.0060, 40.7128],
            'estados unidos': [-74.0060, 40.7128],
            'united states': [-74.0060, 40.7128],
            'españa': [-3.7038, 40.4168],     // Madrid
            'spain': [-3.7038, 40.4168],
            'alemania': [13.4050, 52.5200],    // Berlin
            'germany': [13.4050, 52.5200],
            'francia': [2.3522, 48.8566],      // Paris
            'france': [2.3522, 48.8566],
            'reino unido': [-0.1278, 51.5074], // London
            'uk': [-0.1278, 51.5074],
            'united kingdom': [-0.1278, 51.5074],
            'china': [116.4074, 39.9042],      // Beijing
            'brasil': [-47.9292, -15.7801],    // Brasilia
            'brazil': [-47.9292, -15.7801],
            'rusia': [37.6173, 55.7558],       // Moscow
            'russia': [37.6173, 55.7558],
            'canadá': [-75.6972, 45.4215],     // Ottawa
            'canada': [-75.6972, 45.4215],
            'méxico': [-99.1332, 19.4326],     // Mexico City
            'mexico': [-99.1332, 19.4326],
            'italia': [12.4964, 41.9028],      // Rome
            'italy': [12.4964, 41.9028],
            'australia': [149.1289, -35.2809], // Canberra
            'india': [77.2090, 28.6139],       // New Delhi
            'corea del sur': [126.9780, 37.5665], // Seoul
            'south korea': [126.9780, 37.5665],
            
            // Regiones y ubicaciones globales
            'global': [0, 0],                  // Centro del mundo
            '🌐': [0, 0],                      // Emoji global
            'europa': [15.2551, 54.5260],      // Centro de Europa
            'europe': [15.2551, 54.5260],
            'américa': [-85.0000, 10.0000],     // Centro de América
            'america': [-85.0000, 10.0000],
            'asia': [100.0000, 35.0000],       // Centro de Asia
            'áfrica': [20.0000, 0.0000],       // Centro de África
            'africa': [20.0000, 0.0000],
            'oceania': [133.7751, -25.2744]    // Centro de Oceanía
          };
          
          // Limpiar la ubicación: remover emojis y caracteres especiales
          const cleanLocation = location
            .replace(/[^\w\sáéíóúñüÁÉÍÓÚÑÜ]/gi, '') // Remover caracteres especiales (incluyendo emojis)
            .trim()
            .toLowerCase();
          
          console.log('Ubicación limpia:', cleanLocation, 'original:', location);
          
          // Buscar coincidencias exactas primero
          for (const [country, coords] of Object.entries(countryCoords)) {
            if (cleanLocation === country.toLowerCase()) {
              return coords;
            }
          }
          
          // Buscar coincidencias parciales
          for (const [country, coords] of Object.entries(countryCoords)) {
            if (cleanLocation.includes(country.toLowerCase())) {
              return coords;
            }
          }
          
          // Si la ubicación contiene "global" o emojis globales, no usar coordenadas específicas
          // En su lugar, dejaremos que highlightAttackOnMap use highlightAttackByType como fallback
          if (cleanLocation.includes('global') || 
              location.includes('🌐') || 
              location.includes('🌍') || 
              location.includes('🌎') || 
              location.includes('🌏')) {
            console.log('Ubicación global detectada, usando estrategia de fallback');
            return null; // Devolver null para usar highlightAttackByType
          }
          
          // Si no se encuentra ninguna coincidencia, intentar usar highlightAttackByType
          console.log('No se encontraron coordenadas para:', location, 'limpia:', cleanLocation);
          return null;
        }
        
        showAnalysisNotification(attack: any) {
          // Crear notificación de análisis
          const notification = document.createElement('div');
          notification.className = 'analysis-notification';
          notification.innerHTML = `
            <div class="notification-content">
              <span class="notification-icon">🔍</span>
              <div class="notification-text">
                <strong>Analizando: ${attack.type}</strong>
                <span>${attack.description}</span>
              </div>
              <button class="notification-close">×</button>
            </div>
          `;
          
          // Añadir al documento
          document.body.appendChild(notification);
          
          // Animación de entrada
          setTimeout(() => {
            notification.classList.add('show');
          }, 10);
          
          // Auto-remover después de 5 segundos
          setTimeout(() => {
            if (notification.parentNode) {
              notification.classList.remove('show');
              setTimeout(() => {
                notification.remove();
              }, 300);
            }
          }, 5000);
          
          // Cerrar manualmente
          const closeBtn = notification.querySelector('.notification-close');
          closeBtn?.addEventListener('click', () => {
            notification.classList.remove('show');
            setTimeout(() => {
              notification.remove();
            }, 300);
          });
        }
        
        scrollToMap() {
          // Scroll suave al mapa
          const mapSection = document.querySelector('.webgl-map-container');
          if (mapSection) {
            mapSection.scrollIntoView({ 
              behavior: 'smooth', 
              block: 'center'
            });
          }
        }
        
        showAttackModal(attack: any) {
          // Crear el modal si no existe
          let modal = document.querySelector('.attack-modal');
          if (!modal) {
            modal = this.createAttackModal();
            document.body.appendChild(modal);
          }
          
          // Actualizar contenido del modal
          this.updateModalContent(modal, attack);
          
          // Mostrar modal
          (modal as HTMLElement).style.display = 'flex';
          setTimeout(() => {
            modal?.classList.add('show');
          }, 10);
        }
        
        createAttackModal() {
          const modal = document.createElement('div');
          modal.className = 'attack-modal';
          modal.innerHTML = `
            <div class="modal-overlay"></div>
            <div class="modal-content">
              <div class="modal-header">
                <h3 class="modal-title">Detalles del Ataque</h3>
                <button class="modal-close">×</button>
              </div>
              <div class="modal-body">
                <div class="attack-details-grid">
                  <div class="detail-section">
                    <h4>Información General</h4>
                    <div class="detail-item">
                      <span class="detail-label">Tipo:</span>
                      <span class="detail-value attack-type-value"></span>
                    </div>
                    <div class="detail-item">
                      <span class="detail-label">Severidad:</span>
                      <span class="detail-value attack-severity-value"></span>
                    </div>
                    <div class="detail-item">
                      <span class="detail-label">Tiempo:</span>
                      <span class="detail-value attack-time-value"></span>
                    </div>
                  </div>
                  <div class="detail-section">
                    <h4>Ubicación y Fuente</h4>
                    <div class="detail-item">
                      <span class="detail-label">Ubicación:</span>
                      <span class="detail-value attack-location-value"></span>
                    </div>
                    <div class="detail-item">
                      <span class="detail-label">Fuente:</span>
                      <span class="detail-value attack-source-value"></span>
                    </div>
                  </div>
                  <div class="detail-section full-width">
                    <h4>Descripción</h4>
                    <p class="attack-description-value"></p>
                  </div>
                  <div class="detail-section full-width">
                    <h4>Recomendaciones de Mitigación</h4>
                    <div class="mitigation-recommendations"></div>
                  </div>
                </div>
              </div>
            </div>
          `;
          
          // Añadir event listeners
          const closeBtn = modal.querySelector('.modal-close');
          const overlay = modal.querySelector('.modal-overlay');
          
          const closeModal = () => {
            modal.classList.remove('show');
            setTimeout(() => {
              (modal as HTMLElement).style.display = 'none';
            }, 300);
          };
          
          closeBtn?.addEventListener('click', closeModal);
          overlay?.addEventListener('click', closeModal);
          
          return modal;
        }
        
        updateModalContent(modal: Element, attack: any) {
          const typeValue = modal.querySelector('.attack-type-value');
          const severityValue = modal.querySelector('.attack-severity-value');
          const timeValue = modal.querySelector('.attack-time-value');
          const locationValue = modal.querySelector('.attack-location-value');
          const sourceValue = modal.querySelector('.attack-source-value');
          const descriptionValue = modal.querySelector('.attack-description-value');
          const mitigationContainer = modal.querySelector('.mitigation-recommendations');
          
          if (typeValue) typeValue.textContent = attack.type;
          if (severityValue) {
            severityValue.textContent = attack.severity === 'critical' ? 'Crítica' : 
                                      attack.severity === 'high' ? 'Alta' : 'Media';
            severityValue.className = `detail-value attack-severity-value ${attack.severity}`;
          }
          if (timeValue) timeValue.textContent = attack.time;
          if (locationValue) locationValue.textContent = attack.location;
          if (sourceValue) sourceValue.textContent = attack.source;
          if (descriptionValue) descriptionValue.textContent = attack.description;
          
          // Generar recomendaciones basadas en el tipo de ataque
          if (mitigationContainer) {
            mitigationContainer.innerHTML = this.generateMitigationRecommendations(attack.type);
          }
        }
        
        generateMitigationRecommendations(attackType: string) {
          const recommendations = {
            'DDoS': [
              'Implementar protección DDoS en el perímetro de red',
              'Configurar rate limiting en servidores web',
              'Utilizar CDN con protección anti-DDoS',
              'Monitorear tráfico de red en tiempo real'
            ],
            'Ransomware': [
              'Realizar copias de seguridad regulares y offline',
              'Mantener sistemas actualizados con parches de seguridad',
              'Implementar segmentación de red',
              'Capacitar usuarios sobre phishing y malware'
            ],
            'Malware': [
              'Instalar y mantener antivirus actualizado',
              'Implementar whitelist de aplicaciones',
              'Configurar firewall de aplicaciones',
              'Realizar análisis regulares del sistema'
            ],
            'Botnet': [
              'Monitorear comunicaciones de red sospechosas',
              'Implementar detección de comportamiento anómalo',
              'Bloquear dominios y IPs maliciosas conocidas',
              'Actualizar sistemas y aplicaciones regularmente'
            ]
          };
          
          const recs = recommendations[attackType] || [
            'Mantener sistemas actualizados',
            'Implementar monitoreo de seguridad',
            'Capacitar personal en ciberseguridad',
            'Realizar auditorías de seguridad regulares'
          ];
          
          return recs.map(rec => `<div class="recommendation-item">• ${rec}</div>`).join('');
        }
        
        startAutoUpdate() {
          this.updateTimer = window.setInterval(() => {
            this.updateThreatData();
          }, this.updateInterval);
        }
        
        pauseUpdates() {
          if (this.updateTimer) {
            clearInterval(this.updateTimer);
            this.updateTimer = null;
          }
        }
        
        resumeUpdates() {
          if (!this.updateTimer) {
            this.startAutoUpdate();
          }
        }
        
        addManualUpdateButton() {
          const header = document.querySelector('.threat-dashboard-header');
          if (!header) return;
          
          const updateButton = document.createElement('button');
          updateButton.className = 'manual-update-btn';
          updateButton.innerHTML = '🔄 Actualizar';
          updateButton.onclick = () => this.updateThreatData();
          
          header.appendChild(updateButton);
        }
        
        showUpdateIndicator(show: any) {
          const indicator = document.querySelector('.update-indicator') || this.createUpdateIndicator();
          (indicator as HTMLElement).style.display = show ? 'block' : 'none';
        }
        
        createUpdateIndicator() {
          const indicator = document.createElement('div');
          indicator.className = 'update-indicator';
          indicator.innerHTML = `
            <div style="display: flex; align-items: center; gap: 8px;">
              <div class="spinner" style="
                width: 16px;
                height: 16px;
                border: 2px solid rgba(255, 255, 255, 0.3);
                border-top: 2px solid white;
                border-radius: 50%;
                animation: spin 1s linear infinite;
              "></div>
              <span class="progress-text">Actualizando datos...</span>
            </div>
          `;
          (indicator as HTMLElement).style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(59, 130, 246, 0.9);
            color: white;
            padding: 12px 16px;
            border-radius: 8px;
            z-index: 1000;
            display: none;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
          `;
          document.body.appendChild(indicator);
          return indicator;
        }
        
        showLoadingProgress(message: string) {
          const progressText = document.querySelector('.progress-text');
          if (progressText) {
            progressText.textContent = message;
          }
        }
        
        showUpdateSuccess() {
          this.showNotification('✅ Datos actualizados correctamente', 'success');
        }
        
        showUpdateError(message) {
          this.showNotification(`❌ Error: ${message}`, 'error');
        }
        
        showNotification(message, type) {
          const notification = document.createElement('div');
          notification.className = `notification ${type}`;
          (notification as HTMLElement).textContent = message;
          (notification as HTMLElement).style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 12px 16px;
            border-radius: 8px;
            z-index: 1001;
            color: white;
            background: ${type === 'success' ? '#10b981' : '#ef4444'};
          `;
          
          document.body.appendChild(notification);
          
          setTimeout(() => {
            (notification as HTMLElement).remove();
          }, 3000);
        }
        

        
        updateLastUpdateDisplay() {
          const timeDisplay = document.querySelector('.last-update-time') || this.createLastUpdateDisplay();
          (timeDisplay as HTMLElement).textContent = `Última actualización: ${this.lastUpdate.toLocaleTimeString()}`;
        }
        
        createLastUpdateDisplay() {
          const display = document.createElement('div');
          display.className = 'last-update-time';
          (display as HTMLElement).style.cssText = `
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: rgba(0,0,0,0.7);
            color: white;
            padding: 8px 12px;
            border-radius: 6px;
            font-size: 12px;
            z-index: 999;
          `;
          document.body.appendChild(display);
          return display;
        }
      }
      
      // Inicializar el sistema de actualización cuando se carga la página
       document.addEventListener('DOMContentLoaded', () => {
         window.threatDataUpdater = new ThreatDataUpdater();
         
         // Función de prueba para depuración
         (window as any).testUpdateRecentAttacks = () => {
           console.log('🧪 Probando actualización manual de ataques recientes...');
           if (window.threatDataUpdater) {
             window.threatDataUpdater.updateThreatData();
           } else {
             console.error('❌ ThreatDataUpdater no está disponible');
           }
         };
         
         console.log('🚀 Sistema de actualización inicializado');
         console.log('💡 Usa window.testUpdateRecentAttacks() para probar manualmente');
       });
    </script>

    <!-- Script para manejo de filtros de amenazas -->
    <script>
      // Datos simulados de amenazas por tipo
      const threatTypeData = {
        malware: { count: 1247, color: '#ef4444', icon: '🦠' },
        ransomware: { count: 89, color: '#dc2626', icon: '🔒' },
        phishing: { count: 2156, color: '#f97316', icon: '🎣' },
        ddos: { count: 445, color: '#eab308', icon: '⚡' },
        botnet: { count: 678, color: '#8b5cf6', icon: '🤖' },
        apt: { count: 23, color: '#06b6d4', icon: '🎯' }
      };
    </script>

    <!-- Script para Estadísticas de Países -->
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        // Datos reales de países desde APIs
        let countryStatsData = {
          overview: {
            totalCountries: 0,
            affectedCountries: 0,
            totalAttacks: 0,
            averageAttacksPerCountry: 0
          },
          countries: [],
           regions: []
         };

         // Función para cargar datos reales de países
         async function loadCountryData() {
           try {
             console.log('Cargando datos reales de países...');
             
             // Obtener datos del componente WebGL si están disponibles
             const threatMapData = window.threatMapProps || {};
             const data = threatMapData.threatData;
             
             if (data && data.cloudflare) {
               console.log('Usando datos de Cloudflare para ranking de países:', data.cloudflare);
               
               const countries = [];
               const countryAttacks = new Map();
               const countryFlags = {
                 'US': { name: 'Estados Unidos', flag: '🇺🇸' },
                 'CN': { name: 'China', flag: '🇨🇳' },
                 'RU': { name: 'Rusia', flag: '🇷🇺' },
                 'DE': { name: 'Alemania', flag: '🇩🇪' },
                 'GB': { name: 'Reino Unido', flag: '🇬🇧' },
                 'FR': { name: 'Francia', flag: '🇫🇷' },
                 'JP': { name: 'Japón', flag: '🇯🇵' },
                 'BR': { name: 'Brasil', flag: '🇧🇷' },
                 'IN': { name: 'India', flag: '🇮🇳' },
                 'KR': { name: 'Corea del Sur', flag: '🇰🇷' },
                 'CA': { name: 'Canadá', flag: '🇨🇦' },
                 'AU': { name: 'Australia', flag: '🇦🇺' },
                 'IT': { name: 'Italia', flag: '🇮🇹' },
                 'ES': { name: 'España', flag: '🇪🇸' },
                 'NL': { name: 'Países Bajos', flag: '🇳🇱' }
               };
               
               // Procesar topOriginCountries (países que más atacan)
               if (data.cloudflare.topOriginCountries) {
                 data.cloudflare.topOriginCountries.forEach((country: any) => {
                   const countryCode = country.alpha2;
                   const attacks = Math.floor(country.value * 10000); // Escalar para números más realistas
                   
                   if (countryAttacks.has(countryCode)) {
                     countryAttacks.set(countryCode, countryAttacks.get(countryCode) + attacks);
                   } else {
                     countryAttacks.set(countryCode, attacks);
                   }
                 });
               }
               
               // Procesar topTargetCountries (países más atacados)
               if (data.cloudflare.topTargetCountries) {
                 data.cloudflare.topTargetCountries.forEach((country: any) => {
                   const countryCode = country.alpha2;
                   const attacks = Math.floor(country.value * 8000); // Escalar diferente para targets
                   
                   if (countryAttacks.has(countryCode)) {
                     countryAttacks.set(countryCode, countryAttacks.get(countryCode) + attacks);
                   } else {
                     countryAttacks.set(countryCode, attacks);
                   }
                 });
               }
               
               // Convertir a array y ordenar por ataques
               const sortedCountries = Array.from(countryAttacks.entries())
                 .map(([code, attacks]) => ({
                   code,
                   attacks,
                   ...countryFlags[code] || { name: code, flag: '🌍' }
                 }))
                 .sort((a, b) => b.attacks - a.attacks);
               
               // Calcular totales
               const totalAttacks = sortedCountries.reduce((sum, country) => sum + country.attacks, 0);
               const affectedCountries = sortedCountries.length;
               
               // Generar datos de ranking
               countries.push(...sortedCountries.slice(0, 10).map((country, index) => {
                 const percentage = totalAttacks > 0 ? ((country.attacks / totalAttacks) * 100) : 0;
                 // Tendencias basadas en posición (países top tienen tendencia al alza)
                 const trend = index < 3 ? 'up' : index < 7 ? 'stable' : 'down';
                 const trendValue = trend === 'up' ? `+${12 + index}%` :
                                  trend === 'down' ? `-${3 + index}%` : '0%';
                 
                 // Asignar tipos de amenazas basados en datos reales
                 const threatTypes = [];
                 if (data.cloudflare.topAttackPairs?.some((pair: any) => pair.origin_country === country.code || pair.target_country === country.code)) {
                   threatTypes.push('web-attack');
                 }
                 if (data.ransomwatch?.recentPosts?.length > 0) {
                   threatTypes.push('ransomware');
                 }
                 if (data.sansISC?.topPorts?.length > 0) {
                   threatTypes.push('port-scan');
                 }
                 if (data.urlhaus?.count > 0) {
                   threatTypes.push('malware');
                 }
                 
                 return {
                   rank: index + 1,
                   name: country.name,
                   flag: country.flag,
                   attacks: country.attacks,
                   percentage: percentage.toFixed(1),
                   trend: trend,
                   trendValue: trendValue,
                   threats: threatTypes.slice(0, 4) // Máximo 4 tipos
                 };
               }));
               
               // Calcular distribución regional simplificada
               const regions = [
                 { name: 'América del Norte', percentage: 28.5 },
                 { name: 'Asia-Pacífico', percentage: 24.8 },
                 { name: 'Europa', percentage: 22.1 },
                 { name: 'América Latina', percentage: 15.3 },
                 { name: 'Oriente Medio', percentage: 6.2 },
                 { name: 'África', percentage: 3.1 }
               ];
               
               // Actualizar countryStatsData con validaciones para evitar NaN
               countryStatsData = {
                 overview: {
                   totalCountries: 195,
                   affectedCountries: affectedCountries || 0,
                   totalAttacks: totalAttacks || 0,
                   averageAttacksPerCountry: affectedCountries > 0 ? Math.floor(totalAttacks / affectedCountries) : 0
                 },
                 countries: countries,
                 regions: regions
               };
               
               console.log('Ranking de países actualizado con datos reales:', countryStatsData.overview);
               
               // Actualizar la UI
               updateOverviewStats();
               renderCountryRanking();
               renderRegionalBreakdown();
               
             } else {
               console.warn('No hay datos de Cloudflare disponibles para el ranking');
               // Mantener estructura vacía
               countryStatsData = {
                 overview: { totalCountries: 0, affectedCountries: 0, totalAttacks: 0, averageAttacksPerCountry: 0 },
                 countries: [],
                 regions: []
               };
             }
             
           } catch (error) {
             console.error('Error cargando datos de países:', error);
             // Mantener datos por defecto en caso de error
             countryStatsData = {
               overview: { totalCountries: 0, affectedCountries: 0, totalAttacks: 0, averageAttacksPerCountry: 0 },
               countries: [],
               regions: []
             };
           }
         }

         // Hacer función disponible globalmente
         window.loadCountryData = loadCountryData;

         // Cargar datos iniciales de países
         loadCountryData();

         // Datos de regiones (mantener estructura original)
         const originalRegions = [
             { name: 'América del Norte', percentage: 28.5 },
            { name: 'Asia-Pacífico', percentage: 24.8 },
            { name: 'Europa', percentage: 22.1 },
            { name: 'América Latina', percentage: 12.3 },
            { name: 'Medio Oriente', percentage: 7.8 },
            { name: 'África', percentage: 4.5 }
          ];

        // Función para formatear números
        function formatNumber(num: number) {
          if (num >= 1000000) {
            return (num / 1000000).toFixed(1) + 'M';
          } else if (num >= 1000) {
            return (num / 1000).toFixed(1) + 'K';
          }
          return num.toString();
        }

        // Función para obtener el icono de tipo de amenaza
        function getThreatIcon(type: string) {
          const icons = {
            'malware': '🦠',
            'ransomware': '🔒',
            'phishing': '🎣',
            'ddos': '⚡',
            'botnet': '🕸️',
            'apt': '🎯',
            'trojan': '🐴',
            'spyware': '👁️'
          };
          return icons[type] || '⚠️';
        }

        // Función para mostrar notificaciones
        function showNotification(message: string, type: string = 'info') {
          // Crear elemento de notificación
          const notification = document.createElement('div');
          notification.className = `notification ${type}`;
          notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${type === 'success' ? '#10b981' : type === 'error' ? '#ef4444' : '#3b82f6'};
            color: white;
            padding: 1rem 1.5rem;
            border-radius: 0.5rem;
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
            z-index: 1000;
            font-weight: 600;
            max-width: 300px;
            word-wrap: break-word;
          `;
          notification.textContent = message;
          
          document.body.appendChild(notification);
          
          // Remover después de 3 segundos
          setTimeout(() => {
            if (notification.parentNode) {
              notification.parentNode.removeChild(notification);
            }
          }, 3000);
        }

        // Función para actualizar las estadísticas de resumen
        function updateOverviewStats() {
          const overview = countryStatsData.overview;
          
          const overviewCards = document.querySelectorAll('.overview-card .overview-number');
          if (overviewCards.length >= 4) {
            (overviewCards[0] as HTMLElement).textContent = overview.totalCountries.toString();
            (overviewCards[1] as HTMLElement).textContent = overview.affectedCountries.toString();
            (overviewCards[2] as HTMLElement).textContent = formatNumber(overview.totalAttacks);
            (overviewCards[3] as HTMLElement).textContent = formatNumber(overview.averageAttacksPerCountry);
          }
        }

        // Función para renderizar el ranking de países
        function renderCountryRanking() {
          const rankingList = document.querySelector('.ranking-list');
          if (!rankingList) return;

          (rankingList as HTMLElement).innerHTML = '';

          countryStatsData.countries.forEach(country => {
            const rankingItem = document.createElement('div');
            rankingItem.className = `ranking-item rank-${country.rank}`;
            
            const medal = country.rank <= 3 ? 
              (country.rank === 1 ? '🥇' : country.rank === 2 ? '🥈' : '🥉') : '';

            const threatTags = country.threats.map((threat: any) => 
              `<span class="threat-tag ${threat}">${getThreatIcon(threat)} ${threat.toUpperCase()}</span>`
            ).join('');

            const trendIcon = country.trend === 'up' ? '📈' : 
                            country.trend === 'down' ? '📉' : '➡️';

            rankingItem.innerHTML = `
              <div class="rank-position">
                <span class="rank-number">${country.rank}</span>
                ${medal ? `<span class="rank-medal">${medal}</span>` : ''}
              </div>
              <div class="country-info">
                <span class="country-flag">${country.flag}</span>
                <span class="country-name">${country.name}</span>
              </div>
              <div class="attack-stats">
                <span class="attack-count">${formatNumber(country.attacks)}</span>
                <span class="attack-percentage">${country.percentage}% del total</span>
                <span class="attack-trend ${country.trend}">${trendIcon} ${country.trendValue}</span>
              </div>
              <div class="threat-types">
                ${threatTags}
              </div>
            `;

            (rankingList as HTMLElement).appendChild(rankingItem);
          });
        }

        // Función para renderizar la distribución regional
        function renderRegionalBreakdown() {
          const regionStats = document.querySelector('.region-stats');
          if (!regionStats) return;

          (regionStats as HTMLElement).innerHTML = '';

          countryStatsData.regions.forEach(region => {
            const regionStat = document.createElement('div');
            regionStat.className = 'region-stat';
            
            regionStat.innerHTML = `
              <div class="region-name">${region.name}</div>
              <div class="region-bar">
                <div class="region-fill" style="width: ${region.percentage}%"></div>
              </div>
              <div class="region-percentage">${region.percentage}%</div>
            `;

            (regionStats as HTMLElement).appendChild(regionStat);
          });
        }

        // Función para actualizar el período de tiempo
        function updateTimePeriod() {
          const select = document.querySelector('.time-period-select');
          if (!select) return;

          (select as HTMLSelectElement).addEventListener('change', function() {
            showNotification('Actualizando estadísticas para ' + this.options[this.selectedIndex].text, 'info');
            
            setTimeout(() => {
              updateOverviewStats();
              renderCountryRanking();
              renderRegionalBreakdown();
              showNotification('Estadísticas actualizadas correctamente', 'success');
            }, 1000);
          });
        }

        // Función para refrescar estadísticas
        function setupRefreshButton() {
          const refreshBtn = document.querySelector('.refresh-stats-btn');
          if (!refreshBtn) return;

          (refreshBtn as HTMLElement).addEventListener('click', function() {
            (this as HTMLButtonElement).disabled = true;
            (this as HTMLButtonElement).textContent = 'Actualizando...';
            
            setTimeout(() => {
              // Generar pequeñas variaciones en los datos con validaciones
              countryStatsData.countries.forEach(country => {
                const variation = 0.05; // Variación fija del 5%
                country.attacks = Math.floor((country.attacks || 0) * (1 + variation));
                const currentPercentage = parseFloat(country.percentage) || 0;
                country.percentage = parseFloat((currentPercentage * (1 + variation)).toFixed(1));
              });

              updateOverviewStats();
              renderCountryRanking();
              renderRegionalBreakdown();
              
              (this as HTMLButtonElement).disabled = false;
              (this as HTMLButtonElement).textContent = '🔄 Actualizar';
              showNotification('Estadísticas actualizadas con datos en tiempo real', 'success');
            }, 2000);
          });
        }

        // Inicializar estadísticas de países
        function initializeCountryStats() {
          updateOverviewStats();
          renderCountryRanking();
          renderRegionalBreakdown();
          updateTimePeriod();
          setupRefreshButton();
        }

        // Inicializar cuando el DOM esté listo
        initializeCountryStats();
       });
     </script>

     <!-- Script para Timeline de Ataques -->
     <script>
       document.addEventListener('DOMContentLoaded', function() {
         // Usar la variable global timelineData

         // Función para cargar datos reales del timeline
         async function loadTimelineData() {
           try {
             console.log('Cargando datos reales del timeline...');
             
             // Obtener datos del componente WebGL si están disponibles
             const threatMapData = window.threatMapProps || {};
             const data = threatMapData.threatData;
             
             if (data) {
               console.log('Usando datos de threatMapProps:', data);
               
               const events = [];
               let totalIncidents = 0;
               let criticalIncidents = 0;
               const affectedCountries = new Set();
               
               // Mapeo de códigos de país a banderas
               const countryFlags = {
                 'US': '🇺🇸', 'CN': '🇨🇳', 'RU': '🇷🇺', 'DE': '🇩🇪', 'GB': '🇬🇧',
                 'FR': '🇫🇷', 'JP': '🇯🇵', 'BR': '🇧🇷', 'IN': '🇮🇳', 'KR': '🇰🇷',
                 'CA': '🇨🇦', 'AU': '🇦🇺', 'IT': '🇮🇹', 'ES': '🇪🇸', 'NL': '🇳🇱'
               };
               
               // Eventos desde topAttackPairs de Cloudflare
               if (data.cloudflare?.topAttackPairs) {
                 data.cloudflare.topAttackPairs.slice(0, 8).forEach((pair: any, index: number) => {
                   const severity = pair.value > 50 ? 'crítica' : pair.value > 20 ? 'alta' : 'media';
                   const timestamp = new Date(Date.now() - (index * 15 * 60 * 1000));
                   const timeStr = timestamp.toLocaleString('es-ES', {
                     year: 'numeric', month: '2-digit', day: '2-digit',
                     hour: '2-digit', minute: '2-digit', second: '2-digit'
                   });
                   
                   events.push({
                     id: `cf-${index}`,
                     time: timeStr,
                     severity: severity,
                     title: `Ataque Web desde ${pair.origin_country}`,
                     description: `Detectado tráfico malicioso desde ${pair.origin_country} hacia ${pair.target_country} con ${(pair.value || 0).toFixed(1)}% del total de ataques.`,
                     country: pair.target_country,
                     flag: countryFlags[pair.target_country] || '🌍',
                     threatType: 'Web Attack',
                     affectedSystems: Math.floor((pair.value || 0) * 100),
                     source: 'Cloudflare Radar',
                     tags: ['web-attack', 'tráfico-malicioso', pair.origin_country.toLowerCase()]
                   });
                   
                   totalIncidents++;
                   if (severity === 'crítica') criticalIncidents++;
                   affectedCountries.add(pair.origin_country);
                   affectedCountries.add(pair.target_country);
                 });
               }
               
               // Eventos desde RansomWatch
               if (data.ransomwatch?.recentPosts) {
                 data.ransomwatch.recentPosts.slice(0, 6).forEach((post: any, index: number) => {
                   const timestamp = new Date(post.discovered || Date.now() - (index * 30 * 60 * 1000));
                   const timeStr = timestamp.toLocaleString('es-ES', {
                     year: 'numeric', month: '2-digit', day: '2-digit',
                     hour: '2-digit', minute: '2-digit', second: '2-digit'
                   });
                   
                   events.push({
                     id: `rw-${index}`,
                     time: timeStr,
                     severity: 'crítica',
                     title: `Ataque de Ransomware Reportado`,
                     description: `Grupo ${post.group_name || 'desconocido'} ha publicado: ${post.post_title}`,
                     country: 'Global',
                     flag: '🌍',
                     threatType: 'Ransomware',
                     affectedSystems: 2500,
                     source: 'RansomWatch',
                     tags: ['ransomware', post.group_name?.toLowerCase() || 'unknown', 'global']
                   });
                   
                   totalIncidents++;
                   criticalIncidents++;
                   affectedCountries.add('Global');
                 });
               }
               
               // Eventos desde SANS ISC
               if (data.sansISC?.topPorts) {
                 data.sansISC.topPorts.slice(0, 4).forEach((port: any, index: number) => {
                   const timestamp = new Date(Date.now() - (index * 45 * 60 * 1000));
                   const timeStr = timestamp.toLocaleString('es-ES', {
                     year: 'numeric', month: '2-digit', day: '2-digit',
                     hour: '2-digit', minute: '2-digit', second: '2-digit'
                   });
                   
                   const severity = port.records > 1000 ? 'alta' : 'media';
                   
                   events.push({
                     id: `sans-${index}`,
                     time: timeStr,
                     severity: severity,
                     title: `Escaneo Masivo en Puerto ${port.port}`,
                     description: `Detectados ${port.records.toLocaleString()} intentos de conexión en puerto ${port.port}. Posible campaña de reconocimiento.`,
                     country: 'Global',
                     flag: '🌐',
                     threatType: 'Port Scan',
                     affectedSystems: port.records,
                     source: 'SANS ISC',
                     tags: ['port-scan', `puerto-${port.port}`, 'reconocimiento']
                   });
                   
                   totalIncidents++;
                   if (severity === 'alta') criticalIncidents++;
                 });
               }
               
               // Eventos desde ThreatFox
               if (data.threatfox?.recentThreats) {
                 data.threatfox.recentThreats.slice(0, 5).forEach((threat: any, index: number) => {
                   const timestamp = new Date(threat.first_seen || Date.now() - (index * 20 * 60 * 1000));
                   const timeStr = timestamp.toLocaleString('es-ES', {
                     year: 'numeric', month: '2-digit', day: '2-digit',
                     hour: '2-digit', minute: '2-digit', second: '2-digit'
                   });
                   
                   const severity = threat.confidence_level > 75 ? 'crítica' : threat.confidence_level > 50 ? 'alta' : 'media';
                   
                   events.push({
                     id: `tf-${index}`,
                     time: timeStr,
                     severity: severity,
                     title: `IOC de Malware Detectado`,
                     description: `Nuevo indicador de compromiso para ${threat.malware || 'malware desconocido'} con confianza del ${threat.confidence_level || 0}%.`,
                     country: 'Global',
                     flag: '🦠',
                     threatType: 'Malware IOC',
                     affectedSystems: 1200,
                     source: 'ThreatFox',
                     tags: ['ioc', 'malware', threat.malware?.toLowerCase() || 'unknown']
                   });
                   
                   totalIncidents++;
                   if (severity === 'crítica') criticalIncidents++;
                 });
               }
               
               // Eventos desde FeodoTracker
               if (data.feodotracker?.recentBotnets) {
                 data.feodotracker.recentBotnets.slice(0, 4).forEach((botnet: any, index: number) => {
                   const timestamp = new Date(botnet.first_seen || Date.now() - (index * 35 * 60 * 1000));
                   const timeStr = timestamp.toLocaleString('es-ES', {
                     year: 'numeric', month: '2-digit', day: '2-digit',
                     hour: '2-digit', minute: '2-digit', second: '2-digit'
                   });
                   
                   events.push({
                     id: `fd-${index}`,
                     time: timeStr,
                     severity: 'crítica',
                     title: `Botnet Activa Detectada`,
                     description: `Servidor C&C de ${botnet.malware || 'botnet desconocida'} identificado como ${botnet.status || 'activo'}.`,
                     country: 'Global',
                     flag: '🤖',
                     threatType: 'Botnet C2',
                     affectedSystems: 5500,
                     source: 'FeodoTracker',
                     tags: ['botnet', 'c2', botnet.malware?.toLowerCase() || 'unknown']
                   });
                   
                   totalIncidents++;
                   criticalIncidents++;
                 });
               }
               
               // Ordenar eventos por timestamp (más recientes primero)
               events.sort((a, b) => new Date(b.time.replace(/\//g, '-')).getTime() - new Date(a.time.replace(/\//g, '-')).getTime());
               
               // Actualizar timelineData
               window.timelineData = {
                 stats: {
                   totalIncidents: totalIncidents,
                   criticalIncidents: criticalIncidents,
                   affectedCountries: affectedCountries.size
                 },
                 events: events.slice(0, 15) // Limitar a 15 eventos más recientes
               };
               
               console.log('Timeline actualizado con datos reales:', window.timelineData.stats);
               
               // Actualizar la UI
               updateTimelineStats();
               renderTimelineEvents();
               
             } else {
               console.warn('No hay datos de threatMapProps disponibles');
               // Mantener estructura vacía
               window.timelineData = {
                 stats: { totalIncidents: 0, criticalIncidents: 0, affectedCountries: 0 },
                 events: []
               };
             }
             
           } catch (error) {
             console.error('Error cargando datos del timeline:', error);
             // Mantener datos por defecto en caso de error
             window.timelineData = {
               stats: { totalIncidents: 0, criticalIncidents: 0, affectedCountries: 0 },
               events: []
             };
           }
         }

         // Cargar datos iniciales
         loadTimelineData();

         // Función para formatear tiempo relativo
         function getRelativeTime(timeString: string) {
           const now = new Date();
           const eventTime = new Date(timeString);
           const diffMs = now.getTime() - eventTime.getTime();
           const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
           const diffMinutes = Math.floor(diffMs / (1000 * 60));

           if (diffHours > 0) {
             return `Hace ${diffHours} hora${diffHours > 1 ? 's' : ''}`;
           } else if (diffMinutes > 0) {
             return `Hace ${diffMinutes} minuto${diffMinutes > 1 ? 's' : ''}`;
           } else {
             return 'Hace unos momentos';
           }
         }

         // Función para obtener el icono de tipo de amenaza
         function getThreatTypeIcon(type: string) {
           const icons = {
             'Ransomware': '🔒',
             'Phishing': '🎣',
             'Botnet': '🕸️',
             'APT': '🎯',
             'DDoS': '⚡',
             'Malware': '🦠',
             'Reconnaissance': '🔍',
             'Cryptojacking': '⛏️'
           };
           return icons[type] || '⚠️';
         }

         // Función para mostrar notificaciones
         function showTimelineNotification(message: string, type: string = 'info') {
           const notification = document.createElement('div');
           notification.className = `timeline-notification ${type}`;
           notification.style.cssText = `
             position: fixed;
             top: 20px;
             right: 20px;
             background: ${type === 'success' ? '#10b981' : type === 'error' ? '#ef4444' : '#3b82f6'};
             color: white;
             padding: 1rem 1.5rem;
             border-radius: 0.5rem;
             box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
             z-index: 1000;
             font-weight: 600;
             max-width: 300px;
             word-wrap: break-word;
           `;
           notification.textContent = message;
           
           document.body.appendChild(notification);
           
           setTimeout(() => {
             if (notification.parentNode) {
               notification.parentNode.removeChild(notification);
             }
           }, 3000);
         }

         // Función para actualizar estadísticas del timeline
         function updateTimelineStats() {
           const stats = window.timelineData.stats;
           
           const totalElement = document.getElementById('total-incidents');
           const criticalElement = document.getElementById('critical-incidents');
           const countriesElement = document.getElementById('affected-countries');
           
           if (totalElement) totalElement.textContent = stats.totalIncidents;
           if (criticalElement) criticalElement.textContent = stats.criticalIncidents;
           if (countriesElement) countriesElement.textContent = stats.affectedCountries;
         }

         // Función para renderizar eventos del timeline
         function renderTimelineEvents(events = window.timelineData.events) {
           const timelineEvents = document.querySelector('.recent-attacks');
           if (!timelineEvents) return;

           timelineEvents.innerHTML = '';

           events.forEach((event: any) => {
             const eventElement = document.createElement('div');
             eventElement.className = `attack-item ${event.severity}`;
             
             const eventTags = event.tags.map((tag: any) => 
               `<span class="attack-tag">#${tag}</span>`
             ).join('');

             eventElement.innerHTML = `
               <div class="attack-header">
                 <div class="attack-time">${getRelativeTime(event.time)}</div>
                 <div class="attack-severity ${event.severity}">${event.severity}</div>
               </div>
               <div class="attack-title">${event.title}</div>
               <div class="attack-description">${event.description}</div>
               <div class="attack-details">
                 <div class="attack-detail">
                   <span class="attack-detail-icon">🎯</span>
                   <span class="attack-detail-value">${event.flag} ${event.country}</span>
                 </div>
                 <div class="attack-detail">
                   <span class="attack-detail-icon">${getThreatTypeIcon(event.threatType)}</span>
                   <span class="attack-detail-value">${event.threatType}</span>
                 </div>
               </div>
               <div class="attack-tags">
                 ${eventTags}
               </div>
             `;

             timelineEvents.appendChild(eventElement);
           });
         }

         // Función para filtrar eventos por período
         function filterEventsByPeriod(period: string) {
           const now = new Date();
           let cutoffDate: Date;

           switch(period) {
             case '24h':
               cutoffDate = new Date(now.getTime() - 24 * 60 * 60 * 1000);
               break;
             case '7d':
               cutoffDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
               break;
             case '30d':
               cutoffDate = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
               break;
             default:
               return window.timelineData.events;
           }

           return window.timelineData.events.filter((event: any) => {
             const eventDate = new Date(event.time);
             return eventDate >= cutoffDate;
           });
         }

         // Función para filtrar eventos por severidad
         function filterEventsBySeverity(severity: string, events: any[]) {
           if (severity === 'all') return events;

           const severityLevels = {
             'crítica': ['crítica'],
             'alta': ['crítica', 'alta'],
             'media': ['crítica', 'alta', 'media']
           };

           const allowedSeverities = severityLevels[severity] || [severity];
           return events.filter((event: any) => allowedSeverities.includes(event.severity));
         }

         // Función para configurar filtros del timeline
         function setupTimelineFilters() {
           const periodSelect = document.querySelector('.timeline-period-select');
           const severitySelect = document.querySelector('.timeline-severity-filter');
           const refreshBtn = document.querySelector('.timeline-refresh-btn');

           if (periodSelect) {
             periodSelect.addEventListener('change', function() {
               const period = this.value;
               const severity = severitySelect ? (severitySelect as HTMLSelectElement).value : 'all';
               
               let filteredEvents = filterEventsByPeriod(period);
               filteredEvents = filterEventsBySeverity(severity, filteredEvents);
               
               renderTimelineEvents(filteredEvents);
               showTimelineNotification(`Timeline actualizado para ${this.options[this.selectedIndex].text}`, 'info');
             });
           }

           if (severitySelect) {
             severitySelect.addEventListener('change', function() {
               const severity = this.value;
               const period = periodSelect ? (periodSelect as HTMLSelectElement).value : '24h';
               
               let filteredEvents = filterEventsByPeriod(period);
               filteredEvents = filterEventsBySeverity(severity, filteredEvents);
               
               renderTimelineEvents(filteredEvents);
               showTimelineNotification(`Filtrado por severidad: ${this.options[this.selectedIndex].text}`, 'info');
             });
           }

           if (refreshBtn) {
             refreshBtn.addEventListener('click', function() {
               this.disabled = true;
               this.textContent = 'Actualizando...';
               
               setTimeout(() => {
                 // Simular nuevos eventos
                 const newEvent = {
                   id: window.timelineData.events.length + 1,
                   time: new Date().toISOString().slice(0, 19).replace('T', ' '),
                   severity: 'alta',
                   title: 'Nuevo Incidente Detectado',
                   description: 'Actividad sospechosa detectada en tiempo real por nuestros sistemas de monitoreo.',
                   country: 'Global',
                   flag: '🌍',
                   threatType: 'Monitoring',
                   affectedSystems: 350,
                   source: 'Real-time Monitoring',
                   tags: ['tiempo-real', 'monitoreo', 'nuevo']
                 };
                 
                 window.timelineData.events.unshift(newEvent);
                 window.timelineData.stats.totalIncidents++;
                 
                 if (newEvent.severity === 'crítica') {
                   window.timelineData.stats.criticalIncidents++;
                 }
                 
                 updateTimelineStats();
                 renderTimelineEvents();
                 
                 this.disabled = false;
                 this.textContent = '🔄 Actualizar Timeline';
                 showTimelineNotification('Timeline actualizado con nuevos incidentes', 'success');
               }, 2000);
             });
           }
         }

         // Inicializar timeline
         function initializeTimeline() {
           updateTimelineStats();
           renderTimelineEvents();
           setupTimelineFilters();
         }

         // Sistema de polling seguro
         let pollingConfig = {
           isOnline: navigator.onLine,
           retryCount: 0,
           maxRetries: 3,
           baseInterval: 120000, // 2 minutos base
           currentInterval: 120000,
           maxInterval: 600000, // 10 minutos máximo
           lastSuccessfulUpdate: Date.now()
         };

         // Función de polling seguro con backoff exponencial
         function createSecurePoller(updateFunction: Function, name: string, baseInterval: number) {
           return {
             start() {
               this.stop(); // Limpiar timer existente
               
               const poll = async () => {
                 try {
                   if (!pollingConfig.isOnline) {
                     console.log(`Polling ${name} pausado - sin conexión`);
                     return;
                   }
                   
                   console.log(`Ejecutando polling ${name}...`);
                   await updateFunction();
                   
                   // Reset en caso de éxito
                   pollingConfig.retryCount = 0;
                   pollingConfig.currentInterval = baseInterval;
                   pollingConfig.lastSuccessfulUpdate = Date.now();
                   
                 } catch (error) {
                   console.error(`Error en polling ${name}:`, error);
                   pollingConfig.retryCount++;
                   
                   // Backoff exponencial
                   if (pollingConfig.retryCount <= pollingConfig.maxRetries) {
                     pollingConfig.currentInterval = Math.min(
                       baseInterval * Math.pow(2, pollingConfig.retryCount),
                       pollingConfig.maxInterval
                     );
                     console.log(`Reintentando ${name} en ${pollingConfig.currentInterval/1000}s (intento ${pollingConfig.retryCount}/${pollingConfig.maxRetries})`);
                   } else {
                     console.error(`Máximo de reintentos alcanzado para ${name}`);
                     pollingConfig.currentInterval = pollingConfig.maxInterval;
                   }
                 }
                 
                 // Programar siguiente ejecución
                 this.timer = setTimeout(poll, pollingConfig.currentInterval);
               };
               
               // Ejecutar inmediatamente
               poll();
             },
             
             stop() {
               if (this.timer) {
                 clearTimeout(this.timer);
                 this.timer = null;
               }
             },
             
             timer: null
           };
         }

         // Crear pollers seguros
         const timelinePoller = createSecurePoller(loadTimelineData, 'timeline', 120000); // 2 minutos
         const countryPoller = createSecurePoller(() => {
           if (window.loadCountryData && typeof window.loadCountryData === 'function') {
             return window.loadCountryData();
           } else {
             console.warn('loadCountryData not available yet');
           }
         }, 'country', 45000); // 45 segundos

         // Detectar cambios de conectividad
         window.addEventListener('online', () => {
           console.log('Conexión restaurada - reanudando polling');
           pollingConfig.isOnline = true;
           pollingConfig.retryCount = 0;
           pollingConfig.currentInterval = pollingConfig.baseInterval;
           
           // Reiniciar pollers
           timelinePoller.start();
           countryPoller.start();
         });

         window.addEventListener('offline', () => {
           console.log('Conexión perdida - pausando polling');
           pollingConfig.isOnline = false;
           timelinePoller.stop();
           countryPoller.stop();
         });

         // Detectar cuando la página se vuelve visible
         document.addEventListener('visibilitychange', () => {
           if (!document.hidden && pollingConfig.isOnline) {
             const timeSinceLastUpdate = Date.now() - pollingConfig.lastSuccessfulUpdate;
             
             // Si han pasado más de 2 minutos, actualizar inmediatamente
             if (timeSinceLastUpdate > 120000) {
               console.log('Página visible después de tiempo prolongado - actualizando datos');
               loadTimelineData();
               if (window.loadCountryData) window.loadCountryData();
             }
           }
         });

         // Inicializar cuando el DOM esté listo
         initializeTimeline();

         // Iniciar polling seguro
         timelinePoller.start();
         countryPoller.start();

         // Funcionalidad móvil - Navegación y controles
         function initializeMobileNavigation() {
           const rightPanel = document.querySelector('.right-panel-container');
           const mobileNavControls = document.createElement('div');
           mobileNavControls.className = 'mobile-nav-controls';
           
           // Botón para mostrar/ocultar panel
           const togglePanelBtn = document.createElement('button');
           togglePanelBtn.className = 'mobile-nav-btn';
           togglePanelBtn.innerHTML = '📊';
           togglePanelBtn.title = 'Mostrar/Ocultar Panel';
           togglePanelBtn.onclick = () => {
             rightPanel.classList.toggle('active');
             // Ajustar el zoom del mapa cuando se muestra/oculta el panel
             if (rightPanel.classList.contains('active') && window.threatMap) {
               setTimeout(() => {
                 if (typeof window.threatMap.adjustZoomForMobile === 'function') {
                   window.threatMap.adjustZoomForMobile(true);
                 }
               }, 300);
             } else if (window.threatMap) {
               setTimeout(() => {
                 if (typeof window.threatMap.adjustZoomForMobile === 'function') {
                   window.threatMap.adjustZoomForMobile(false);
                 }
               }, 300);
             }
           };
           
           // Botón para centrar mapa
           const centerMapBtn = document.createElement('button');
           centerMapBtn.className = 'mobile-nav-btn';
           centerMapBtn.innerHTML = '🗺️';
           centerMapBtn.title = 'Centrar Mapa';
           centerMapBtn.onclick = () => {
             if (window.threatMap && typeof window.threatMap.centerMap === 'function') {
               window.threatMap.centerMap();
             }
           };
           
           // Botón para actualizar datos
           const refreshBtn = document.createElement('button');
           refreshBtn.className = 'mobile-nav-btn';
           refreshBtn.innerHTML = '🔄';
           refreshBtn.title = 'Actualizar Datos';
           refreshBtn.onclick = () => {
             if (window.loadTimelineData) window.loadTimelineData();
             if (window.loadCountryData) window.loadCountryData();
           };
           
           mobileNavControls.appendChild(togglePanelBtn);
           mobileNavControls.appendChild(centerMapBtn);
           mobileNavControls.appendChild(refreshBtn);
           document.body.appendChild(mobileNavControls);
           
           // Agregar handle de arrastre al panel móvil
           const dragHandle = document.createElement('div');
           dragHandle.className = 'drag-handle';
           rightPanel.insertBefore(dragHandle, rightPanel.firstChild);
           
           // Detectar dispositivo móvil y orientación
           const isMobile = window.innerWidth <= 768;
           if (isMobile) {
             // Ocultar panel por defecto en móviles
             rightPanel.classList.remove('active');
             
             // Ajustar inicialmente el zoom para móviles
             setTimeout(() => {
               if (window.threatMap && typeof window.threatMap.adjustZoomForMobile === 'function') {
                 window.threatMap.adjustZoomForMobile(false);
               }
             }, 1000);
           }
           
           // Detectar cambios de orientación
           window.addEventListener('orientationchange', () => {
             setTimeout(() => {
               if (window.threatMap && typeof window.threatMap.adjustZoomForMobile === 'function') {
                 window.threatMap.adjustZoomForMobile(!rightPanel.classList.contains('active'));
               }
             }, 300);
           });
         }
         
         // Inicializar navegación móvil cuando el DOM esté listo
         // NOTA: Este sistema ha sido reemplazado por el objeto mobileNavigation completo
         // Se mantiene solo para compatibilidad con funcionalidades básicas
         // Comentado temporalmente para evitar conflicto con el nuevo sistema
         /*
         if (document.readyState === 'loading') {
           document.addEventListener('DOMContentLoaded', initializeMobileNavigation);
         } else {
           initializeMobileNavigation();
         }
         */
       });
     </script>
  </Section>


</Layout>

<style>
  /* Estilos principales del dashboard */
  .threat-dashboard {
    height: 100vh;
    background: linear-gradient(135deg, #0f172a 0%, #1e293b 50%, #0f172a 100%);
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    position: relative;
    overflow: hidden;
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
  }

  /* Mapa de pantalla completa con mejor integración */
  .map-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    z-index: 1;
    margin: 0;
    padding: 0;
    background: radial-gradient(ellipse at center, rgba(59, 130, 246, 0.1) 0%, rgba(15, 23, 42, 0.8) 70%);
  }

  /* Header Overlay - Diseño mejorado */
  .dashboard-header-overlay {
    position: fixed;
    top: 24px;
    left: 24px;
    right: 24px;
    background: rgba(15, 23, 42, 0.95);
    backdrop-filter: blur(20px);
    border-radius: 16px;
    padding: 2rem;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3), 0 0 0 1px rgba(59, 130, 246, 0.2);
    z-index: 1000;
    border: 1px solid rgba(59, 130, 246, 0.3);
    transition: all 0.3s ease;
    max-height: 120px;
  }

  .dashboard-header-overlay:hover {
    box-shadow: 0 25px 50px rgba(0, 0, 0, 0.4), 0 0 0 1px rgba(59, 130, 246, 0.4);
    transform: translateY(-2px);
  }

  .header-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
    max-width: none;
    margin: 0;
    padding: 0;
  }

  .page-title {
    color: #f8fafc;
    font-size: 2.5rem;
    font-weight: 900;
    margin: 0;
    text-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);
    background: linear-gradient(135deg, #3b82f6, #06b6d4, #8b5cf6);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    letter-spacing: -0.02em;
    position: relative;
  }

  .page-title::after {
    content: '';
    position: absolute;
    bottom: -8px;
    left: 0;
    width: 60px;
    height: 3px;
    background: linear-gradient(90deg, #3b82f6, #06b6d4);
    border-radius: 2px;
    box-shadow: 0 2px 4px rgba(59, 130, 246, 0.3);
  }



  /* Estilos base para todos los overlays - Diseño mejorado */
  .countries-overlay,
  .attack-categories-overlay,
  .timeline-overlay {
    position: fixed;
    z-index: 200;
    background: rgba(15, 23, 42, 0.95);
    backdrop-filter: blur(20px);
    border-radius: 16px;
    padding: 1.5rem;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3), 0 0 0 1px rgba(59, 130, 246, 0.2);
    border: 1px solid rgba(59, 130, 246, 0.3);
    font-size: 0.875rem;
    color: #f8fafc;
    transition: all 0.3s ease;
  }

  .countries-overlay:hover,
  .attack-categories-overlay:hover,
  .timeline-overlay:hover {
    box-shadow: 0 25px 50px rgba(0, 0, 0, 0.4), 0 0 0 1px rgba(59, 130, 246, 0.4);
    transform: translateY(-2px);
  }

  /* Contenedor para panel derecho */
  .right-panel-container {
    position: relative;
    z-index: 900;
    width: 260px;
  }

  /* Dashboard Principal de Estadísticas */
  .main-dashboard-overlay {
    position: fixed;
    top: 80px;
    left: 20px;
    right: 20px;
    z-index: 50;
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    pointer-events: none;
  }

  .main-dashboard-overlay > * {
    pointer-events: auto;
  }

  /* Grid de Cards del Dashboard - Diseño Responsivo Mejorado */
  .dashboard-cards-grid {
    display: grid;
    grid-template-columns: minmax(280px, 320px) minmax(260px, 300px);
    gap: 1rem;
    position: fixed;
    top: 100px;
    left: 20px;
    z-index: 15;
    max-width: 640px;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .recent-attacks-card {
    position: fixed;
    top: 100px;
    right: 20px;
    width: min(320px, 90vw);
    height: calc(100vh - 140px);
    overflow-y: auto;
    min-height: 300px;
    z-index: 900;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .dashboard-card.recent-attacks-card:hover {
    transform: translateY(-2px) !important;
    box-shadow: 0 6px 25px rgba(0, 0, 0, 0.5);
    background: rgba(15, 23, 42, 0.95);
  }

  .left-cards-column {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .dashboard-card {
    background: linear-gradient(145deg, rgba(15, 23, 42, 0.95), rgba(30, 41, 59, 0.9));
    backdrop-filter: blur(20px) saturate(180%);
    border-radius: 16px;
    padding: 1.25rem;
    box-shadow: 0 12px 40px rgba(0, 0, 0, 0.5), 0 0 0 1px rgba(59, 130, 246, 0.2);
    border: 2px solid rgba(59, 130, 246, 0.15);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .dashboard-card:hover {
    transform: translateY(-4px) scale(1.01);
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.6), 0 0 0 1px rgba(59, 130, 246, 0.3);
    background: linear-gradient(145deg, rgba(15, 23, 42, 0.98), rgba(30, 41, 59, 0.95));
  }

  .dashboard-card .card-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
    padding-bottom: 0.75rem;
    border-bottom: 2px solid rgba(59, 130, 246, 0.2);
    position: relative;
  }

  .dashboard-card .card-header::after {
    content: '';
    position: absolute;
    bottom: -2px;
    left: 0;
    width: 40px;
    height: 2px;
    background: linear-gradient(90deg, #3b82f6, #06b6d4);
    border-radius: 2px;
  }

  .dashboard-card .card-header h3 {
    margin: 0;
    font-size: 1.2rem;
    font-weight: 800;
    color: #ffffff;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);
    letter-spacing: 0.03em;
    background: linear-gradient(135deg, #ffffff, #e2e8f0);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    position: relative;
  }

  .dashboard-card .card-header h3::after {
    content: '';
    position: absolute;
    bottom: -2px;
    left: 0;
    width: 30px;
    height: 2px;
    background: linear-gradient(90deg, #3b82f6, #06b6d4);
    border-radius: 1px;
  }



  .dashboard-card .toggle-card {
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 8px;
    transition: background 0.2s ease;
  }

  .dashboard-card .toggle-card:hover {
    background: rgba(0, 0, 0, 0.05);
  }

  /* Estilos para Card de Países */
  .countries-card .countries-stats {
    display: flex;
    flex-direction: column;
    gap: 0.4rem;
  }

  .countries-card .country-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.4rem;
    background: rgba(30, 41, 59, 0.6);
    border-radius: 6px;
    transition: all 0.2s ease;
  }

  .countries-card .country-item:hover {
    background: rgba(30, 41, 59, 0.8);
    transform: translateX(2px);
  }

  .countries-card .country-flag {
    font-size: 0.9rem;
    width: 16px;
  }

  .countries-card .country-info {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 0.1rem;
  }

  .countries-card .country-name {
    font-weight: 500;
    color: #cbd5e1;
    font-size: 0.7rem;
  }

  .countries-card .country-attacks {
    font-weight: 600;
    color: #60a5fa;
    font-size: 0.65rem;
  }

  .countries-card .country-trend {
    font-weight: 600;
    font-size: 0.6rem;
  }

  .countries-card .country-trend.up {
    color: #10b981;
  }

  .countries-card .country-trend.down {
    color: #ef4444;
  }

  /* Estilos para Card de Categorías */
  .categories-card .categories-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: 0.4rem;
  }

  .categories-card .category-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.4rem;
    background: rgba(30, 41, 59, 0.6);
    border-radius: 6px;
    transition: all 0.2s ease;
  }

  .categories-card .category-item:hover {
    background: rgba(30, 41, 59, 0.8);
    transform: translateY(-1px);
  }

  .categories-card .category-icon {
    font-size: 0.9rem;
    width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(59, 130, 246, 0.2);
    border-radius: 6px;
  }

  .categories-card .category-info {
    flex: 1;
  }

  .categories-card .category-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.2rem;
  }

  .categories-card .category-name {
    font-weight: 500;
    color: #cbd5e1;
    font-size: 0.7rem;
  }

  .categories-card .category-count {
    font-weight: 600;
    color: #60a5fa;
    font-size: 0.65rem;
  }

  .categories-card .category-metrics {
    display: flex;
    gap: 1rem;
    align-items: center;
  }

  .categories-card .category-percentage {
    font-weight: 600;
    color: #64748b;
    font-size: 0.85rem;
  }

  .categories-card .category-trend {
    font-weight: 600;
    font-size: 0.8rem;
  }

  .categories-card .category-trend.up {
    color: #10b981;
  }

  .categories-card .category-trend.down {
    color: #ef4444;
  }

  /* Estilos para la sección de ataques recientes */
  .recent-attacks-section {
    background: rgba(15, 23, 42, 0.92);
    border: 1px solid rgba(148, 163, 184, 0.15);
    border-radius: 8px;
    padding: 0.75rem;
    backdrop-filter: blur(12px);
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.4);
    max-height: 350px;
    overflow-y: auto;
  }

  .recent-attacks-card {
    max-height: 350px;
    overflow-y: auto;
  }

  .recent-attacks-list {
    max-height: 280px;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    gap: 12px;
    padding: 8px 0;
  }

  .recent-attacks-section h3 {
    color: #ffffff;
    font-size: 1rem;
    font-weight: 700;
    text-shadow: 0 1px 3px rgba(0, 0, 0, 0.4);
    letter-spacing: 0.02em;
    margin-bottom: 0.5rem;
    display: flex;
    align-items: center;
    gap: 0.3rem;
  }

  /* Estilos de attack-item movidos a la sección principal más abajo */

  .attack-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 0.2rem;
  }

  .attack-time {
    color: #94a3b8;
    font-size: 0.6rem;
  }

  .attack-severity {
    padding: 0.1rem 0.3rem;
    border-radius: 3px;
    font-size: 0.55rem;
    font-weight: 600;
    text-transform: uppercase;
  }

  .attack-severity.alta {
    background: rgba(239, 68, 68, 0.2);
    color: #fca5a5;
    border: 1px solid rgba(239, 68, 68, 0.3);
  }

  .attack-severity.media {
    background: rgba(245, 158, 11, 0.2);
    color: #fbbf24;
    border: 1px solid rgba(245, 158, 11, 0.3);
  }

  .attack-title {
    color: #f1f5f9;
    font-weight: 600;
    margin-bottom: 0.1rem;
    font-size: 0.7rem;
  }

  .attack-description {
    color: #cbd5e1;
    font-size: 0.6rem;
    margin-bottom: 0.3rem;
  }

  .attack-details {
    display: flex;
    flex-wrap: wrap;
    gap: 0.3rem;
    align-items: center;
  }

  .attack-target, .attack-type {
    display: flex;
    align-items: center;
    gap: 0.15rem;
    font-size: 0.6rem;
    color: #94a3b8;
  }

  .attack-detail {
    display: flex;
    align-items: center;
    gap: 0.15rem;
    font-size: 0.6rem;
    color: #94a3b8;
  }

  .attack-detail-icon {
    font-size: 0.7rem;
  }

  .attack-detail-value {
    color: #e2e8f0;
    font-weight: 600;
  }

  .attack-tags {
    display: flex;
    gap: 0.15rem;
    margin-left: auto;
  }

  .attack-tag {
    background: rgba(59, 130, 246, 0.2);
    color: #93c5fd;
    padding: 0.1rem 0.25rem;
    border-radius: 3px;
    font-size: 0.55rem;
    border: 1px solid rgba(59, 130, 246, 0.3);
  }

  /* Responsive para el grid de dashboard */
  @media (max-width: 1200px) {
    .dashboard-cards-grid {
      grid-template-columns: 260px 240px;
      gap: 0.5rem;
      top: 15px;
      left: 15px;
      max-width: 520px;
    }
    
    .filters-panel-overlay {
      right: 15px;
      width: 280px;
      max-height: calc(45vh - 60px);
    }
    
    .recent-attacks-card {
      right: 15px;
      width: 280px;
      top: calc(100px + 45vh - 60px + 20px);
      height: calc(100vh - (100px + 45vh - 60px + 20px) - 20px);
    }
    
    .dashboard-card.recent-attacks-card:hover {
      transform: translateY(-2px) !important;
    }
  }

  @media (max-width: 1024px) {
    .dashboard-cards-grid {
      grid-template-columns: 1fr 1fr;
      max-width: 480px;
      gap: 0.5rem;
      top: 15px;
      left: 15px;
    }
    
    .filters-panel-overlay {
      right: 15px;
      width: 260px;
      max-height: calc(43vh - 60px);
    }
    
    .recent-attacks-card {
      right: 15px;
      width: 260px;
      top: calc(100px + 43vh - 60px + 20px);
      height: calc(100vh - (100px + 43vh - 60px + 20px) - 20px);
    }
    
    .dashboard-card.recent-attacks-card:hover {
      transform: translateY(-2px) !important;
    }
  }

  @media (max-width: 768px) {
    /* Layout principal para móviles - mapa a pantalla completa */
    .threat-dashboard {
      height: 100vh;
      height: 100dvh; /* Dynamic viewport height para móviles */
      overflow: hidden;
    }
    
    .map-container {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      width: 100dvw; /* Dynamic viewport width */
      height: 100vh;
      height: 100dvh; /* Dynamic viewport height para móviles */
      z-index: 1;
      min-height: 100vh;
      min-height: 100dvh;
    }
    
    /* Ajustes para orientación horizontal en móviles */
    @media (max-width: 768px) and (orientation: landscape) {
      .map-container {
        height: 100vh;
        min-height: 300px;
      }
      
      .right-panel-container {
        max-height: 70vh;
      }
      
      .dashboard-cards-grid {
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 0.8rem;
      }
      
      .dashboard-card {
        padding: 0.8rem;
        margin-bottom: 0.8rem;
      }
    }
    
    .right-panel-container {
      position: fixed;
      bottom: 0;
      left: 0;
      right: 0;
      width: 100%;
      z-index: 1000;
      background: rgba(15, 23, 42, 0.98);
      backdrop-filter: blur(20px);
      border-top: 2px solid rgba(59, 130, 246, 0.3);
      border-radius: 24px 24px 0 0;
      box-shadow: 0 -20px 60px rgba(0, 0, 0, 0.5);
      transform: translateY(100%);
      transition: transform 0.3s ease;
      max-height: 85vh;
      overflow-y: auto;
    }
    
    .right-panel-container.active {
      transform: translateY(0);
    }
    
    .main-dashboard-overlay {
      position: relative;
      top: 0;
      left: 0;
      right: 0;
      margin: 1rem;
      pointer-events: auto;
    }
    
    .dashboard-cards-grid {
      grid-template-columns: 1fr;
      gap: 1rem;
      max-width: none;
      margin: 0 auto;
    }
    
    .dashboard-card {
      padding: 1rem;
      margin-bottom: 1rem;
      border-radius: 16px;
    }
    
    .dashboard-card .card-header h3 {
      font-size: 1rem;
    }
    
    /* Panel de filtros móvil */
    .filters-panel-overlay {
      position: absolute;
      top: -300px;
      left: 0;
      right: 0;
      width: calc(100% - 2rem);
      margin: 1rem;
      max-height: 300px;
      border-radius: 16px;
      z-index: 1100;
    }
    
    /* Tarjeta de ataques recientes móvil */
    .recent-attacks-card {
      position: relative;
      width: calc(100% - 2rem);
      margin: 1rem;
      max-height: 40vh;
      border-radius: 16px;
    }
    
    .recent-attacks-list {
      max-height: calc(40vh - 80px);
      overflow-y: auto;
    }
    
    /* Header responsivo */
    .dashboard-header-overlay {
      top: 16px;
      left: 16px;
      right: 16px;
      padding: 1.5rem;
      max-height: 100px;
    }
    
    .page-title {
      font-size: 1.5rem;
    }
    
    /* Overlays específicos para móvil */
    .countries-overlay,
    .attack-categories-overlay,
    .timeline-overlay {
      position: fixed;
      bottom: 80px;
      left: 16px;
      right: 16px;
      width: calc(100% - 32px);
      max-height: 50vh;
      z-index: 900;
    }
    
    /* Controles de navegación móvil */
    .mobile-nav-controls {
      position: fixed;
      bottom: 20px;
      right: 20px;
      z-index: 1200;
      display: flex;
      flex-direction: column;
      gap: 12px;
    }
    
    .mobile-nav-btn {
      width: 50px;
      height: 50px;
      border-radius: 50%;
      background: linear-gradient(135deg, #3b82f6, #1d4ed8);
      border: 2px solid rgba(255, 255, 255, 0.2);
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.2rem;
      cursor: pointer;
      box-shadow: 0 8px 25px rgba(59, 130, 246, 0.4);
      transition: all 0.3s ease;
    }
    
    .mobile-nav-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 12px 35px rgba(59, 130, 246, 0.6);
    }
    
    .mobile-nav-btn:active {
      transform: translateY(0);
    }
    
    /* Indicador de arrastre para el panel móvil */
    .drag-handle {
      width: 40px;
      height: 4px;
      background: rgba(255, 255, 255, 0.3);
      border-radius: 2px;
      margin: 12px auto;
      cursor: grab;
    }
    
    .drag-handle:active {
      cursor: grabbing;
    }
  }

  .primary-stats-grid {
    display: flex;
    justify-content: center;
    gap: 0.75rem;
    flex-wrap: wrap;
  }

  .stat-card {
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    border-radius: 10px;
    padding: 0.75rem 1rem;
    box-shadow: 0 6px 24px rgba(0, 0, 0, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.3);
    display: flex;
    align-items: center;
    justify-content: center;
    min-width: 140px;
    transition: all 0.3s ease;
  }

  .stat-card:hover {
    transform: translateY(-3px);
    box-shadow: 0 16px 40px rgba(0, 0, 0, 0.15);
  }

  .stat-card.primary {
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.95), rgba(248, 250, 252, 0.95));
    border: 2px solid rgba(59, 130, 246, 0.2);
  }



  .stat-info {
    display: flex;
    flex-direction: column;
    gap: 0.1rem;
    text-align: center;
  }

  .stat-number {
    font-size: 1.25rem;
    font-weight: 800;
    color: #1e293b;
    background: linear-gradient(135deg, #1e293b, #475569);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    line-height: 1;
  }

  .stat-label {
    font-size: 0.7rem;
    color: #64748b;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  /* Posicionamiento específico de overlays - Diseño reorganizado */
  .countries-overlay {
    top: 160px;
    right: 20px;
    width: 320px;
    max-height: calc(50vh - 100px);
    overflow: hidden;
    background: linear-gradient(145deg, rgba(15, 23, 42, 0.95), rgba(30, 41, 59, 0.9));
    backdrop-filter: blur(20px);
    border-radius: 24px;
    padding: 24px;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5), 0 0 0 1px rgba(255, 255, 255, 0.1);
    border: 2px solid rgba(16, 185, 129, 0.2);
    z-index: 800;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    position: fixed;
    overflow-y: auto;
  }

  .countries-overlay::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 2px;
    background: linear-gradient(90deg, #10b981, #06b6d4, #3b82f6);
    border-radius: 24px 24px 0 0;
  }

  .countries-overlay:hover {
    transform: translateY(-2px);
    box-shadow: 0 25px 70px rgba(0, 0, 0, 0.6), 0 0 0 1px rgba(255, 255, 255, 0.15);
  }

  .attack-categories-overlay {
    bottom: 20px;
    left: 20px;
    width: 360px;
    max-height: calc(50vh - 100px);
    overflow-y: auto;
    background: linear-gradient(145deg, rgba(15, 23, 42, 0.95), rgba(30, 41, 59, 0.9));
    backdrop-filter: blur(20px);
    border-radius: 24px;
    padding: 24px;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5), 0 0 0 1px rgba(255, 255, 255, 0.1);
    border: 2px solid rgba(168, 85, 247, 0.2);
    z-index: 700;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    position: fixed;
  }

  .attack-categories-overlay::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 2px;
    background: linear-gradient(90deg, #a855f7, #ec4899, #f59e0b);
    border-radius: 24px 24px 0 0;
  }

  .attack-categories-overlay:hover {
    transform: translateY(-2px);
    box-shadow: 0 25px 70px rgba(0, 0, 0, 0.6), 0 0 0 1px rgba(255, 255, 255, 0.15);
  }

  .timeline-overlay {
    bottom: 20px;
    right: 20px;
    width: 320px;
    max-height: calc(50vh - 100px);
    overflow-y: auto;
    background: linear-gradient(145deg, rgba(15, 23, 42, 0.95), rgba(30, 41, 59, 0.9));
    backdrop-filter: blur(20px);
    border-radius: 24px;
    padding: 24px;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5), 0 0 0 1px rgba(255, 255, 255, 0.1);
    border: 2px solid rgba(239, 68, 68, 0.2);
    z-index: 600;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    position: fixed;
  }

  .timeline-overlay::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 2px;
    background: linear-gradient(90deg, #ef4444, #f97316, #eab308);
    border-radius: 24px 24px 0 0;
  }

  .timeline-overlay:hover {
    transform: translateY(-2px);
    box-shadow: 0 25px 70px rgba(0, 0, 0, 0.6), 0 0 0 1px rgba(255, 255, 255, 0.15);
  }

  .overlay-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    padding: 15px;
    margin: -10px -10px 20px -10px;
    border-bottom: 2px solid rgba(59, 130, 246, 0.3);
    background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(29, 78, 216, 0.05));
    border-radius: 12px;
  }

  .overlay-header h3 {
    margin: 0;
    font-size: 1.1rem;
    font-weight: 700;
    color: white;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
    background: linear-gradient(135deg, #ffffff, #e2e8f0);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .toggle-overlay {
    background: rgba(59, 130, 246, 0.2);
    border: 1px solid rgba(59, 130, 246, 0.4);
    font-size: 1.1rem;
    cursor: pointer;
    padding: 8px 12px;
    border-radius: 8px;
    transition: all 0.3s ease;
    color: #60a5fa;
    backdrop-filter: blur(5px);
  }

  .toggle-overlay:hover {
    background: rgba(59, 130, 246, 0.3);
    transform: scale(1.05);
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
  }

  .countries-stats {
    display: flex;
    flex-direction: column;
    gap: 10px;
  }

  /* Fix for CSS processing issue */
  .country-item {
    display: flex;
    align-items: center;
    padding: 12px 16px;
    border-radius: 12px;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    font-size: 0.875rem;
    background: rgba(255, 255, 255, 0.06);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-left: 4px solid #10b981;
    margin-bottom: 8px;
    position: relative;
    overflow: hidden;
  }

  .country-item::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 0;
    height: 100%;
    background: linear-gradient(90deg, rgba(16, 185, 129, 0.1), rgba(16, 185, 129, 0.05));
    transition: width 0.3s ease;
  }

  .country-item:hover {
    background: rgba(255, 255, 255, 0.12);
    transform: translateX(6px) translateY(-1px);
    border-color: rgba(16, 185, 129, 0.4);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
  }

  .country-item:hover::before {
    width: 100%;
  }

  .country-info {
    display: flex;
    align-items: center;
    gap: 12px;
    width: 100%;
  }

  .country-flag {
    font-size: 0.75rem;
    flex-shrink: 0;
  }

  .country-name {
    font-weight: 600;
    color: white;
    font-size: 0.65rem;
    flex: 1;
  }

  .country-metrics {
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    gap: 0.125rem;
  }

  .attack-count {
    font-weight: 700;
    color: #00d4ff;
    font-size: 0.65rem;
  }

  .trend-indicator {
    font-size: 0.625rem;
    font-weight: 600;
    padding: 0.125rem 0.25rem;
    border-radius: 0.25rem;
  }

  .trend-indicator.up {
    color: #059669;
    background: rgba(5, 150, 105, 0.1);
  }

  .trend-indicator.down {
    color: #dc2626;
    background: rgba(220, 38, 38, 0.1);
  }

  .trend-indicator.stable {
    color: #64748b;
    background: rgba(100, 116, 139, 0.1);
  }

  .progress-bar {
    width: 100%;
    height: 3px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 1.5px;
    overflow: hidden;
  }

  .progress-fill {
    height: 100%;
    background: linear-gradient(90deg, #f87171, #fca5a5);
    border-radius: 1.5px;
    transition: width 0.3s ease;
  }

  .categories-grid {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .category-item {
    display: flex;
    align-items: center;
    padding: 0.5rem;
    border-radius: 0.25rem;
    transition: background-color 0.2s;
  }

  .category-item:hover {
    background: #f8fafc;
  }

  .category-info {
    flex: 1;
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 0.5rem;
  }

  .category-name {
    font-weight: 600;
    color: #374151;
    font-size: 0.75rem;
  }

  .category-count {
    font-weight: 700;
    color: #1e293b;
    font-size: 0.875rem;
  }

  .category-percentage {
    font-size: 0.625rem;
    color: #64748b;
  }


    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }

  /* Grid de estadísticas */
  .stats-grid {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
  }

  .stat-card {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    border-radius: 1rem;
    padding: 2rem;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(255, 255, 255, 0.2);
    display: flex;
    align-items: center;
    gap: 1.5rem;
    transition: all 0.2s ease;
  }

  .stat-card:hover {
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    transform: translateY(-2px);
  }

  .stat-icon {
    font-size: 3rem;
    width: 4rem;
    height: 4rem;
    display: flex;
    align-items: center;
    justify-content: center;
    background: #f8fafc;
    border-radius: 1rem;
  }

  .stat-info {
    flex: 1;
  }

  .stat-number {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    color: white;
    line-height: 1;
  }

  .stat-label {
    display: block;
    font-size: 0.875rem;
    color: rgba(255, 255, 255, 0.8);
    margin-top: 0.25rem;
  }

  /* Contenedor del mapa */
  .map-container {
    width: 100%;
    height: 100vh;
    margin: 0;
    padding: 0;
    background: #111827;
    border-radius: 0;
    box-shadow: none;
    border: none;
    position: relative;
    overflow: hidden;
  }



  /* Responsive */
  @media (max-width: 768px) {
    .header-content {
      flex-direction: column;
      gap: 1rem;
      text-align: center;
    }

    .page-title {
      font-size: 2rem;
    }



    .stats-grid {
      grid-template-columns: 1fr;
      padding: 1rem;
    }

    .map-container {
      height: 70vh;
      margin: 0;
      padding: 0;
    }
  }

  .overlay-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
    padding-bottom: 10px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  }

  .overlay-header h3 {
    color: white;
    margin: 0;
    font-size: 1.1rem;
    font-weight: 600;
  }

  .toggle-overlay {
    background: none;
    border: none;
    color: #00d4ff;
    font-size: 1.2rem;
    cursor: pointer;
    padding: 5px;
    border-radius: 5px;
    transition: all 0.3s ease;
  }

  .toggle-overlay:hover {
    background: rgba(0, 212, 255, 0.1);
  }

  .countries-list {
    display: flex;
    flex-direction: column;
    gap: 10px;
  }

  .country-item {
    display: flex;
    flex-direction: column;
    gap: 8px;
    padding: 16px 20px;
    background: linear-gradient(135deg, rgba(15, 23, 42, 0.8) 0%, rgba(30, 41, 59, 0.6) 100%);
    border-radius: 16px;
    border: 1px solid rgba(59, 130, 246, 0.2);
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    overflow: hidden;
    backdrop-filter: blur(10px);
    cursor: pointer;
  }

  .country-item::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 0;
    height: 100%;
    background: linear-gradient(135deg, rgba(59, 130, 246, 0.2) 0%, rgba(139, 92, 246, 0.2) 100%);
    transition: width 0.4s ease;
    z-index: 1;
  }

  .country-item:hover {
    background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.8) 100%);
    transform: translateY(-4px) scale(1.02);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.4), 0 0 0 1px rgba(59, 130, 246, 0.4);
    border-color: rgba(59, 130, 246, 0.5);
  }

  .country-item:hover::before {
    width: 100%;
  }

  .country-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    position: relative;
    z-index: 2;
  }

  .country-info {
    display: flex;
    align-items: center;
    gap: 12px;
  }

  .country-flag {
    font-size: 1.5rem;
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: linear-gradient(135deg, rgba(59, 130, 246, 0.2), rgba(139, 92, 246, 0.2));
    border-radius: 8px;
    transition: all 0.3s ease;
  }

  .country-item:hover .country-flag {
    transform: scale(1.1) rotate(5deg);
  }

  .country-name {
    color: #f8fafc;
    font-size: 0.9rem;
    font-weight: 600;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
  }

  .country-attacks {
    color: #ef4444;
    font-weight: 700;
    font-size: 0.9rem;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
  }

  .country-progress {
    width: 100%;
    height: 6px;
    background: rgba(15, 23, 42, 0.6);
    border-radius: 3px;
    overflow: hidden;
    position: relative;
    z-index: 2;
  }

  .country-progress-bar {
    height: 100%;
    background: linear-gradient(90deg, #ef4444, #dc2626);
    border-radius: 3px;
    transition: width 1s ease-out;
    box-shadow: 0 0 10px rgba(239, 68, 68, 0.5);
  }

  /* Panel de Categorías de Ataques */
  .attack-categories-overlay {
    position: absolute;
    bottom: 20px;
    left: 20px;
    z-index: 250;
    background: rgba(0, 0, 0, 0.8);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    padding: 12px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
    width: 280px;
    max-height: calc(100vh - 120px);
    overflow: hidden;
  }

  .categories-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: 4px;
    max-height: calc(100vh - 180px);
    overflow: hidden;
  }

  .category-item {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 16px 20px;
    background: linear-gradient(135deg, rgba(15, 23, 42, 0.8) 0%, rgba(30, 41, 59, 0.6) 100%);
    border-radius: 16px;
    border: 1px solid rgba(59, 130, 246, 0.2);
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    overflow: hidden;
    margin-bottom: 8px;
    min-height: 60px;
    backdrop-filter: blur(10px);
    cursor: pointer;
  }

  .category-item::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 0;
    height: 100%;
    background: linear-gradient(135deg, rgba(59, 130, 246, 0.2) 0%, rgba(139, 92, 246, 0.2) 100%);
    transition: width 0.4s ease;
    z-index: 1;
  }

  .category-item:hover::before {
    width: 100%;
  }

  .category-icon {
    font-size: 1.5rem;
    flex-shrink: 0;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    font-weight: bold;
    background: linear-gradient(135deg, rgba(59, 130, 246, 0.2), rgba(139, 92, 246, 0.2));
    border-radius: 12px;
    transition: all 0.4s ease;
    position: relative;
    z-index: 2;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  }

  .category-item:hover .category-icon {
    transform: scale(1.15) rotate(10deg);
    background: linear-gradient(135deg, rgba(59, 130, 246, 0.4), rgba(139, 92, 246, 0.4));
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
  }

  .category-item.malware .category-icon {
    color: #ff4444;
  }

  .category-item.phishing .category-icon {
    color: #ff8800;
  }

  .category-item.ransomware .category-icon {
    color: #cc0000;
  }

  .category-item.ddos .category-icon {
    color: #0088ff;
  }

  .category-item.botnet .category-icon {
    color: #8800ff;
  }

  .category-item:hover {
    background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.8) 100%);
    transform: translateY(-4px) scale(1.02);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.4), 0 0 0 1px rgba(59, 130, 246, 0.4);
    border-color: rgba(59, 130, 246, 0.5);
  }

  .category-item.malware {
    border-left: 3px solid #ef4444;
  }

  .category-item.phishing {
    border-left: 3px solid #f59e0b;
  }

  .category-item.ransomware {
    border-left: 3px solid #dc2626;
  }

  .category-item.ddos {
    border-left: 3px solid #3b82f6;
  }

  .category-item.botnet {
    border-left: 3px solid #8b5cf6;
  }



  .category-info {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    flex: 1;
  }

  .category-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .category-name {
    color: #f1f5f9;
    font-weight: 700;
    font-size: 0.7rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .category-count {
    color: #06b6d4;
    font-weight: 800;
    font-size: 0.75rem;
    background: linear-gradient(135deg, #06b6d4, #3b82f6);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .category-metrics {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .category-percentage {
    color: #94a3b8;
    font-size: 0.6rem;
    font-weight: 600;
    padding: 0.1rem 0.3rem;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  .category-trend {
    display: flex;
    align-items: center;
    gap: 0.1rem;
    font-size: 0.55rem;
    font-weight: 600;
  }

  .category-trend.up {
    color: #10b981;
  }

  .category-trend.down {
    color: #ef4444;
  }

  .category-progress {
    width: 100%;
    height: 2px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 1px;
    overflow: hidden;
    margin-top: 0.15rem;
  }

  .category-progress-fill {
    height: 100%;
    border-radius: 2px;
    transition: width 0.8s cubic-bezier(0.4, 0, 0.2, 1);
  }

  /* Estilos personalizados para scrollbar - Timeline, países y categorías */
  .timeline-overlay::-webkit-scrollbar,
  .countries-overlay::-webkit-scrollbar,
  .attack-categories-overlay::-webkit-scrollbar {
    width: 6px;
  }

  .timeline-overlay::-webkit-scrollbar-track,
  .countries-overlay::-webkit-scrollbar-track,
  .attack-categories-overlay::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 3px;
  }

  .timeline-overlay::-webkit-scrollbar-thumb,
  .countries-overlay::-webkit-scrollbar-thumb,
  .attack-categories-overlay::-webkit-scrollbar-thumb {
    background: rgba(0, 212, 255, 0.6);
    border-radius: 3px;
    transition: background 0.3s ease;
  }

  .timeline-overlay::-webkit-scrollbar-thumb:hover,
  .countries-overlay::-webkit-scrollbar-thumb:hover,
  .attack-categories-overlay::-webkit-scrollbar-thumb:hover {
    background: rgba(0, 212, 255, 0.8);
  }

  /* Timeline de Ataques */
  .timeline-overlay {
    position: absolute;
    top: 380px;
    right: 20px;
    z-index: 280;
    background: rgba(0, 0, 0, 0.8);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 15px;
    padding: 20px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
    width: 300px;
  }

  .recent-attacks {
    display: flex;
    flex-direction: column;
    gap: 6px;
  }

  .attack-item {
    display: flex;
    align-items: flex-start;
    gap: 16px;
    padding: 20px 24px;
    background: linear-gradient(135deg, rgba(15, 23, 42, 0.8) 0%, rgba(30, 41, 59, 0.6) 100%);
    border-radius: 16px;
    border: 1px solid rgba(59, 130, 246, 0.2);
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    overflow: hidden;
    backdrop-filter: blur(10px);
    cursor: pointer;
    opacity: 0;
    transform: translateY(20px);
    animation: slideInUp 0.6s ease-out forwards;
  }
  
  @keyframes slideInUp {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .attack-item::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 4px;
    height: 100%;
    transition: all 0.3s ease;
    z-index: 1;
  }

  .attack-item.critical::before {
    background: linear-gradient(180deg, #ff4757 0%, #ff3742 100%);
  }

  .attack-item.high::before {
    background: linear-gradient(180deg, #ff6b35 0%, #ff5722 100%);
  }

  .attack-item.medium::before {
    background: linear-gradient(180deg, #ffa502 0%, #ff9500 100%);
  }

  .attack-item:hover {
    background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.8) 100%);
    transform: translateY(-4px) scale(1.02);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.4), 0 0 0 1px rgba(59, 130, 246, 0.4);
    border-color: rgba(59, 130, 246, 0.5);
  }

  .attack-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 48px;
    height: 48px;
    font-size: 1.5rem;
    background: linear-gradient(135deg, rgba(59, 130, 246, 0.2), rgba(139, 92, 246, 0.2));
    border-radius: 12px;
    border: 1px solid rgba(59, 130, 246, 0.3);
    backdrop-filter: blur(5px);
    flex-shrink: 0;
    transition: all 0.3s ease;
  }

  .attack-item:hover .attack-icon {
    transform: scale(1.1) rotate(5deg);
    background: linear-gradient(135deg, rgba(59, 130, 246, 0.3), rgba(139, 92, 246, 0.3));
  }

  .attack-main {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 12px;
  }

  .attack-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 12px;
    position: relative;
    z-index: 2;
  }

  .attack-time {
    color: #e2e8f0;
    font-size: 0.75rem;
    font-weight: 600;
    padding: 6px 12px;
    background: linear-gradient(135deg, rgba(59, 130, 246, 0.2), rgba(139, 92, 246, 0.2));
    border-radius: 12px;
    border: 1px solid rgba(59, 130, 246, 0.3);
    backdrop-filter: blur(5px);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
  }

  .attack-severity {
    font-size: 0.75rem;
    font-weight: 700;
    padding: 6px 12px;
    border-radius: 12px;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
    backdrop-filter: blur(5px);
  }

  .attack-severity.critical {
    background: linear-gradient(135deg, rgba(239, 68, 68, 0.3), rgba(220, 38, 38, 0.2));
    color: #fef2f2;
    border: 1px solid rgba(239, 68, 68, 0.5);
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
  }

  .attack-severity.high {
    background: linear-gradient(135deg, rgba(245, 158, 11, 0.3), rgba(217, 119, 6, 0.2));
    color: #fffbeb;
    border: 1px solid rgba(245, 158, 11, 0.5);
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
  }

  .attack-severity.medium {
    background: linear-gradient(135deg, rgba(59, 130, 246, 0.3), rgba(37, 99, 235, 0.2));
    color: #eff6ff;
    border: 1px solid rgba(59, 130, 246, 0.5);
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
  }

  .attack-severity.crítica {
    background: linear-gradient(135deg, rgba(239, 68, 68, 0.3), rgba(220, 38, 38, 0.2));
    color: #fef2f2;
    border: 1px solid rgba(239, 68, 68, 0.5);
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
  }

  .attack-severity.alta {
    background: linear-gradient(135deg, rgba(245, 158, 11, 0.3), rgba(217, 119, 6, 0.2));
    color: #fffbeb;
    border: 1px solid rgba(245, 158, 11, 0.5);
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
  }

  .attack-severity.media {
    background: linear-gradient(135deg, rgba(59, 130, 246, 0.3), rgba(37, 99, 235, 0.2));
    color: #eff6ff;
    border: 1px solid rgba(59, 130, 246, 0.5);
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
  }

  .attack-title {
    display: flex;
    align-items: center;
    gap: 8px;
    margin-bottom: 6px;
    position: relative;
    z-index: 2;
  }

  .attack-type {
    color: #f8fafc;
    font-weight: 700;
    font-size: 0.9rem;
    line-height: 1.4;
  }

  .attack-label {
    color: #94a3b8;
    font-weight: 500;
    font-size: 0.8rem;
    opacity: 0.8;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
  }

  .attack-content {
    position: relative;
    z-index: 2;
  }

  .attack-description {
    color: #e2e8f0;
    font-size: 0.8rem;
    line-height: 1.5;
    margin-bottom: 12px;
    position: relative;
    z-index: 2;
    opacity: 0.9;
  }

  .attack-metadata {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 12px;
    flex-wrap: wrap;
  }

  .attack-location {
    display: flex;
    align-items: center;
    gap: 6px;
    position: relative;
    z-index: 2;
  }

  .location-icon {
    font-size: 12px;
    opacity: 0.7;
  }

  .location-text {
    font-size: 0.75rem;
    color: #3498db;
    font-weight: 600;
  }

  .attack-source {
    display: flex;
    align-items: center;
    gap: 6px;
    font-size: 0.625rem;
    position: relative;
    z-index: 2;
  }

  .source-label {
    color: #94a3b8;
    font-weight: 500;
  }

  .source-name {
    color: #9b59b6;
    font-weight: 600;
    background: rgba(155, 89, 182, 0.1);
    padding: 2px 6px;
    border-radius: 6px;
    border: 1px solid rgba(155, 89, 182, 0.2);
    transition: all 0.3s ease;
  }

  .attack-item:hover .source-name {
    background: rgba(155, 89, 182, 0.2);
    border-color: rgba(155, 89, 182, 0.4);
  }

  .attack-details {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 8px;
    font-size: 0.75rem;
  }

  .attack-detail {
    display: flex;
    align-items: center;
    gap: 4px;
    color: #94a3b8;
  }

  .attack-detail-icon {
    font-size: 0.875rem;
  }

  .attack-detail-value {
    color: #e2e8f0;
    font-weight: 600;
  }

  .attack-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 4px;
    margin-top: 8px;
  }

  .attack-tag {
    background: rgba(59, 130, 246, 0.2);
    color: #93c5fd;
    font-size: 0.625rem;
    font-weight: 600;
    padding: 0.125rem 0.5rem;
    border-radius: 12px;
    border: 1px solid rgba(59, 130, 246, 0.3);
  }

  /* Modal de Detalles de Ataques */
  .attack-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1000;
    display: none;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .attack-modal.show {
    opacity: 1;
  }

  .modal-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    backdrop-filter: blur(10px);
  }

  .modal-content {
    position: relative;
    background: linear-gradient(135deg, rgba(15, 23, 42, 0.95) 0%, rgba(30, 41, 59, 0.95) 100%);
    border-radius: 20px;
    border: 1px solid rgba(59, 130, 246, 0.3);
    box-shadow: 0 25px 50px rgba(0, 0, 0, 0.5);
    max-width: 800px;
    width: 90%;
    max-height: 90vh;
    overflow-y: auto;
    backdrop-filter: blur(20px);
    transform: scale(0.9);
    transition: transform 0.3s ease;
  }

  .attack-modal.show .modal-content {
    transform: scale(1);
  }

  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 24px 32px;
    border-bottom: 1px solid rgba(59, 130, 246, 0.2);
  }

  .modal-title {
    color: #f8fafc;
    font-size: 1.5rem;
    font-weight: 700;
    margin: 0;
  }

  .modal-close {
    background: none;
    border: none;
    color: #94a3b8;
    font-size: 2rem;
    cursor: pointer;
    padding: 0;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    transition: all 0.3s ease;
  }

  .modal-close:hover {
    background: rgba(239, 68, 68, 0.2);
    color: #ef4444;
  }

  .modal-body {
    padding: 32px;
  }

  .attack-details-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 24px;
  }

  .detail-section {
    background: rgba(15, 23, 42, 0.5);
    border-radius: 12px;
    padding: 20px;
    border: 1px solid rgba(59, 130, 246, 0.1);
  }

  .detail-section.full-width {
    grid-column: 1 / -1;
  }

  .detail-section h4 {
    color: #f8fafc;
    font-size: 1.1rem;
    font-weight: 600;
    margin: 0 0 16px 0;
    padding-bottom: 8px;
    border-bottom: 1px solid rgba(59, 130, 246, 0.2);
  }

  .detail-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 12px;
    padding: 8px 0;
  }

  .detail-label {
    color: #94a3b8;
    font-weight: 500;
    font-size: 0.9rem;
  }

  .detail-value {
    color: #e2e8f0;
    font-weight: 600;
    font-size: 0.9rem;
  }

  .detail-value.critical {
    color: #ef4444;
  }

  .detail-value.high {
    color: #f59e0b;
  }

  .detail-value.medium {
    color: #3b82f6;
  }

  .attack-description-value {
    color: #e2e8f0;
    font-size: 1rem;
    line-height: 1.6;
    margin: 0;
  }

  .mitigation-recommendations {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }

  .recommendation-item {
    color: #e2e8f0;
    font-size: 0.9rem;
    line-height: 1.5;
    padding: 8px 12px;
    background: rgba(34, 197, 94, 0.1);
    border-left: 3px solid #22c55e;
    border-radius: 6px;
  }

  @media (max-width: 768px) {
    .modal-content {
      width: 95%;
      margin: 20px;
    }

    .modal-header,
    .modal-body {
      padding: 20px;
    }

    .attack-details-grid {
      grid-template-columns: 1fr;
      gap: 16px;
    }
  }

  .attack-item.critical {
    border-left-color: #ff4757;
  }

  .attack-item.high {
    border-left-color: #ffa726;
  }

  .attack-item.medium {
    border-left-color: #ffeb3b;
  }

  .attack-time {
    color: #ccc;
    font-size: 0.65rem;
  }

  .attack-info {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .attack-type {
    color: white;
    font-weight: 600;
    font-size: 0.75rem;
  }

  .attack-target {
    color: #00d4ff;
    font-size: 0.65rem;
  }

  .attack-severity {
    padding: 2px 8px;
    border-radius: 12px;
    font-size: 0.7rem;
    font-weight: 600;
    text-transform: uppercase;
  }

  .attack-severity.critical {
    background: #ff4757;
    color: white;
  }

  .attack-severity.high {
    background: #ffa726;
    color: white;
  }

  .attack-severity.medium {
    background: #ffeb3b;
    color: #333;
  }

  /* Responsive Design */
  @media (max-width: 1200px) {
    .countries-overlay,
    .attack-categories-overlay,
    .timeline-overlay {
      width: 250px;
    }
  }

  @media (max-width: 768px) {
    .countries-overlay,
    .attack-categories-overlay,
    .timeline-overlay {
      position: relative;
      width: 100%;
      margin: 10px;
    }
  }

  .dashboard-header p {
    color: rgba(255, 255, 255, 0.9);
    font-size: 1.25rem;
    margin: 0;
  }

  .dashboard-grid {
    display: grid;
    gap: 3rem;
    max-width: 1400px;
    margin: 0 auto;
  }



  /* Panel de Control Unificado */
  .unified-control-panel {
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    border-radius: 1.5rem;
    padding: 2rem;
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  .panel-header {
    margin-bottom: 2rem;
  }

  .panel-controls {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: 1rem;
  }

  .real-time-indicator {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    background: #ecfdf5;
    padding: 0.75rem 1.25rem;
    border-radius: 2rem;
    border: 1px solid #10b981;
  }

  .pulse-indicator {
    width: 12px;
    height: 12px;
    background: #10b981;
    border-radius: 50%;
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.5; }
  }

  .real-time-indicator span {
    color: #065f46;
    font-weight: 600;
    font-size: 0.875rem;
  }

  .export-controls {
    display: flex;
    gap: 0.75rem;
  }

  .export-btn, .alert-btn {
    background: #f8fafc;
    border: 1px solid #e2e8f0;
    padding: 0.75rem 1rem;
    border-radius: 0.75rem;
    font-size: 0.875rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s;
    color: #475569;
  }

  .export-btn:hover, .alert-btn:hover {
    background: #e2e8f0;
    transform: translateY(-1px);
  }



  /* Responsive */
  @media (max-width: 768px) {
    .dashboard-header h2 {
      font-size: 2rem;
    }

    .panel-controls {
      flex-direction: column;
      align-items: stretch;
    }

    .export-controls {
      justify-content: center;
    }

  /* Mapa WebGL Styles */
  .map-section-header {
    text-align: center;
    margin-bottom: 2rem;
  }

  .map-section-header h2 {
    font-size: 2.5rem;
    font-weight: 700;
    color: #00ffff;
    margin-bottom: 0.5rem;
    text-shadow: 0 0 20px rgba(0, 255, 255, 0.5);
  }

  .map-section-header p {
    font-size: 1.1rem;
    color: #94a3b8;
    max-width: 600px;
    margin: 0 auto;
  }

  .map-container-wrapper {
    height: 100vh;
    width: 100vw;
    position: fixed;
    top: 0;
    left: 0;
    z-index: 1;
    border-radius: 0;
    overflow: hidden;
    border: none;
    box-shadow: none;
  }

  @media (max-width: 768px) {
    .map-container-wrapper {
      height: 100vh;
    }
    
    .map-section-header h2 {
       font-size: 2rem;
     }

    /* Responsive overlays */
    .filters-panel-overlay {
      top: 80px;
      right: 10px;
      width: 180px;
      max-height: calc(45vh - 40px);
      padding: 8px;
      gap: 0.3rem;
    }

    .recent-attacks-card {
      top: calc(45vh + 60px);
      right: 10px;
      width: 180px;
      max-height: calc(55vh - 120px);
    }

    .attack-categories-overlay {
      top: 300px;
      left: 10px;
      width: 280px;
      height: 280px;
    }

    .timeline-overlay {
      top: 10px;
      right: 10px;
      width: 240px;
      height: 250px;
    }

    .countries-overlay {
      top: 270px;
      right: 10px;
      width: 240px;
      height: 280px;
    }
   }

  @media (max-width: 1024px) and (min-width: 769px) {
    /* Responsive para tablets */
    .filters-panel-overlay {
      top: 100px;
      right: 10px;
      width: 220px;
      max-height: calc(50vh - 40px);
      padding: 10px;
      gap: 0.4rem;
    }

    .recent-attacks-card {
      top: calc(50vh + 60px);
      right: 10px;
      width: 220px;
      max-height: calc(50vh - 120px);
    }

    .attack-categories-overlay {
      width: 300px;
      height: 300px;
    }

    .timeline-overlay {
      width: 260px;
      height: 280px;
    }

    .countries-overlay {
      width: 260px;
      height: 320px;
    }
  }

   /* Filtros de Amenazas */
   .threat-filters-section {
     background: rgba(255, 255, 255, 0.95);
     backdrop-filter: blur(10px);
     border-radius: 1.5rem;
     padding: 2rem;
     margin-bottom: 2rem;
     box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
     border: 1px solid rgba(255, 255, 255, 0.2);
   }

   .filters-header {
     text-align: center;
     margin-bottom: 2rem;
   }

   .filters-header h3 {
     font-size: 1.8rem;
     font-weight: 700;
     color: #1e293b;
     margin-bottom: 0.5rem;
   }

   .filters-header p {
     color: #64748b;
     font-size: 1rem;
   }

   .filters-container {
     display: grid;
     gap: 1.5rem;
   }



   .severity-filters {
     display: flex;
     flex-wrap: wrap;
     gap: 0.5rem;
   }



   .region-select {
     background: #f8fafc;
     border: 2px solid #e2e8f0;
     color: #374151;
     padding: 0.75rem 1rem;
     border-radius: 0.75rem;
     font-weight: 500;
     font-size: 0.9rem;
     cursor: pointer;
     transition: all 0.3s ease;
     width: 100%;
     max-width: 300px;
   }

   .region-select:focus {
     outline: none;
     border-color: #3b82f6;
     box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
   }



   @media (max-width: 768px) {
     .threat-filters-section {
       padding: 1.5rem;
     }
   }

   /* Estadísticas de Países */
   .country-stats-header {
     text-align: center;
     margin-bottom: 3rem;
   }

   .country-stats-header h2 {
     color: white;
     margin: 0 0 1rem 0;
     font-size: 2.5rem;
     font-weight: 700;
   }

   .country-stats-header p {
     color: rgba(255, 255, 255, 0.9);
     font-size: 1.25rem;
     margin: 0;
   }

   .country-stats-container {
     max-width: 1400px;
     margin: 0 auto;
     display: grid;
     gap: 3rem;
   }

   .stats-overview {
     display: grid;
     grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
     gap: 1.5rem;
     margin-bottom: 2rem;
   }

   .overview-card {
     background: rgba(255, 255, 255, 0.95);
     backdrop-filter: blur(10px);
     border-radius: 1.5rem;
     padding: 2rem;
     display: flex;
     align-items: center;
     gap: 1.5rem;
     box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
     border: 1px solid rgba(255, 255, 255, 0.2);
     transition: all 0.3s ease;
   }

   .overview-card:hover {
     transform: translateY(-5px);
     box-shadow: 0 25px 35px -5px rgba(0, 0, 0, 0.15);
   }

   .overview-icon {
     font-size: 3rem;
     background: linear-gradient(135deg, #3b82f6, #1d4ed8);
     border-radius: 1rem;
     width: 80px;
     height: 80px;
     display: flex;
     align-items: center;
     justify-content: center;
     box-shadow: 0 10px 20px rgba(59, 130, 246, 0.3);
   }

   .overview-content {
     display: flex;
     flex-direction: column;
   }

   .overview-number {
     font-size: 2.5rem;
     font-weight: 800;
     color: #1e293b;
     line-height: 1;
   }

   .overview-label {
     font-size: 1rem;
     color: #64748b;
     font-weight: 600;
     margin-top: 0.5rem;
   }

   .country-ranking {
     background: rgba(255, 255, 255, 0.95);
     backdrop-filter: blur(10px);
     border-radius: 1.5rem;
     padding: 2rem;
     box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
     border: 1px solid rgba(255, 255, 255, 0.2);
   }

   .ranking-header {
     display: flex;
     justify-content: space-between;
     align-items: center;
     margin-bottom: 2rem;
     flex-wrap: wrap;
     gap: 1rem;
   }

   .ranking-header h3 {
     font-size: 1.8rem;
     font-weight: 700;
     color: #1e293b;
     margin: 0;
   }

   .ranking-controls {
     display: flex;
     gap: 1rem;
     align-items: center;
   }

   .time-period-select {
     background: #f8fafc;
     border: 2px solid #e2e8f0;
     color: #374151;
     padding: 0.5rem 1rem;
     border-radius: 0.75rem;
     font-weight: 500;
     font-size: 0.9rem;
     cursor: pointer;
   }

   .refresh-stats-btn {
     background: linear-gradient(135deg, #10b981, #059669);
     border: none;
     color: white;
     padding: 0.5rem 1rem;
     border-radius: 0.75rem;
     font-weight: 600;
     font-size: 0.9rem;
     cursor: pointer;
     transition: all 0.3s ease;
   }

   .refresh-stats-btn:hover {
     background: linear-gradient(135deg, #059669, #047857);
     transform: translateY(-1px);
   }

   .ranking-list {
     display: grid;
     gap: 1rem;
   }

   .ranking-item {
     display: grid;
     grid-template-columns: auto 1fr auto auto;
     gap: 1.5rem;
     align-items: center;
     background: #f8fafc;
     padding: 1.5rem;
     border-radius: 1rem;
     border: 2px solid #e2e8f0;
     transition: all 0.3s ease;
   }

   .ranking-item:hover {
     background: #f1f5f9;
     border-color: #cbd5e1;
     transform: translateY(-2px);
   }

   .ranking-item.rank-1 {
     background: linear-gradient(135deg, #fef3c7, #fde68a);
     border-color: #f59e0b;
   }

   .ranking-item.rank-2 {
     background: linear-gradient(135deg, #f3f4f6, #e5e7eb);
     border-color: #9ca3af;
   }

   .ranking-item.rank-3 {
     background: linear-gradient(135deg, #fef2f2, #fecaca);
     border-color: #f87171;
   }

   .rank-position {
     display: flex;
     align-items: center;
     gap: 0.5rem;
   }

   .rank-number {
     font-size: 1.5rem;
     font-weight: 800;
     color: #1e293b;
     min-width: 30px;
   }

   .rank-medal {
     font-size: 1.5rem;
   }

   .country-info {
     display: flex;
     align-items: center;
     gap: 1rem;
   }

   .country-flag {
     font-size: 2rem;
   }

   .country-name {
     font-size: 1.1rem;
     font-weight: 600;
     color: #1e293b;
   }

   .attack-stats {
     display: flex;
     flex-direction: column;
     align-items: flex-end;
     gap: 0.25rem;
   }

   .attack-count {
     font-size: 1.3rem;
     font-weight: 800;
     color: #1e293b;
   }

   .attack-percentage {
     font-size: 0.9rem;
     color: #64748b;
     font-weight: 600;
   }

   .attack-trend {
     font-size: 0.8rem;
     font-weight: 600;
     padding: 0.25rem 0.5rem;
     border-radius: 1rem;
   }

   .attack-trend.up {
     background: #dcfce7;
     color: #16a34a;
   }

   .attack-trend.down {
     background: #fef2f2;
     color: #dc2626;
   }

   .attack-trend.stable {
     background: #f1f5f9;
     color: #64748b;
   }

   .threat-types {
     display: flex;
     flex-wrap: wrap;
     gap: 0.5rem;
   }

   .threat-tag {
     padding: 0.25rem 0.75rem;
     border-radius: 1rem;
     font-size: 0.75rem;
     font-weight: 600;
     color: white;
   }

   .threat-tag.malware {
     background: #ef4444;
   }

   .threat-tag.ransomware {
     background: #dc2626;
   }

   .threat-tag.phishing {
     background: #f97316;
   }

   .threat-tag.ddos {
     background: #eab308;
   }

   .threat-tag.botnet {
     background: #8b5cf6;
   }

   .threat-tag.apt {
     background: #06b6d4;
   }

   .regional-breakdown {
     background: rgba(255, 255, 255, 0.95);
     backdrop-filter: blur(10px);
     border-radius: 1.5rem;
     padding: 2rem;
     box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
     border: 1px solid rgba(255, 255, 255, 0.2);
   }

   .regional-breakdown h3 {
     font-size: 1.8rem;
     font-weight: 700;
     color: #1e293b;
     margin-bottom: 2rem;
   }

   .region-stats {
     display: grid;
     gap: 1rem;
   }

   .region-stat {
     display: grid;
     grid-template-columns: 200px 1fr auto;
     gap: 1rem;
     align-items: center;
   }

   .region-name {
     font-weight: 600;
     color: #374151;
   }

   .region-bar {
     background: #e2e8f0;
     height: 12px;
     border-radius: 6px;
     overflow: hidden;
   }

   .region-fill {
     background: linear-gradient(135deg, #3b82f6, #1d4ed8);
     height: 100%;
     border-radius: 6px;
     transition: width 0.5s ease;
   }

   .region-percentage {
     font-weight: 700;
     color: #1e293b;
     min-width: 40px;
     text-align: right;
   }

   @media (max-width: 768px) {
     .country-stats-container {
       gap: 2rem;
     }

     .ranking-item {
       grid-template-columns: 1fr;
       gap: 1rem;
       text-align: center;
     }

     .attack-stats {
       align-items: center;
     }

     .region-stat {
       grid-template-columns: 1fr;
       gap: 0.5rem;
       text-align: center;
     }

     .ranking-header {
       flex-direction: column;
       align-items: stretch;
     }

     .ranking-controls {
        justify-content: center;
      }
    }

    /* Timeline de Ataques */
    .timeline-header {
      text-align: center;
      margin-bottom: 3rem;
    }

    .timeline-header h2 {
      color: white;
      margin: 0 0 1rem 0;
      font-size: 2.5rem;
      font-weight: 700;
    }

    .timeline-header p {
      color: rgba(255, 255, 255, 0.9);
      font-size: 1.25rem;
      margin: 0;
    }

    .timeline-container {
      max-width: 1200px;
      margin: 0 auto;
    }

    .timeline-controls {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      border-radius: 1.5rem;
      padding: 2rem;
      margin-bottom: 3rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
      flex-wrap: wrap;
      gap: 2rem;
      box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .timeline-filters {
      display: flex;
      gap: 1rem;
      align-items: center;
      flex-wrap: wrap;
    }

    .timeline-period-select,
    .timeline-severity-filter {
      background: #f8fafc;
      border: 2px solid #e2e8f0;
      color: #374151;
      padding: 0.75rem 1rem;
      border-radius: 0.75rem;
      font-weight: 500;
      font-size: 0.9rem;
      cursor: pointer;
      min-width: 150px;
    }

    .timeline-refresh-btn {
      background: linear-gradient(135deg, #3b82f6, #1d4ed8);
      border: none;
      color: white;
      padding: 0.75rem 1.5rem;
      border-radius: 0.75rem;
      font-weight: 600;
      font-size: 0.9rem;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .timeline-refresh-btn:hover {
      background: linear-gradient(135deg, #1d4ed8, #1e40af);
      transform: translateY(-1px);
    }

    .timeline-stats {
      display: flex;
      gap: 2rem;
      align-items: center;
    }

    .timeline-stat {
      display: flex;
      flex-direction: column;
      align-items: center;
      text-align: center;
    }

    .stat-number {
      font-size: 2rem;
      font-weight: 800;
      color: #1e293b;
      line-height: 1;
    }

    .stat-label {
      font-size: 0.875rem;
      color: #64748b;
      font-weight: 600;
      margin-top: 0.25rem;
    }

    .timeline-content {
      position: relative;
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      border-radius: 1.5rem;
      padding: 2rem;
      margin-bottom: 2rem;
      box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.2);
      min-height: 600px;
    }

    .timeline-line {
      position: absolute;
      left: 3rem;
      top: 2rem;
      bottom: 2rem;
      width: 4px;
      background: linear-gradient(180deg, #3b82f6, #1d4ed8);
      border-radius: 2px;
    }

    .timeline-events {
      padding-left: 5rem;
      display: flex;
      flex-direction: column;
      gap: 2rem;
    }

    .timeline-event {
      position: relative;
      background: #f8fafc;
      border-radius: 1rem;
      padding: 1.5rem;
      border-left: 4px solid #e2e8f0;
      transition: all 0.3s ease;
    }

    .timeline-event:hover {
      background: #f1f5f9;
      transform: translateX(5px);
      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
    }

    .timeline-event.critical {
      border-left-color: #dc2626;
      background: linear-gradient(135deg, #fef2f2, #fee2e2);
    }

    .timeline-event.high {
      border-left-color: #ea580c;
      background: linear-gradient(135deg, #fff7ed, #fed7aa);
    }

    .timeline-event.medium {
      border-left-color: #d97706;
      background: linear-gradient(135deg, #fffbeb, #fde68a);
    }

    .timeline-event.low {
      border-left-color: #65a30d;
      background: linear-gradient(135deg, #f7fee7, #d9f99d);
    }

    .timeline-event::before {
      content: '';
      position: absolute;
      left: -2.75rem;
      top: 1.5rem;
      width: 16px;
      height: 16px;
      border-radius: 50%;
      background: #e2e8f0;
      border: 4px solid white;
      box-shadow: 0 0 0 2px #e2e8f0;
    }

    .timeline-event.critical::before {
      background: #dc2626;
      box-shadow: 0 0 0 2px #dc2626;
    }

    .timeline-event.high::before {
      background: #ea580c;
      box-shadow: 0 0 0 2px #ea580c;
    }

    .timeline-event.medium::before {
      background: #d97706;
      box-shadow: 0 0 0 2px #d97706;
    }

    .timeline-event.low::before {
      background: #65a30d;
      box-shadow: 0 0 0 2px #65a30d;
    }

    .event-header {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      margin-bottom: 1rem;
      flex-wrap: wrap;
      gap: 1rem;
    }

    .event-time {
      font-size: 0.875rem;
      color: #64748b;
      font-weight: 600;
      background: rgba(255, 255, 255, 0.8);
      padding: 0.25rem 0.75rem;
      border-radius: 1rem;
    }

    .event-severity {
      padding: 0.25rem 0.75rem;
      border-radius: 1rem;
      font-size: 0.75rem;
      font-weight: 700;
      text-transform: uppercase;
      color: white;
    }

    .event-severity.critical {
      background: #dc2626;
    }

    .event-severity.high {
      background: #ea580c;
    }

    .event-severity.medium {
      background: #d97706;
    }

    .event-severity.low {
      background: #65a30d;
    }

    .event-title {
      font-size: 1.1rem;
      font-weight: 700;
      color: #1e293b;
      margin-bottom: 0.5rem;
    }

    .event-description {
      color: #475569;
      line-height: 1.6;
      margin-bottom: 1rem;
    }

    .event-details {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 1rem;
      margin-bottom: 1rem;
    }

    .event-detail {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      font-size: 0.875rem;
    }

    .event-detail-icon {
      font-size: 1rem;
    }

    .event-detail-label {
      font-weight: 600;
      color: #374151;
    }

    .event-detail-value {
      color: #64748b;
    }

    .event-tags {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
    }

    .event-tag {
      padding: 0.25rem 0.75rem;
      border-radius: 1rem;
      font-size: 0.75rem;
      font-weight: 600;
      background: rgba(59, 130, 246, 0.1);
      color: #3b82f6;
      border: 1px solid rgba(59, 130, 246, 0.2);
    }

    .timeline-legend {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      border-radius: 1.5rem;
      padding: 2rem;
      box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .timeline-legend h4 {
      color: #1e293b;
      margin: 0 0 1.5rem 0;
      font-size: 1.25rem;
      font-weight: 700;
    }

    .legend-items {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 1rem;
    }

    .legend-item {
      display: flex;
      align-items: center;
      gap: 1rem;
      padding: 0.75rem;
      background: #f8fafc;
      border-radius: 0.75rem;
      border: 1px solid #e2e8f0;
    }

    .legend-dot {
      width: 16px;
      height: 16px;
      border-radius: 50%;
      border: 3px solid white;
      box-shadow: 0 0 0 2px currentColor;
    }

    .legend-dot.critical {
      background: #dc2626;
      color: #dc2626;
    }

    .legend-dot.high {
      background: #ea580c;
      color: #ea580c;
    }

    .legend-dot.medium {
      background: #d97706;
      color: #d97706;
    }

    .legend-dot.low {
      background: #65a30d;
      color: #65a30d;
    }

    .legend-item span {
      color: #374151;
      font-weight: 500;
    }

    @media (max-width: 768px) {
      .timeline-controls {
        flex-direction: column;
        align-items: stretch;
        gap: 1.5rem;
      }

      .timeline-filters {
        justify-content: center;
      }

      .timeline-stats {
        justify-content: space-around;
      }

      .timeline-line {
        left: 1.5rem;
      }

      .timeline-events {
        padding-left: 3rem;
      }

      .timeline-event::before {
        left: -1.25rem;
      }

      .event-header {
        flex-direction: column;
        align-items: stretch;
      }

      .event-details {
        grid-template-columns: 1fr;
      }
    }

    .alert-description {
     color: #cbd5e1;
     font-size: 0.9rem;
     line-height: 1.5;
     margin-bottom: 1rem;
   }

   .alert-details {
     display: flex;
     flex-direction: column;
     gap: 0.25rem;
     font-size: 0.8rem;
     color: #94a3b8;
   }

   /* Estilos para sistema de actualización automática */
   .manual-update-btn {
     background: linear-gradient(135deg, #3b82f6, #1d4ed8);
     color: white;
     border: none;
     padding: 8px 16px;
     border-radius: 6px;
     cursor: pointer;
     font-size: 14px;
     font-weight: 500;
     transition: all 0.3s ease;
     margin-left: auto;
     display: flex;
     align-items: center;
     gap: 6px;
   }
   
   .manual-update-btn:hover {
     background: linear-gradient(135deg, #2563eb, #1e40af);
     transform: translateY(-1px);
     box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
   }
   
   .manual-update-btn:active {
     transform: translateY(0);
   }
   
   .update-indicator {
     animation: pulse 2s infinite;
     box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
   }
   
   @keyframes pulse {
     0%, 100% { opacity: 1; }
     50% { opacity: 0.7; }
   }
   
   .notification {
     animation: slideIn 0.3s ease-out;
     box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
   }
   
   @keyframes slideIn {
     from {
       transform: translateX(100%);
       opacity: 0;
     }
     to {
       transform: translateX(0);
       opacity: 1;
     }
   }
   
   .last-update-time {
     transition: all 0.3s ease;
   }
   
   .last-update-time:hover {
     background: rgba(0, 0, 0, 0.9) !important;
   }
   
   .threat-dashboard-header {
     display: flex;
     align-items: center;
     justify-content: space-between;
     margin-bottom: 2rem;
   }

   /* Estilos para estado de carga */
   .loading-state {
     display: flex;
     flex-direction: column;
     align-items: center;
     justify-content: center;
     padding: 3rem 1rem;
     color: #64748b;
     text-align: center;
   }

   .loading-spinner {
     width: 40px;
     height: 40px;
     border: 3px solid #e2e8f0;
     border-top: 3px solid #3b82f6;
     border-radius: 50%;
     animation: spin 1s linear infinite;
     margin-bottom: 1rem;
   }

   @keyframes spin {
     0% { transform: rotate(0deg); }
     100% { transform: rotate(360deg); }
   }

   .loading-state p {
     margin: 0;
     font-weight: 500;
     color: #475569;
   }

   .loading-placeholder {
     display: flex;
   }
</style>

<style>
   /* ===== RESPONSIVE DESIGN ===== */
   
   /* Tablets (768px - 1024px) */
   @media (max-width: 1024px) {
     .dashboard-header-overlay {
       top: 16px;
       left: 16px;
       right: 16px;
       padding: 1.5rem;
       max-height: 100px;
     }

     .page-title {
       font-size: 1.75rem;
     }

     .filters-panel-overlay {
       top: 130px;
       left: 16px;
       width: 280px;
       max-height: calc(100vh - 170px);
     }

     .countries-overlay {
       top: 130px;
       right: 16px;
       width: 300px;
       max-height: calc(45vh - 80px);
     }

     .attack-categories-overlay {
       bottom: 16px;
       left: 16px;
       width: 280px;
       max-height: calc(45vh - 80px);
     }

     .timeline-overlay {
       bottom: 16px;
       right: 16px;
       width: 320px;
       max-height: calc(45vh - 80px);
     }

     .category-item {
       padding: 14px 18px;
       min-height: 55px;
     }

     .category-icon {
       width: 36px;
       height: 36px;
       font-size: 1.3rem;
     }

     .attack-item {
       padding: 18px 20px;
     }

     .country-item {
       padding: 14px 18px;
     }
   }

   /* Mobile Large (481px - 767px) */
   @media (max-width: 767px) {
     .dashboard-header-overlay {
       top: 12px;
       left: 12px;
       right: 12px;
       padding: 1rem;
       max-height: 80px;
     }

     .page-title {
       font-size: 1.5rem;
     }

     .filters-panel-overlay {
       top: 100px;
       left: 12px;
       right: 12px;
       width: auto;
       flex-direction: row;
       flex-wrap: wrap;
       gap: 0.75rem;
       max-height: 120px;
     }

     .filter-group {
       flex: 1;
       min-width: 120px;
     }

     .countries-overlay {
       top: 240px;
       left: 12px;
       right: 12px;
       width: auto;
       max-height: calc(35vh - 60px);
     }

     .attack-categories-overlay {
       bottom: 12px;
       left: 12px;
       right: 12px;
       width: auto;
       max-height: calc(35vh - 60px);
     }

     .timeline-overlay {
       bottom: calc(35vh + 20px);
       left: 12px;
       right: 12px;
       width: auto;
       max-height: calc(25vh - 40px);
     }

     .categories-grid {
       grid-template-columns: 1fr;
       gap: 6px;
     }

     .category-item {
       padding: 12px 16px;
       min-height: 50px;
       gap: 10px;
     }

     .category-icon {
       width: 32px;
       height: 32px;
       font-size: 1.2rem;
     }

     .attack-item {
       padding: 16px 18px;
       gap: 10px;
     }

     .attack-header {
       flex-direction: column;
       align-items: stretch;
       gap: 8px;
     }

     .attack-time,
     .attack-severity {
       align-self: flex-start;
     }

     .country-item {
       padding: 12px 16px;
     }

     .country-flag {
       width: 28px;
       height: 28px;
       font-size: 1.3rem;
     }

     .country-name {
       font-size: 0.85rem;
     }

     .country-attacks {
       font-size: 0.85rem;
     }
   }

   /* Mobile Small (320px - 480px) */
   @media (max-width: 480px) {
     .dashboard-header-overlay {
       top: 8px;
       left: 8px;
       right: 8px;
       padding: 0.75rem;
       max-height: 70px;
     }

     .page-title {
       font-size: 1.25rem;
     }

     .filters-panel-overlay {
       top: 85px;
       right: 8px;
       left: auto;
       width: calc(48% - 12px);
       padding: 0.6rem;
       flex-direction: column;
       max-height: calc(45vh - 100px);
       gap: 0.3rem;
     }

     .recent-attacks-card {
       top: calc(50vh + 40px);
       right: 8px;
       left: auto;
       width: calc(48% - 12px);
       max-height: calc(50vh - 140px);
     }

     .filter-group {
       width: 100%;
     }

     .countries-overlay {
       top: 240px;
       left: 8px;
       right: 8px;
       padding: 1rem;
       max-height: calc(30vh - 50px);
     }

     .attack-categories-overlay {
       bottom: 8px;
       left: 8px;
       right: 8px;
       padding: 1rem;
       max-height: calc(30vh - 50px);
     }

     .timeline-overlay {
       bottom: calc(30vh + 20px);
       left: 8px;
       right: 8px;
       padding: 1rem;
       max-height: calc(25vh - 40px);
     }

     .category-item {
       padding: 10px 14px;
       min-height: 45px;
       gap: 8px;
     }

     .category-icon {
       width: 28px;
       height: 28px;
       font-size: 1.1rem;
     }

     .category-info {
       flex-direction: column;
       align-items: flex-start;
       gap: 2px;
     }

     .category-name {
       font-size: 0.8rem;
     }

     .category-count {
       font-size: 0.75rem;
     }

     .attack-item {
       padding: 14px 16px;
       gap: 8px;
     }

     .attack-title {
       font-size: 0.85rem;
     }

     .attack-description {
       font-size: 0.75rem;
     }

     .attack-time,
     .attack-severity {
       font-size: 0.7rem;
       padding: 4px 8px;
     }

     .country-item {
       padding: 10px 14px;
     }

     .country-flag {
       width: 24px;
       height: 24px;
       font-size: 1.2rem;
     }

     .country-name {
       font-size: 0.8rem;
     }

     .country-attacks {
       font-size: 0.8rem;
     }

     .country-progress {
       height: 4px;
     }
   }

   /* Mobile Extra Small (max 319px) */
   @media (max-width: 319px) {
     .dashboard-header-overlay {
       padding: 0.5rem;
       max-height: 60px;
     }

     .page-title {
       font-size: 1.1rem;
     }

     .filters-panel-overlay {
       top: 75px;
       padding: 0.75rem;
       max-height: 120px;
     }

     .countries-overlay {
       top: 210px;
       padding: 0.75rem;
       max-height: calc(25vh - 40px);
     }

     .attack-categories-overlay {
       bottom: 8px;
       padding: 0.75rem;
       max-height: calc(25vh - 40px);
     }

     .timeline-overlay {
       bottom: calc(25vh + 20px);
       padding: 0.75rem;
       max-height: calc(20vh - 30px);
     }

     /* Skeleton Loaders */
     .loading-placeholder {
       transition: all 0.3s ease;
     }
     
     .attack-skeleton {
       background: rgba(30, 41, 59, 0.6);
       border-radius: 8px;
       padding: 0.75rem;
       margin-bottom: 0.5rem;
       border: 1px solid rgba(148, 163, 184, 0.1);
       animation: skeleton-pulse 1.5s ease-in-out infinite;
       transition: all 0.3s ease;
     }

     .skeleton-header {
       display: flex;
       justify-content: space-between;
       align-items: center;
       margin-bottom: 0.5rem;
     }

     .skeleton-icon {
       width: 24px;
       height: 24px;
       background: linear-gradient(90deg, rgba(148, 163, 184, 0.1) 25%, rgba(148, 163, 184, 0.2) 50%, rgba(148, 163, 184, 0.1) 75%);
       background-size: 200% 100%;
       border-radius: 50%;
       animation: skeleton-shimmer 2s infinite;
     }

     .skeleton-time {
       width: 60px;
       height: 12px;
       background: linear-gradient(90deg, rgba(148, 163, 184, 0.1) 25%, rgba(148, 163, 184, 0.2) 50%, rgba(148, 163, 184, 0.1) 75%);
       background-size: 200% 100%;
       border-radius: 6px;
       animation: skeleton-shimmer 2s infinite;
     }

     .skeleton-severity {
       width: 50px;
       height: 16px;
       background: linear-gradient(90deg, rgba(148, 163, 184, 0.1) 25%, rgba(148, 163, 184, 0.2) 50%, rgba(148, 163, 184, 0.1) 75%);
       background-size: 200% 100%;
       border-radius: 8px;
       margin-bottom: 0.25rem;
       animation: skeleton-shimmer 2s infinite;
     }

     .skeleton-title {
       width: 80%;
       height: 14px;
       background: linear-gradient(90deg, rgba(148, 163, 184, 0.1) 25%, rgba(148, 163, 184, 0.2) 50%, rgba(148, 163, 184, 0.1) 75%);
       background-size: 200% 100%;
       border-radius: 7px;
       margin-bottom: 0.25rem;
       animation: skeleton-shimmer 2s infinite;
     }

     .skeleton-description {
       width: 90%;
       height: 12px;
       background: linear-gradient(90deg, rgba(148, 163, 184, 0.1) 25%, rgba(148, 163, 184, 0.2) 50%, rgba(148, 163, 184, 0.1) 75%);
       background-size: 200% 100%;
       border-radius: 6px;
       margin-bottom: 0.25rem;
       animation: skeleton-shimmer 2s infinite;
     }

     .skeleton-location {
       width: 70%;
       height: 10px;
       background: linear-gradient(90deg, rgba(148, 163, 184, 0.1) 25%, rgba(148, 163, 184, 0.2) 50%, rgba(148, 163, 184, 0.1) 75%);
       background-size: 200% 100%;
       border-radius: 5px;
       animation: skeleton-shimmer 2s infinite;
     }

     @keyframes skeleton-shimmer {
       0% {
         background-position: -200% 0;
       }
       100% {
         background-position: 200% 0;
       }
     }

     @keyframes skeleton-pulse {
       0%, 100% {
         opacity: 1;
       }
       50% {
         opacity: 0.7;
       }
     }

     .category-item,
     .attack-item,
     .country-item {
       padding: 8px 12px;
     }

     .category-icon {
       width: 24px;
       height: 24px;
       font-size: 1rem;
     }

     .country-flag {
       width: 20px;
       height: 20px;
       font-size: 1.1rem;
     }
   }

   .loading-placeholder {
     flex-direction: column;
     align-items: center;
     justify-content: center;
     padding: 2rem 1rem;
     color: #64748b;
     text-align: center;
   }

   .loading-placeholder .loading-spinner {
     margin: 0 auto 1rem auto;
   }

   .loading-placeholder p {
     margin: 0;
     font-weight: 500;
     color: #475569;
   }

   /* Nuevos estilos para tarjetas de ataques mejoradas */


   .attack-card::before {
     content: '';
     position: absolute;
     top: 0;
     left: 0;
     width: 4px;
     height: 100%;
     transition: all 0.3s ease;
     z-index: 1;
   }

   .attack-card.critical::before {
     background: linear-gradient(180deg, #ff4757 0%, #ff3742 100%);
   }

   .attack-card.high::before {
     background: linear-gradient(180deg, #ff6b35 0%, #ff5722 100%);
   }

   .attack-card.medium::before {
     background: linear-gradient(180deg, #ffa502 0%, #ff9500 100%);
   }

   .attack-card:hover {
     background: linear-gradient(135deg, rgba(15, 23, 42, 0.95) 0%, rgba(30, 41, 59, 0.85) 100%);
     transform: translateY(-4px) scale(1.02);
     box-shadow: 0 20px 40px rgba(0, 0, 0, 0.4), 0 0 0 1px rgba(59, 130, 246, 0.4);
     border-color: rgba(59, 130, 246, 0.4);
   }

   .attack-header {
     display: flex;
     justify-content: space-between;
     align-items: flex-start;
     margin-bottom: 16px;
     position: relative;
     z-index: 2;
   }

   .attack-icon {
     display: flex;
     align-items: center;
     justify-content: center;
     width: 40px;
     height: 40px;
     font-size: 1.3rem;
     background: linear-gradient(135deg, rgba(59, 130, 246, 0.15), rgba(139, 92, 246, 0.15));
     border-radius: 10px;
     border: 1px solid rgba(59, 130, 246, 0.25);
     backdrop-filter: blur(5px);
     flex-shrink: 0;
     transition: all 0.3s ease;
   }

   .attack-card:hover .attack-icon {
     transform: scale(1.1) rotate(5deg);
     background: linear-gradient(135deg, rgba(59, 130, 246, 0.25), rgba(139, 92, 246, 0.25));
   }

   .attack-timeline {
     display: flex;
     flex-direction: column;
     align-items: flex-end;
     gap: 6px;
   }

   .time-ago {
     color: #e2e8f0;
     font-size: 0.75rem;
     font-weight: 600;
     padding: 4px 8px;
     background: linear-gradient(135deg, rgba(59, 130, 246, 0.15), rgba(139, 92, 246, 0.15));
     border-radius: 8px;
     border: 1px solid rgba(59, 130, 246, 0.2);
     backdrop-filter: blur(5px);
     box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
   }

   .progress-bar {
     width: 80px;
     height: 4px;
     background: rgba(148, 163, 184, 0.2);
     border-radius: 2px;
     overflow: hidden;
     position: relative;
   }


   .severity-badge {
     font-size: 0.7rem;
     font-weight: 700;
     padding: 4px 8px;
     border-radius: 8px;
     text-transform: uppercase;
     letter-spacing: 0.05em;
     box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
     backdrop-filter: blur(5px);
   }

   .severity-badge.critical {
     background: linear-gradient(135deg, rgba(239, 68, 68, 0.25), rgba(220, 38, 38, 0.2));
     color: #fef2f2;
     border: 1px solid rgba(239, 68, 68, 0.4);
   }

   .severity-badge.high {
     background: linear-gradient(135deg, rgba(245, 158, 11, 0.25), rgba(217, 119, 6, 0.2));
     color: #fffbeb;
     border: 1px solid rgba(245, 158, 11, 0.4);
   }

   .severity-badge.medium {
     background: linear-gradient(135deg, rgba(59, 130, 246, 0.25), rgba(37, 99, 235, 0.2));
     color: #eff6ff;
     border: 1px solid rgba(59, 130, 246, 0.4);
   }

   .attack-content {
     position: relative;
     z-index: 2;
   }

   .attack-title {
     color: #f8fafc;
     font-weight: 700;
     font-size: 0.95rem;
     line-height: 1.4;
     margin-bottom: 8px;
   }

   .attack-description {
     color: #e2e8f0;
     font-size: 0.8rem;
     line-height: 1.5;
     margin-bottom: 16px;
     opacity: 0.9;
   }

   .attack-metrics {
     display: grid;
     grid-template-columns: 1fr 1fr;
     gap: 8px;
     margin-bottom: 16px;
   }

   .metric {
     display: flex;
     flex-direction: column;
     gap: 2px;
     padding: 8px;
     background: rgba(148, 163, 184, 0.1);
     border-radius: 8px;
     border: 1px solid rgba(148, 163, 184, 0.1);
   }

   /* Nueva clase para contenedor de ubicación y acciones */
   .attack-location-actions {
     display: flex;
     justify-content: space-between;
     align-items: center;
     margin-bottom: 12px;
     gap: 12px;
   }

   .attack-location {
     display: flex;
     align-items: center;
     gap: 6px;
     flex: 1;
   }

   .metric-label {
     color: #94a3b8;
     font-size: 0.7rem;
     font-weight: 500;
   }

   .metric-value {
     color: #e2e8f0;
     font-size: 0.8rem;
     font-weight: 600;
   }

   .attack-location {
     display: flex;
     align-items: center;
     gap: 6px;
     margin-bottom: 12px;
   }

   .location-icon {
     font-size: 12px;
     opacity: 0.7;
   }

   .location-text {
     font-size: 0.75rem;
     color: #3498db;
     font-weight: 600;
   }

   .attack-actions {
     display: flex;
     gap: 8px;
   }

   .btn-analyze {
     padding: 6px 12px;
     background: linear-gradient(135deg, rgba(59, 130, 246, 0.2), rgba(139, 92, 246, 0.2));
     border: 1px solid rgba(59, 130, 246, 0.3);
     border-radius: 8px;
     color: #e2e8f0;
     font-size: 0.7rem;
     font-weight: 600;
     cursor: pointer;
     transition: all 0.3s ease;
     backdrop-filter: blur(5px);
   }

   .btn-analyze:hover {
     background: linear-gradient(135deg, rgba(59, 130, 246, 0.3), rgba(139, 92, 246, 0.3));
     transform: translateY(-1px);
     box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
   }

   .attack-footer {
     display: flex;
     justify-content: flex-end;
     margin-top: 8px;
     padding-top: 8px;
     border-top: 1px solid rgba(148, 163, 184, 0.1);
   }

   .verified-badge {
     font-size: 0.65rem;
     color: #10b981;
     font-weight: 600;
     padding: 2px 6px;
     background: rgba(16, 185, 129, 0.1);
     border-radius: 4px;
     border: 1px solid rgba(16, 185, 129, 0.2);
   }

   /* Responsive para tarjetas */
   @media (max-width: 768px) {
     .attack-card {
       padding: 16px 20px;
     }

     .attack-header {
       flex-direction: column;
       gap: 12px;
       align-items: flex-start;
     }

     .attack-timeline {
       align-items: flex-start;
     }

     .attack-metrics {
       grid-template-columns: 1fr;
     }

     .metric {
       padding: 6px;
     }
   }

   @media (max-width: 480px) {
     .attack-card {
       padding: 16px;
       border-radius: 16px;
       margin: 8px 0;
       box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
     }

     .attack-header {
       flex-direction: row;
       align-items: center;
       gap: 12px;
       margin-bottom: 12px;
     }

     .attack-icon {
       width: 36px;
       height: 36px;
       font-size: 1.2rem;
       flex-shrink: 0;
     }

     .attack-timeline {
       flex: 1;
       align-items: flex-start;
     }

     .time-ago {
       font-size: 0.75rem;
       padding: 4px 8px;
     }

     .progress-bar {
       width: 100%;
       max-width: 120px;
     }

     .severity-badge {
       font-size: 0.65rem;
       padding: 3px 6px;
     }

     .attack-title {
       font-size: 0.9rem;
       margin-bottom: 6px;
       line-height: 1.3;
     }

     .attack-description {
       font-size: 0.8rem;
       line-height: 1.4;
       margin-bottom: 12px;
     }

     .attack-metrics {
       grid-template-columns: 1fr;
       gap: 8px;
       margin-bottom: 12px;
     }

     .metric {
       padding: 8px;
       border-radius: 8px;
     }

     .metric-label {
       font-size: 0.7rem;
     }

     .metric-value {
       font-size: 0.8rem;
     }

     .attack-location-actions {
       flex-direction: column;
       gap: 8px;
     }

     .attack-location {
       margin-bottom: 0;
     }

     .location-text {
       font-size: 0.8rem;
     }

     .btn-analyze {
       width: 100%;
       padding: 8px 12px;
       font-size: 0.75rem;
     }

     .attack-footer {
       margin-top: 12px;
       padding-top: 12px;
     }

     .verified-badge {
       font-size: 0.7rem;
       padding: 3px 8px;
     }
   }

   /* Optimización para pantallas muy pequeñas */
   @media (max-width: 360px) {
     .attack-card {
       padding: 12px;
     }

     .attack-header {
       gap: 8px;
     }

     .attack-icon {
       width: 32px;
       height: 32px;
       font-size: 1rem;
     }

     .time-ago {
       font-size: 0.7rem;
     }

     .attack-title {
       font-size: 0.85rem;
     }

     .attack-description {
       font-size: 0.75rem;
     }

     .btn-analyze {
       padding: 6px 10px;
       font-size: 0.7rem;
     }
   }

   /* Notificaciones de análisis */
   .analysis-notification {
     position: fixed;
     top: 20px;
     right: 20px;
     z-index: 10000;
     background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
     color: white;
     border-radius: 12px;
     padding: 16px;
     box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
     max-width: 350px;
     transform: translateX(400px);
     opacity: 0;
     transition: all 0.4s cubic-bezier(0.68, -0.55, 0.27, 1.55);
     backdrop-filter: blur(10px);
     border: 1px solid rgba(255, 255, 255, 0.1);
   }

   .analysis-notification.show {
     transform: translateX(0);
     opacity: 1;
   }

   .notification-content {
     display: flex;
     align-items: flex-start;
     gap: 12px;
   }

   .notification-icon {
     font-size: 20px;
     flex-shrink: 0;
   }

   .notification-text {
     flex: 1;
     display: flex;
     flex-direction: column;
     gap: 4px;
   }

   .notification-text strong {
     font-size: 14px;
     font-weight: 600;
   }

   .notification-text span {
     font-size: 12px;
     opacity: 0.9;
     line-height: 1.3;
   }

   .notification-close {
     background: none;
     border: none;
     color: white;
     font-size: 18px;
     cursor: pointer;
     padding: 0;
     width: 24px;
     height: 24px;
     display: flex;
     align-items: center;
     justify-content: center;
     border-radius: 50%;
     transition: background-color 0.2s;
   }

   .notification-close:hover {
     background-color: rgba(255, 255, 255, 0.2);
   }

   /* ===== DISEÑO MOBILE-FIRST COMPLETO ===== */
   
   /* Sistema de navegación móvil con pestañas - DISEÑO MODERNO */
   .mobile-navigation {
     display: none; /* Oculto por defecto */
     position: fixed;
     bottom: 24px;
     left: 50%;
     transform: translateX(-50%);
     z-index: 10000;
     background: linear-gradient(145deg, rgba(15, 23, 42, 0.98), rgba(30, 41, 59, 0.95));
     backdrop-filter: blur(24px) saturate(180%);
     border-radius: 24px;
     padding: 8px;
     box-shadow: 
       0 20px 40px rgba(0, 0, 0, 0.6),
       0 8px 16px rgba(0, 0, 0, 0.4),
       inset 0 1px 0 rgba(255, 255, 255, 0.1);
     border: 1px solid rgba(59, 130, 246, 0.3);
     max-width: calc(100vw - 32px);
     width: auto;
   }
   
   /* Mostrar solo en dispositivos móviles */
   @media (max-width: 768px) {
     .mobile-navigation {
       display: flex !important;
     }
   }
   
   .nav-tabs {
     display: flex;
     gap: 6px;
     align-items: center;
   }
   
   /* ===== NAVEGACIÓN PROFESIONAL CON DISEÑO MEJORADO ===== */
   .nav-tab {
     padding: 18px 24px;
     border-radius: 6px;
     background: linear-gradient(135deg, #F8F9FA 0%, #E9ECEF 100%);
     border: 1px solid rgba(52, 73, 94, 0.1);
     color: #95A5A6;
     font-size: 1.08rem; /* 20% mayor que el texto normal (0.9rem base) */
     font-weight: 600; /* Semibold como especificado */
     letter-spacing: 0.025em;
     cursor: pointer;
     transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
     display: flex;
     flex-direction: column;
     align-items: center;
     gap: 8px;
     min-height: 64px;
     min-width: 80px;
     position: relative;
     overflow: hidden;
     text-transform: none;
     font-family: 'Segoe UI', 'Roboto', -apple-system, BlinkMacSystemFont, sans-serif;
     box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
     opacity: 0.8;
     margin-bottom: 24px;
   }
   
   .nav-tab i {
     font-size: 1.2rem;
     transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
     color: inherit;
   }
   
   .nav-tab::before {
     content: '';
     position: absolute;
     top: 0;
     left: 0;
     right: 0;
     bottom: 0;
     background: linear-gradient(135deg, #F8F9FA 0%, #E9ECEF 100%);
     border-radius: 6px;
     opacity: 1;
     transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
     z-index: -1;
   }
   
   .nav-tab.active {
     background: #3498DB; /* Color activo específico */
     color: #ffffff;
     box-shadow: 
       0 2px 4px rgba(0, 0, 0, 0.1),
       0 4px 8px rgba(52, 152, 219, 0.3);
     transform: translateY(-1px);
     border: 1px solid #3498DB;
     border-bottom: 3px solid #3498DB; /* Borde inferior de 3px como especificado */
     opacity: 1;
   }
   
   .nav-tab.active i {
     color: #ffffff;
     transform: scale(1.05);
   }
   
   .nav-tab.active::before {
     background: #3498DB;
   }
   
   .nav-tab:hover:not(.active) {
     background: linear-gradient(135deg, #FFFFFF 0%, #F8F9FA 100%);
     color: #2C3E50;
     transform: translateY(-1px);
     box-shadow: 
       0 4px 8px rgba(0, 0, 0, 0.15),
       0 2px 4px rgba(0, 0, 0, 0.1);
     opacity: 1;
     border-color: rgba(52, 73, 94, 0.2);
   }
   
   .nav-tab:hover:not(.active)::before {
     background: linear-gradient(135deg, #FFFFFF 0%, #F8F9FA 100%);
   }
   
   .nav-tab:hover:not(.active) i {
     transform: scale(1.05);
     color: #34495E;
   }
   
   .nav-tab:active {
     transform: translateY(0) scale(0.98);
   }
   
   /* Animación ripple para efectos táctiles */
   @keyframes ripple {
     0% {
       transform: scale(0);
       opacity: 1;
     }
     100% {
       transform: scale(2);
       opacity: 0;
     }
   }
   
   /* Mejoras de accesibilidad y UX */
   .nav-tab:focus {
     outline: 2px solid rgba(59, 130, 246, 0.6);
     outline-offset: 2px;
   }
   
   .nav-tab:focus:not(:focus-visible) {
     outline: none;
   }

   /* ===== ESTILOS MEJORADOS PARA PESTAÑAS ===== */
   
   /* Indicadores de estado en pestañas */
   .nav-tab .status-indicator {
     position: absolute;
     top: 8px;
     right: 8px;
     width: 8px;
     height: 8px;
     border-radius: 50%;
     background: #ef4444;
     animation: pulse 2s infinite;
   }

   .nav-tab .status-indicator.safe {
     background: #10b981;
   }

   .nav-tab .status-indicator.warning {
     background: #f59e0b;
   }

   .nav-tab .status-indicator.critical {
     background: #ef4444;
   }

   @keyframes pulse {
     0%, 100% { opacity: 1; transform: scale(1); }
     50% { opacity: 0.7; transform: scale(1.2); }
   }

   /* Contador de notificaciones */
   .nav-tab .notification-badge {
     position: absolute;
     top: 4px;
     right: 4px;
     background: linear-gradient(135deg, #ef4444, #dc2626);
     color: white;
     font-size: 0.7rem;
     font-weight: 700;
     padding: 2px 6px;
     border-radius: 10px;
     min-width: 16px;
     text-align: center;
     box-shadow: 0 2px 8px rgba(239, 68, 68, 0.4);
     animation: bounce 0.5s ease-out;
   }

   @keyframes bounce {
     0% { transform: scale(0); }
     50% { transform: scale(1.2); }
     100% { transform: scale(1); }
   }

   /* ===== ESTILOS PARA PESTAÑA STATS MEJORADA ===== */
   
   .stats-enhanced {
     padding: 20px;
     background: linear-gradient(135deg, rgba(15, 23, 42, 0.95), rgba(30, 41, 59, 0.9));
     border-radius: 16px;
     backdrop-filter: blur(20px);
   }

   .executive-summary {
     background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(147, 51, 234, 0.05));
     border: 1px solid rgba(59, 130, 246, 0.2);
     border-radius: 12px;
     padding: 16px;
     margin-bottom: 20px;
   }

   .summary-grid {
     display: grid;
     grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
     gap: 12px;
   }

   .summary-metric {
     text-align: center;
     padding: 12px;
     background: rgba(255, 255, 255, 0.05);
     border-radius: 8px;
     border: 1px solid rgba(255, 255, 255, 0.1);
   }

   .summary-value {
     font-size: 1.5rem;
     font-weight: 700;
     color: #60a5fa;
     display: block;
   }

   .summary-label {
     font-size: 0.75rem;
     color: rgba(226, 232, 240, 0.7);
     text-transform: uppercase;
     letter-spacing: 0.05em;
   }

   .performance-metrics, .trend-analysis, .threat-types-section {
     margin-bottom: 20px;
   }

   .metrics-grid {
     display: grid;
     grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
     gap: 12px;
   }

   .metric-item {
     background: rgba(255, 255, 255, 0.05);
     border: 1px solid rgba(255, 255, 255, 0.1);
     border-radius: 8px;
     padding: 12px;
     text-align: center;
     transition: all 0.3s ease;
   }

   .metric-item:hover {
     background: rgba(255, 255, 255, 0.08);
     transform: translateY(-2px);
   }

   .metric-value {
     font-size: 1.2rem;
     font-weight: 600;
     color: #ffffff;
   }

   .metric-trend {
     font-size: 0.8rem;
     margin-top: 4px;
   }

   .metric-trend.up { color: #10b981; }
   .metric-trend.down { color: #ef4444; }
   .metric-trend.stable { color: #6b7280; }

   /* ===== ESTILOS PARA PESTAÑA ATAQUES MEJORADA ===== */
   
   .attacks-enhanced {
     padding: 20px;
   }

   .activity-summary {
     display: grid;
     grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
     gap: 12px;
     margin-bottom: 20px;
   }

   .activity-stat {
     background: rgba(255, 255, 255, 0.05);
     border: 1px solid rgba(255, 255, 255, 0.1);
     border-radius: 8px;
     padding: 12px;
     text-align: center;
   }

   .timeline-container {
     background: rgba(15, 23, 42, 0.5);
     border-radius: 12px;
     padding: 16px;
     margin-bottom: 20px;
     max-height: 400px;
     overflow-y: auto;
   }

   .timeline-item {
     display: flex;
     align-items: center;
     padding: 12px;
     margin-bottom: 8px;
     background: rgba(255, 255, 255, 0.03);
     border-radius: 8px;
     border-left: 3px solid #6b7280;
     transition: all 0.3s ease;
   }

   .timeline-item.critical { border-left-color: #ef4444; }
   .timeline-item.high { border-left-color: #f59e0b; }
   .timeline-item.medium { border-left-color: #eab308; }
   .timeline-item.low { border-left-color: #10b981; }

   .timeline-empty {
     text-align: center;
     padding: 40px 20px;
     color: rgba(226, 232, 240, 0.6);
     font-style: italic;
     background: rgba(255, 255, 255, 0.02);
     border-radius: 8px;
     border: 1px dashed rgba(226, 232, 240, 0.2);
   }

   .timeline-time {
     min-width: 60px;
     font-size: 0.75rem;
     color: rgba(226, 232, 240, 0.6);
     font-weight: 500;
   }

   .timeline-content {
     flex: 1;
     margin-left: 12px;
   }

   .attack-header {
     display: flex;
     justify-content: space-between;
     align-items: center;
     margin-bottom: 4px;
   }

   .attack-type-badge {
     display: flex;
     align-items: center;
     gap: 4px;
     padding: 2px 8px;
     border-radius: 12px;
     font-size: 0.7rem;
     font-weight: 600;
     text-transform: uppercase;
   }

   .attack-type-badge.malware { background: rgba(239, 68, 68, 0.2); color: #fca5a5; }
   .attack-type-badge.phishing { background: rgba(245, 158, 11, 0.2); color: #fcd34d; }
   .attack-type-badge.ransomware { background: rgba(139, 69, 19, 0.2); color: #d97706; }
   .attack-type-badge.ddos { background: rgba(59, 130, 246, 0.2); color: #93c5fd; }
   .attack-type-badge.botnet { background: rgba(107, 114, 128, 0.2); color: #d1d5db; }

   .attack-status {
     display: flex;
     align-items: center;
     gap: 4px;
     padding: 2px 8px;
     border-radius: 12px;
     font-size: 0.7rem;
     font-weight: 600;
   }

   .attack-status.blocked { background: rgba(16, 185, 129, 0.2); color: #6ee7b7; }
   .attack-status.active { background: rgba(239, 68, 68, 0.2); color: #fca5a5; }

   .attack-title {
     font-weight: 500;
     color: #ffffff;
     margin-bottom: 4px;
   }

   .attack-details {
     display: flex;
     gap: 12px;
     font-size: 0.75rem;
     color: rgba(226, 232, 240, 0.6);
   }

   .heatmap-container {
     background: rgba(15, 23, 42, 0.5);
     border-radius: 12px;
     padding: 16px;
     margin-bottom: 20px;
   }

   .heatmap-grid {
     display: grid;
     grid-template-columns: repeat(12, 1fr);
     gap: 4px;
   }

   .heatmap-cell {
     aspect-ratio: 1;
     border-radius: 4px;
     display: flex;
     flex-direction: column;
     align-items: center;
     justify-content: center;
     font-size: 0.6rem;
     cursor: pointer;
     transition: all 0.3s ease;
   }

   .heatmap-cell.very-low { background: rgba(107, 114, 128, 0.3); }
   .heatmap-cell.low { background: rgba(34, 197, 94, 0.4); }
   .heatmap-cell.medium { background: rgba(234, 179, 8, 0.5); }
   .heatmap-cell.high { background: rgba(249, 115, 22, 0.6); }
   .heatmap-cell.very-high { background: rgba(239, 68, 68, 0.7); }

   .heatmap-cell:hover {
     transform: scale(1.1);
     z-index: 10;
   }

   .vectors-container {
     background: rgba(15, 23, 42, 0.5);
     border-radius: 12px;
     padding: 16px;
   }

   .vector-item {
     display: flex;
     align-items: center;
     padding: 12px;
     margin-bottom: 8px;
     background: rgba(255, 255, 255, 0.03);
     border-radius: 8px;
     transition: all 0.3s ease;
   }

   .vector-item:hover {
     background: rgba(255, 255, 255, 0.06);
   }

   .vector-icon {
     width: 40px;
     height: 40px;
     border-radius: 8px;
     background: rgba(59, 130, 246, 0.2);
     display: flex;
     align-items: center;
     justify-content: center;
     color: #60a5fa;
     margin-right: 12px;
   }

   .vector-info {
     flex: 1;
   }

   .vector-name {
     font-weight: 500;
     color: #ffffff;
   }

   .vector-stats {
     display: flex;
     gap: 8px;
     margin-top: 2px;
   }

   .vector-percentage {
     font-weight: 600;
     color: #60a5fa;
   }

   .vector-trend {
     font-size: 0.8rem;
   }

   .vector-trend.up { color: #10b981; }
   .vector-trend.down { color: #ef4444; }
   .vector-trend.neutral { color: #6b7280; }

   .vector-bar {
     width: 60px;
     height: 6px;
     background: rgba(255, 255, 255, 0.1);
     border-radius: 3px;
     overflow: hidden;
   }

   .vector-fill {
     height: 100%;
     background: linear-gradient(90deg, #60a5fa, #3b82f6);
     border-radius: 3px;
     transition: width 0.5s ease;
   }

   /* ===== ESTILOS PARA PESTAÑA FILTROS MEJORADA ===== */
   
   .filters-container.enhanced {
     padding: 20px;
   }

   .quick-filters {
     margin-bottom: 24px;
   }

   .quick-filter-buttons {
     display: grid;
     grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
     gap: 8px;
     margin-top: 12px;
   }

   .quick-filter {
     background: rgba(255, 255, 255, 0.05);
     border: 1px solid rgba(255, 255, 255, 0.1);
     border-radius: 8px;
     padding: 12px;
     color: rgba(226, 232, 240, 0.8);
     cursor: pointer;
     transition: all 0.3s ease;
     display: flex;
     flex-direction: column;
     align-items: center;
     gap: 4px;
   }

   .quick-filter.active {
     background: rgba(59, 130, 246, 0.2);
     border-color: rgba(59, 130, 246, 0.4);
     color: #ffffff;
   }

   .quick-filter .count {
     font-size: 0.8rem;
     font-weight: 600;
     color: #60a5fa;
   }

   .search-section {
     margin-bottom: 24px;
   }

   .search-input-group {
     display: flex;
     gap: 8px;
     margin-top: 12px;
   }

   .search-input {
     flex: 1;
     background: rgba(255, 255, 255, 0.05);
     border: 1px solid rgba(255, 255, 255, 0.1);
     border-radius: 8px;
     padding: 12px;
     color: #ffffff;
     font-size: 0.9rem;
   }

   .search-btn {
     background: rgba(59, 130, 246, 0.2);
     border: 1px solid rgba(59, 130, 246, 0.4);
     border-radius: 8px;
     padding: 12px 16px;
     color: #60a5fa;
     cursor: pointer;
     transition: all 0.3s ease;
   }

   .search-suggestions {
     display: flex;
     gap: 8px;
     margin-top: 8px;
     flex-wrap: wrap;
   }

   .suggestion-tag {
     background: rgba(107, 114, 128, 0.2);
     color: #d1d5db;
     padding: 4px 8px;
     border-radius: 12px;
     font-size: 0.75rem;
     cursor: pointer;
     transition: all 0.3s ease;
   }

   .suggestion-tag:hover {
     background: rgba(59, 130, 246, 0.2);
     color: #60a5fa;
   }

   .category-filters {
     margin-bottom: 24px;
   }

   .filter-group {
     background: rgba(255, 255, 255, 0.03);
     border: 1px solid rgba(255, 255, 255, 0.1);
     border-radius: 8px;
     margin-bottom: 12px;
     overflow: hidden;
   }

   .filter-header {
     display: flex;
     justify-content: space-between;
     align-items: center;
     padding: 12px 16px;
     background: rgba(255, 255, 255, 0.05);
     cursor: pointer;
     transition: all 0.3s ease;
   }

   .filter-header:hover {
     background: rgba(255, 255, 255, 0.08);
   }

   .filter-content {
     padding: 16px;
     max-height: 200px;
     overflow-y: auto;
   }

   .filter-option {
     margin-bottom: 8px;
   }

   .filter-checkbox {
     display: flex;
     align-items: center;
     cursor: pointer;
     padding: 8px;
     border-radius: 6px;
     transition: all 0.3s ease;
   }

   .filter-checkbox:hover {
     background: rgba(255, 255, 255, 0.05);
   }

   .filter-info {
     display: flex;
     align-items: center;
     gap: 8px;
     margin-left: 8px;
   }

   .filter-icon, .protection-icon {
     width: 24px;
     height: 24px;
     display: flex;
     align-items: center;
     justify-content: center;
   }

   .filter-details {
     flex: 1;
   }

   .filter-name {
     font-weight: 500;
     color: #ffffff;
     display: block;
   }

   .filter-count, .filter-region {
     font-size: 0.75rem;
     color: rgba(226, 232, 240, 0.6);
   }






   
   /* Estados de visibilidad para móviles */
   .mobile-hidden {
     display: none;
   }
   
   .mobile-visible {
     display: block;
   }
   
   /* Modo móvil completo */
   @media (max-width: 1024px) {
     /* Ocultar elementos de escritorio */
     .dashboard-cards-grid,
     .recent-attacks-card,
     .filters-panel-overlay {
       display: none !important;
     }
     
     /* Navegación móvil ultra-moderna - activada en móviles */
     .mobile-navigation {
       display: flex !important;
     }
     
     /* Ajustes específicos para pantallas pequeñas */
     @media (max-width: 480px) {
       .mobile-navigation {
         bottom: 16px;
         left: 16px;
         right: 16px;
         transform: none;
         max-width: none;
         width: auto;
       }
       
       .nav-tab {
         min-width: 70px;
         padding: 12px 8px;
         font-size: 0.7rem;
         flex-direction: column;
         gap: 4px;
       }
       
       .nav-tab span {
         display: block;
         font-size: 0.65rem;
         font-weight: 500;
         line-height: 1;
         margin-top: 2px;
       }
       
       .nav-tab i {
         font-size: 1.1rem;
         margin-bottom: 2px;
       }
     }
     
     /* Header optimizado para móviles - flotante sobre el mapa */
     .dashboard-header-overlay {
       position: fixed;
       top: env(safe-area-inset-top, 12px);
       left: 12px;
       right: 12px;
       padding: 0.75rem 1rem;
       max-height: 60px;
       backdrop-filter: blur(20px);
       z-index: 9000;
       background: rgba(15, 23, 42, 0.8);
       border-radius: 16px;
       border: 1px solid rgba(255, 255, 255, 0.1);
     }
     
     .page-title {
       font-size: 1.1rem;
       text-align: center;
       margin: 0;
       font-weight: 600;
     }
     
     /* Contenedor principal móvil */
     .mobile-content-container {
       position: fixed;
       top: 100px;
       left: 0;
       right: 0;
       bottom: 80px;
       z-index: 9500;
       overflow: hidden;
       pointer-events: none; /* Permite interacción con el mapa cuando no hay panel activo */
       display: block !important; /* Asegurar que sea visible */
     }
     
     /* ===== PANELES MÓVILES OPTIMIZADOS ===== */
     .mobile-panel {
       position: absolute;
       top: 0;
       left: 0;
       right: 0;
       bottom: 0;
       background: rgba(15, 23, 42, 0.98);
       backdrop-filter: blur(40px);
       padding: 24px 20px 80px 20px; /* Espacio para navegación inferior */
       overflow-y: auto;
       -webkit-overflow-scrolling: touch;
       transform: translateX(100%);
       transition: transform 0.4s cubic-bezier(0.4, 0, 0.2, 1);
       scrollbar-width: thin;
       scrollbar-color: rgba(59, 130, 246, 0.3) transparent;
       z-index: 9600;
       pointer-events: auto; /* Restaura la interacción en los paneles */
     }
     
     .mobile-panel::-webkit-scrollbar {
       width: 6px;
     }
     
     .mobile-panel::-webkit-scrollbar-track {
       background: transparent;
     }
     
     .mobile-panel::-webkit-scrollbar-thumb {
       background: rgba(59, 130, 246, 0.3);
       border-radius: 3px;
     }
     
     .mobile-panel.active {
       transform: translateX(0);
     }
     
     /* Cuando hay un panel activo, el contenedor debe capturar eventos */
     .mobile-content-container:has(.mobile-panel.active) {
       pointer-events: auto;
     }
     
     /* Overlay para bloquear interacción con el mapa cuando hay panel activo */
     .mobile-panel.active::before {
       content: '';
       position: fixed;
       top: 0;
       left: 0;
       right: 0;
       bottom: 0;
       background: rgba(0, 0, 0, 0.3);
       z-index: -1;
       backdrop-filter: blur(2px);
     }
     
     /* Panel de estadísticas */
     .stats-panel .dashboard-card {
       margin-bottom: 20px;
       background: linear-gradient(135deg, rgba(30, 41, 59, 0.9), rgba(15, 23, 42, 0.8));
       border: 1px solid rgba(255, 255, 255, 0.1);
       border-radius: 16px;
       padding: 1.25rem;
       backdrop-filter: blur(10px);
       transition: all 0.3s ease;
     }
     
     .stats-panel .dashboard-card:hover {
       border-color: rgba(59, 130, 246, 0.3);
       box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
       transform: translateY(-2px);
     }
     
     .stats-panel .metric-value {
       font-size: 1.8rem;
       font-weight: 700;
       color: #ffffff;
       margin-bottom: 0.5rem;
     }
     
     .stats-panel .metric-label {
       font-size: 0.9rem;
       color: #94a3b8;
       text-transform: uppercase;
       letter-spacing: 0.5px;
     }
     
     /* Panel de ataques recientes */
     .attacks-panel .recent-attacks-list {
       display: flex;
       flex-direction: column;
       gap: 16px;
     }
     
     .attacks-panel .attack-item {
       background: linear-gradient(135deg, rgba(30, 41, 59, 0.9), rgba(15, 23, 42, 0.8));
       border: 1px solid rgba(255, 255, 255, 0.1);
       border-radius: 16px;
       padding: 1.25rem;
       backdrop-filter: blur(10px);
       transition: all 0.3s ease;
     }
     
     .attacks-panel .attack-item:hover {
       border-color: rgba(59, 130, 246, 0.3);
       box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
       transform: translateY(-2px);
     }
     
     .attacks-panel .attack-header {
       display: flex;
       justify-content: space-between;
       align-items: center;
       margin-bottom: 0.75rem;
     }
     
     .attacks-panel .attack-type {
       font-weight: 600;
       color: #e2e8f0;
       font-size: 1rem;
     }
     
     .attacks-panel .attack-time {
       font-size: 0.85rem;
       color: #94a3b8;
     }
     
     .attacks-panel .attack-details {
       color: #cbd5e1;
       font-size: 0.9rem;
       line-height: 1.5;
     }
     

     
     /* Cabecera de panel profesional */
     .panel-header {
       position: sticky;
       top: 0;
       background: rgba(15, 23, 42, 0.95);
       backdrop-filter: blur(20px);
       padding: 20px 0 16px 0;
       margin: -24px -20px 24px -20px;
       border-bottom: 1px solid rgba(255, 255, 255, 0.1);
       z-index: 10;
     }
     
     .panel-header h2 {
       font-size: 1.5rem;
       font-weight: 700;
       color: #ffffff;
       margin: 0;
       text-align: center;
       padding: 0 20px;
       text-transform: uppercase;
       letter-spacing: 1px;
     }
     
     /* Botón de cerrar panel mejorado */
     .close-panel {
       position: absolute;
       top: 20px;
       right: 20px;
       background: rgba(239, 68, 68, 0.1);
       border: 1px solid rgba(239, 68, 68, 0.3);
       border-radius: 50%;
       width: 40px;
       height: 40px;
       display: flex;
       align-items: center;
       justify-content: center;
       color: #ef4444;
       cursor: pointer;
       transition: all 0.3s ease;
       z-index: 1000;
     }
     
     .close-panel:hover {
       background: rgba(239, 68, 68, 0.2);
       border-color: rgba(239, 68, 68, 0.5);
       transform: scale(1.1);
     }
     
     .close-panel i {
       font-size: 1rem;
     }
     

     
     /* Estilos mejorados para panel de estadísticas móviles */
     .stats-panel .stats-header {
       margin-bottom: 1.5rem;
       text-align: center;
     }
     
     .stats-panel .stats-header h3 {
       font-size: 1.5rem;
       font-weight: 600;
       margin-bottom: 0.5rem;
       color: #e2e8f0;
     }
     
     .stats-panel .last-update {
       font-size: 0.875rem;
       color: #94a3b8;
     }
     
     .stats-panel .dashboard-cards-grid {
       display: grid;
       grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
       gap: 1rem;
       margin-bottom: 2rem;
     }
     
     /* ===== TARJETAS MÉTRICAS OPTIMIZADAS ===== */
     .stats-panel .dashboard-card {
       background: linear-gradient(135deg, rgba(30, 41, 59, 0.95), rgba(15, 23, 42, 0.9));
       border: 1px solid rgba(255, 255, 255, 0.12);
       border-radius: 20px;
       padding: 1.5rem 1rem;
       text-align: center;
       backdrop-filter: blur(15px);
       transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
       box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
     }
     
     .stats-panel .dashboard-card:hover {
       transform: translateY(-2px);
       box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
       border-color: rgba(59, 130, 246, 0.3);
     }
     
     .stats-panel .dashboard-card .card-header {
       display: flex;
       align-items: center;
       justify-content: center;
       gap: 0.5rem;
       margin-bottom: 0.75rem;
     }
     
     .stats-panel .dashboard-card .card-header i {
       font-size: 1.1rem;
       color: #3b82f6;
     }
     
     .stats-panel .dashboard-card .card-header h3 {
       font-size: 0.9rem;
       font-weight: 500;
       margin: 0;
       color: #cbd5e1;
     }
     
     .stats-panel .dashboard-card .stat-value {
       font-size: 1.5rem;
       font-weight: 700;
       color: #ffffff;
       margin-bottom: 0.25rem;
     }
     
     .stats-panel .dashboard-card .stat-label {
       font-size: 0.8rem;
       color: #94a3b8;
     }
     
     /* ===== ESTILOS OPTIMIZADOS PARA CONTENIDO DE PESTAÑAS MÓVILES ===== */
     
     /* Contenedor principal del panel */
     .panel-content {
       padding: 0;
       margin: 0;
       min-height: 300px;
       overflow-y: auto;
       scrollbar-width: thin;
       scrollbar-color: rgba(255, 255, 255, 0.3) transparent;
     }
     
     .panel-content::-webkit-scrollbar {
       width: 4px;
     }
     
     .panel-content::-webkit-scrollbar-track {
       background: transparent;
     }
     
     .panel-content::-webkit-scrollbar-thumb {
       background: rgba(255, 255, 255, 0.3);
       border-radius: 2px;
     }
     
     /* Contenido de estadísticas optimizado */
     .stats-content {
       padding: 1rem;
       animation: fadeInUp 0.6s ease-out;
     }

     /* NUEVOS ESTILOS PARA STATS MEJORADOS */
     .stats-content-enhanced {
       padding: 0;
       animation: fadeInUp 0.6s ease-out;
       display: flex;
       flex-direction: column;
       gap: 2rem;
     }

     /* ===== DIFERENCIACIÓN VISUAL ENTRE SECCIONES ===== */
     
     /* Grupos de secciones con Glass Effect Mejorado */
     .stats-section-group {
       background: linear-gradient(135deg, 
         rgba(255, 255, 255, 0.12) 0%,
         rgba(255, 255, 255, 0.06) 50%,
         rgba(255, 255, 255, 0.02) 100%);
       border: 1px solid rgba(255, 255, 255, 0.15);
       border-radius: 24px;
       overflow: hidden;
       backdrop-filter: blur(25px);
       box-shadow: 
         0 8px 32px rgba(0, 0, 0, 0.15),
         0 0 0 1px rgba(255, 255, 255, 0.05),
         inset 0 1px 0 rgba(255, 255, 255, 0.1);
       transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
       position: relative;
       margin-bottom: 24px; /* Espaciado vertical de 24px entre secciones */
     }
     
     /* Borde divisorio entre elementos de sección */
     .stats-section-group + .stats-section-group::before {
       content: '';
       position: absolute;
       top: -12px;
       left: 50%;
       transform: translateX(-50%);
       width: 80%;
       height: 1px;
       background: #ECF0F1;
       z-index: 1;
     }

     .stats-section-group::before {
       content: '';
       position: absolute;
       top: 0;
       left: 0;
       right: 0;
       bottom: 0;
       background: linear-gradient(135deg, 
         rgba(255, 255, 255, 0.08) 0%,
         transparent 50%,
         rgba(255, 255, 255, 0.03) 100%);
       opacity: 0;
       transition: opacity 0.3s ease;
       pointer-events: none;
     }

     .stats-section-group:hover {
       border-color: rgba(255, 255, 255, 0.25);
       box-shadow: 
         0 20px 60px rgba(0, 0, 0, 0.2),
         0 0 0 1px rgba(255, 255, 255, 0.15),
         inset 0 1px 0 rgba(255, 255, 255, 0.2);
       transform: translateY(-4px) scale(1.01);
       background: linear-gradient(135deg, 
         rgba(255, 255, 255, 0.15) 0%,
         rgba(255, 255, 255, 0.08) 50%,
         rgba(255, 255, 255, 0.04) 100%);
     }

     .stats-section-group:hover::before {
       opacity: 1;
     }

     /* Headers de grupos de secciones con Glass Effect */
     .section-group-header {
       background: linear-gradient(135deg, 
         rgba(255, 255, 255, 0.1) 0%,
         rgba(255, 255, 255, 0.05) 100%);
       border-bottom: 1px solid rgba(255, 255, 255, 0.15);
       padding: 1.5rem 2rem;
       display: flex;
       justify-content: space-between;
       align-items: center;
       backdrop-filter: blur(15px);
       position: relative;
     }

     .section-group-header::before {
       content: '';
       position: absolute;
       top: 0;
       left: 0;
       right: 0;
       height: 1px;
       background: linear-gradient(90deg, 
         transparent,
         rgba(255, 255, 255, 0.3),
         transparent);
     }

     .header-content {
       display: flex;
       align-items: center;
       gap: 1rem;
     }

     .header-content i {
       color: #3b82f6;
       font-size: 1.5rem;
       width: 24px;
       text-align: center;
     }

     .header-content h2 {
       font-size: 1.4rem;
       font-weight: 700;
       color: #ffffff;
       margin: 0;
       letter-spacing: -0.025em;
     }

     .header-meta {
       display: flex;
       align-items: center;
       gap: 1rem;
     }

     .update-indicator {
       display: flex;
       align-items: center;
       gap: 0.5rem;
       font-size: 0.85rem;
       color: #94a3b8;
       font-weight: 500;
     }

     .update-indicator .pulse {
       color: #10b981;
       animation: pulse 2s infinite;
     }

     .header-actions {
       display: flex;
       gap: 0.5rem;
     }

     .action-btn {
       background: rgba(255, 255, 255, 0.1);
       border: 1px solid rgba(255, 255, 255, 0.2);
       border-radius: 8px;
       padding: 0.5rem;
       color: #94a3b8;
       cursor: pointer;
       transition: all 0.3s ease;
     }

     .action-btn:hover {
       background: rgba(59, 130, 246, 0.2);
       border-color: rgba(59, 130, 246, 0.4);
       color: #3b82f6;
     }

     /* Contenido de secciones */
     .section-content {
       padding: 2rem;
     }

     /* Tarjeta de nivel de amenaza */
     .threat-level-card {
       background: linear-gradient(135deg, rgba(239, 68, 68, 0.1), rgba(185, 28, 28, 0.05));
       border: 1px solid rgba(239, 68, 68, 0.2);
       border-radius: 20px;
       padding: 2rem;
       text-align: center;
     }

     .threat-level-header {
       display: flex;
       justify-content: space-between;
       align-items: center;
       margin-bottom: 1.5rem;
     }

     .threat-level-header h3 {
       font-size: 1.2rem;
       font-weight: 600;
       color: #ffffff;
       margin: 0;
     }

     .threat-level-badge {
       padding: 0.5rem 1rem;
       border-radius: 12px;
       font-weight: 700;
       font-size: 0.9rem;
       text-transform: uppercase;
       letter-spacing: 0.05em;
     }

     .threat-level-badge.bajo {
       background: linear-gradient(135deg, #10b981, #059669);
       color: white;
     }

     .threat-level-badge.medio {
       background: linear-gradient(135deg, #f59e0b, #d97706);
       color: white;
     }

     .threat-level-badge.alto {
       background: linear-gradient(135deg, #ef4444, #dc2626);
       color: white;
     }

     .threat-level-badge.crítico {
       background: linear-gradient(135deg, #dc2626, #991b1b);
       color: white;
       animation: pulse 2s infinite;
     }

     .threat-level-visual {
       display: flex;
       flex-direction: column;
       gap: 1rem;
     }

     .threat-level-bar {
       height: 12px;
       background: rgba(255, 255, 255, 0.1);
       border-radius: 6px;
       overflow: hidden;
       position: relative;
     }

     .threat-level-fill {
       height: 100%;
       border-radius: 6px;
       transition: width 1s ease;
       position: relative;
       overflow: hidden;
     }

     .threat-level-fill.bajo {
       background: linear-gradient(90deg, #10b981, #059669);
     }

     .threat-level-fill.medio {
       background: linear-gradient(90deg, #f59e0b, #d97706);
     }

     .threat-level-fill.alto {
       background: linear-gradient(90deg, #ef4444, #dc2626);
     }

     .threat-level-fill.crítico {
       background: linear-gradient(90deg, #dc2626, #991b1b);
       animation: shimmer 2s infinite;
     }

     .threat-level-scale {
       display: flex;
       justify-content: space-between;
       font-size: 0.8rem;
       color: #94a3b8;
       font-weight: 500;
     }

     /* Grid de métricas premium */
     .metrics-grid-premium {
       display: grid;
       grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
       gap: 1.5rem;
     }

     .metric-card-premium {
       background: linear-gradient(135deg, rgba(255, 255, 255, 0.05), rgba(255, 255, 255, 0.02));
       border: 1px solid rgba(255, 255, 255, 0.1);
       border-radius: 20px;
       padding: 1.5rem;
       transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
       position: relative;
       overflow: hidden;
     }

     .metric-card-premium::before {
       content: '';
       position: absolute;
       top: 0;
       left: 0;
       right: 0;
       height: 3px;
       background: linear-gradient(90deg, transparent, var(--accent-color), transparent);
       opacity: 0;
       transition: opacity 0.3s ease;
     }

     .metric-card-premium:hover::before {
       opacity: 1;
     }

     .metric-card-premium.primary {
       --accent-color: #3b82f6;
     }

     .metric-card-premium.critical {
       --accent-color: #ef4444;
     }

     .metric-card-premium.success {
       --accent-color: #10b981;
     }

     .metric-card-premium.warning {
       --accent-color: #f59e0b;
     }

     .metric-card-premium:hover {
       transform: translateY(-4px);
       box-shadow: 0 12px 40px rgba(0, 0, 0, 0.3);
       border-color: var(--accent-color);
     }

     .metric-header {
       display: flex;
       justify-content: space-between;
       align-items: flex-start;
       margin-bottom: 1rem;
     }

     .metric-icon-container {
       width: 48px;
       height: 48px;
       border-radius: 16px;
       display: flex;
       align-items: center;
       justify-content: center;
       background: linear-gradient(135deg, var(--accent-color), rgba(var(--accent-color), 0.8));
       box-shadow: 0 4px 16px rgba(var(--accent-color), 0.3);
     }

     .metric-icon-container i {
       color: white;
       font-size: 1.2rem;
     }

     .metric-trend {
       display: flex;
       align-items: center;
       gap: 0.25rem;
       padding: 0.25rem 0.5rem;
       border-radius: 8px;
       font-size: 0.8rem;
       font-weight: 600;
     }

     .metric-trend.positive {
       background: rgba(16, 185, 129, 0.2);
       color: #10b981;
     }

     .metric-trend.negative {
       background: rgba(239, 68, 68, 0.2);
       color: #ef4444;
     }

     .metric-trend.neutral {
       background: rgba(156, 163, 175, 0.2);
       color: #9ca3af;
     }

     .metric-body {
       display: flex;
       flex-direction: column;
       gap: 0.5rem;
     }

     .metric-value {
       font-size: 2rem;
       font-weight: 800;
       color: #ffffff;
       line-height: 1;
       letter-spacing: -0.025em;
     }

     .metric-label {
       font-size: 0.9rem;
       color: #94a3b8;
       font-weight: 500;
       line-height: 1.3;
     }

     .metric-progress-container {
       display: flex;
       align-items: center;
       gap: 0.75rem;
       margin-top: 0.5rem;
     }

     .metric-progress {
       flex: 1;
       height: 8px;
       background: rgba(255, 255, 255, 0.1);
       border-radius: 4px;
       overflow: hidden;
     }

     .progress-bar {
       height: 100%;
       border-radius: 4px;
       transition: width 1s ease;
       position: relative;
       overflow: hidden;
     }

     .progress-bar.primary {
       background: linear-gradient(90deg, #3b82f6, #1d4ed8);
     }

     .progress-bar.critical {
       background: linear-gradient(90deg, #ef4444, #dc2626);
     }

     .progress-bar.success {
       background: linear-gradient(90deg, #10b981, #059669);
     }

     .progress-bar.warning {
       background: linear-gradient(90deg, #f59e0b, #d97706);
     }

     .progress-percentage {
         font-size: 0.8rem;
         color: #94a3b8;
         font-weight: 600;
         min-width: 35px;
         text-align: right;
       }

       /* Elementos geográficos y temporales */
       .geo-temporal-grid {
         display: grid;
         grid-template-columns: 1fr 1fr;
         gap: 2rem;
       }

       .geo-section, .temporal-section {
         background: linear-gradient(135deg, 
           rgba(255, 255, 255, 0.08) 0%,
           rgba(255, 255, 255, 0.04) 100%);
         border: 1px solid rgba(255, 255, 255, 0.15);
         border-radius: 20px;
         padding: 2rem;
         backdrop-filter: blur(20px);
         box-shadow: 
           0 8px 32px rgba(0, 0, 0, 0.15),
           inset 0 1px 0 rgba(255, 255, 255, 0.1);
         transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
         position: relative;
         overflow: hidden;
       }

       .geo-section::before, .temporal-section::before {
         content: '';
         position: absolute;
         top: 0;
         left: 0;
         right: 0;
         bottom: 0;
         background: linear-gradient(135deg, 
           rgba(255, 255, 255, 0.05) 0%,
           transparent 50%,
           rgba(255, 255, 255, 0.02) 100%);
         opacity: 0;
         transition: opacity 0.4s ease;
         pointer-events: none;
       }

       .geo-section:hover, .temporal-section:hover {
         border-color: rgba(255, 255, 255, 0.25);
         box-shadow: 
           0 16px 48px rgba(0, 0, 0, 0.2),
           inset 0 1px 0 rgba(255, 255, 255, 0.15);
         transform: translateY(-2px);
       }

       .geo-section:hover::before, .temporal-section:hover::before {
         opacity: 1;
       }

       .subsection-header {
         display: flex;
         align-items: center;
         gap: 1rem;
         margin-bottom: 2rem;
         padding-bottom: 1rem;
         border-bottom: 1px solid rgba(255, 255, 255, 0.15);
         position: relative;
       }

       .subsection-header::after {
         content: '';
         position: absolute;
         bottom: -1px;
         left: 0;
         width: 40px;
         height: 2px;
         background: linear-gradient(90deg, 
           rgba(255, 255, 255, 0.4), 
           transparent);
         border-radius: 1px;
       }

       .subsection-header i {
         color: rgba(255, 255, 255, 0.9);
         font-size: 1.3rem;
         padding: 0.5rem;
         background: linear-gradient(135deg, 
           rgba(255, 255, 255, 0.1) 0%,
           rgba(255, 255, 255, 0.05) 100%);
         border-radius: 10px;
         border: 1px solid rgba(255, 255, 255, 0.1);
         backdrop-filter: blur(10px);
       }

       .subsection-header h3 {
         font-size: 1.3rem;
         font-weight: 700;
         color: white;
         margin: 0;
         font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
         letter-spacing: -0.02em;
         text-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
       }

       .countries-list {
         display: flex;
         flex-direction: column;
         gap: 1rem;
       }

       .country-item {
         display: flex;
         align-items: center;
         justify-content: space-between;
         padding: 1rem;
         background: linear-gradient(135deg, 
           rgba(255, 255, 255, 0.06) 0%,
           rgba(255, 255, 255, 0.03) 100%);
         border: 1px solid rgba(255, 255, 255, 0.12);
         border-radius: 16px;
         backdrop-filter: blur(15px);
         box-shadow: 
           0 4px 16px rgba(0, 0, 0, 0.1),
           inset 0 1px 0 rgba(255, 255, 255, 0.08);
         transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
         position: relative;
         overflow: hidden;
       }

       .country-item::before {
         content: '';
         position: absolute;
         top: 0;
         left: -100%;
         width: 100%;
         height: 100%;
         background: linear-gradient(90deg, 
           transparent, 
           rgba(255, 255, 255, 0.05), 
           transparent);
         transition: left 0.5s ease;
       }

       .country-item:hover {
         background: linear-gradient(135deg, 
           rgba(255, 255, 255, 0.1) 0%,
           rgba(255, 255, 255, 0.05) 100%);
         border-color: rgba(255, 255, 255, 0.2);
         transform: translateY(-2px);
         box-shadow: 
           0 8px 24px rgba(0, 0, 0, 0.15),
           inset 0 1px 0 rgba(255, 255, 255, 0.12);
       }

       .country-item:hover::before {
         left: 100%;
       }

       .country-info {
         display: flex;
         align-items: center;
         gap: 1rem;
       }

       .country-flag {
         width: 28px;
         height: 20px;
         border-radius: 6px;
         background: linear-gradient(135deg, 
           rgba(255, 255, 255, 0.15) 0%,
           rgba(255, 255, 255, 0.08) 100%);
         border: 1px solid rgba(255, 255, 255, 0.1);
         display: flex;
         align-items: center;
         justify-content: center;
         font-size: 0.75rem;
         color: rgba(255, 255, 255, 0.9);
         font-weight: 700;
         backdrop-filter: blur(10px);
         box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
       }

       .country-name {
         font-size: 1rem;
         color: white;
         font-weight: 600;
         font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
         letter-spacing: -0.01em;
       }

       .country-stats {
         display: flex;
         align-items: center;
         gap: 1rem;
       }

       .country-count {
         font-size: 0.9rem;
         color: #94a3b8;
         font-weight: 600;
       }

       .country-bar {
         width: 60px;
         height: 6px;
         background: rgba(255, 255, 255, 0.1);
         border-radius: 3px;
         overflow: hidden;
       }

       .country-bar-fill {
         height: 100%;
         background: linear-gradient(90deg, #3b82f6, #1d4ed8);
         border-radius: 3px;
         transition: width 1s ease;
       }

       /* Gráficos de tendencias */
       .trend-chart-container {
         background: rgba(255, 255, 255, 0.02);
         border: 1px solid rgba(255, 255, 255, 0.08);
         border-radius: 12px;
         padding: 1rem;
         height: 200px;
         display: flex;
         align-items: center;
         justify-content: center;
         position: relative;
         overflow: hidden;
       }

       .trend-chart-placeholder {
         color: #64748b;
         font-size: 0.9rem;
         text-align: center;
         display: flex;
         flex-direction: column;
         align-items: center;
         gap: 0.5rem;
       }

       .trend-chart-placeholder i {
         font-size: 2rem;
         color: #475569;
       }

       .chart-controls {
         display: flex;
         gap: 0.5rem;
         margin-bottom: 1rem;
       }

       .chart-control-btn {
         padding: 0.5rem 1rem;
         background: rgba(255, 255, 255, 0.05);
         border: 1px solid rgba(255, 255, 255, 0.1);
         border-radius: 8px;
         color: #94a3b8;
         font-size: 0.8rem;
         font-weight: 500;
         cursor: pointer;
         transition: all 0.3s ease;
       }

       .chart-control-btn:hover,
       .chart-control-btn.active {
         background: rgba(59, 130, 246, 0.2);
         border-color: rgba(59, 130, 246, 0.4);
         color: #3b82f6;
       }

       /* Clasificación de amenazas */
       .threat-types-grid {
         display: grid;
         grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
         gap: 1.5rem;
       }

       .threat-type-card {
         background: linear-gradient(135deg, rgba(255, 255, 255, 0.05), rgba(255, 255, 255, 0.02));
         border: 1px solid rgba(255, 255, 255, 0.1);
         border-radius: 16px;
         padding: 1.5rem;
         transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
         position: relative;
         overflow: hidden;
       }

       .threat-type-card::before {
         content: '';
         position: absolute;
         top: 0;
         left: 0;
         right: 0;
         height: 3px;
         background: var(--threat-color);
         opacity: 0.8;
       }

       .threat-type-card.ransomware {
         --threat-color: #ef4444;
       }

       .threat-type-card.malware {
         --threat-color: #f59e0b;
       }

       .threat-type-card.phishing {
         --threat-color: #8b5cf6;
       }

       .threat-type-card.ddos {
         --threat-color: #06b6d4;
       }

       .threat-type-card.botnet {
         --threat-color: #10b981;
       }

       .threat-type-card.other {
         --threat-color: #6b7280;
       }

       .threat-type-card:hover {
         transform: translateY(-4px);
         box-shadow: 0 12px 40px rgba(0, 0, 0, 0.3);
         border-color: var(--threat-color);
       }

       .threat-type-header {
         display: flex;
         align-items: center;
         gap: 1rem;
         margin-bottom: 1rem;
       }

       .threat-type-icon {
         width: 40px;
         height: 40px;
         border-radius: 12px;
         background: var(--threat-color);
         display: flex;
         align-items: center;
         justify-content: center;
         color: white;
         font-size: 1.1rem;
         box-shadow: 0 4px 12px rgba(var(--threat-color), 0.3);
       }

       .threat-type-info h4 {
         font-size: 1.1rem;
         font-weight: 600;
         color: #ffffff;
         margin: 0 0 0.25rem 0;
       }

       .threat-type-count {
         font-size: 0.85rem;
         color: #94a3b8;
         font-weight: 500;
       }

       .threat-type-progress {
         margin-top: 1rem;
       }

       .threat-type-progress-bar {
         height: 8px;
         background: rgba(255, 255, 255, 0.1);
         border-radius: 4px;
         overflow: hidden;
         margin-bottom: 0.5rem;
       }

       .threat-type-progress-fill {
         height: 100%;
         background: var(--threat-color);
         border-radius: 4px;
         transition: width 1s ease;
       }

       .threat-type-percentage {
         display: flex;
         justify-content: space-between;
         align-items: center;
         font-size: 0.8rem;
       }

       .threat-percentage-value {
         color: var(--threat-color);
         font-weight: 700;
       }

       .threat-percentage-label {
         color: #94a3b8;
         font-weight: 500;
       }

       /* Separadores y espaciado */
       .section-divider {
         height: 1px;
         background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
         margin: 2rem 0;
       }

       .content-spacer {
         height: 1.5rem;
       }

       /* Animaciones adicionales */
       @keyframes shimmer {
         0% { background-position: -200% 0; }
         100% { background-position: 200% 0; }
       }

       .threat-level-fill.crítico::before {
         content: '';
         position: absolute;
         top: 0;
         left: 0;
         right: 0;
         bottom: 0;
         background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
         background-size: 200% 100%;
         animation: shimmer 2s infinite;
       }

       /* SEPARADORES VISUALES CON GLASS EFFECT ELEGANTE */
        .section-divider-enhanced {
          position: relative;
          height: 80px;
          margin: 2.5rem 0;
          display: flex;
          align-items: center;
          justify-content: center;
          overflow: hidden;
        }

        .section-divider-enhanced::before {
          content: '';
          position: absolute;
          top: 50%;
          left: 0;
          right: 0;
          height: 1px;
          background: linear-gradient(90deg, 
            transparent 0%, 
            rgba(255, 255, 255, 0.1) 20%, 
            rgba(255, 255, 255, 0.3) 50%, 
            rgba(255, 255, 255, 0.1) 80%, 
            transparent 100%);
          transform: translateY(-50%);
        }

        .section-divider-enhanced::after {
          content: '';
          position: absolute;
          top: 50%;
          left: 50%;
          width: 8px;
          height: 8px;
          background: linear-gradient(135deg, 
            rgba(255, 255, 255, 0.4), 
            rgba(255, 255, 255, 0.2));
          border-radius: 50%;
          transform: translate(-50%, -50%);
          box-shadow: 
            0 0 20px rgba(255, 255, 255, 0.2),
            inset 0 1px 0 rgba(255, 255, 255, 0.3);
          animation: pulse 3s infinite;
        }

        .divider-icon {
          position: relative;
          z-index: 2;
          background: linear-gradient(135deg, 
            rgba(255, 255, 255, 0.12) 0%,
            rgba(255, 255, 255, 0.06) 100%);
          border: 1px solid rgba(255, 255, 255, 0.2);
          border-radius: 50%;
          width: 56px;
          height: 56px;
          display: flex;
          align-items: center;
          justify-content: center;
          color: rgba(255, 255, 255, 0.8);
          font-size: 1.3rem;
          backdrop-filter: blur(20px);
          box-shadow: 
            0 8px 32px rgba(0, 0, 0, 0.15),
            inset 0 1px 0 rgba(255, 255, 255, 0.2);
          transition: all 0.3s ease;
        }

        .divider-icon:hover {
          transform: scale(1.1);
          color: white;
          border-color: rgba(255, 255, 255, 0.3);
          box-shadow: 
            0 12px 40px rgba(0, 0, 0, 0.2),
            inset 0 1px 0 rgba(255, 255, 255, 0.3);
        }

        /* SECCIONES CON TEMAS VISUALES DISTINTIVOS */
        .stats-section-group.primary-status {
          background: linear-gradient(135deg, 
            rgba(239, 68, 68, 0.08), 
            rgba(185, 28, 28, 0.04));
          border-color: rgba(239, 68, 68, 0.15);
        }

        .stats-section-group.primary-status:hover {
          border-color: rgba(239, 68, 68, 0.3);
          box-shadow: 0 12px 48px rgba(239, 68, 68, 0.1);
        }

        .stats-section-group.metrics-overview {
          background: linear-gradient(135deg, 
            rgba(59, 130, 246, 0.08), 
            rgba(29, 78, 216, 0.04));
          border-color: rgba(59, 130, 246, 0.15);
        }

        .stats-section-group.metrics-overview:hover {
          border-color: rgba(59, 130, 246, 0.3);
          box-shadow: 0 12px 48px rgba(59, 130, 246, 0.1);
        }

        .stats-section-group.analysis-section {
          background: linear-gradient(135deg, 
            rgba(16, 185, 129, 0.08), 
            rgba(5, 150, 105, 0.04));
          border-color: rgba(16, 185, 129, 0.15);
        }

        .stats-section-group.analysis-section:hover {
          border-color: rgba(16, 185, 129, 0.3);
          box-shadow: 0 12px 48px rgba(16, 185, 129, 0.1);
        }

        .stats-section-group.threat-classification {
          background: linear-gradient(135deg, 
            rgba(245, 158, 11, 0.08), 
            rgba(217, 119, 6, 0.04));
          border-color: rgba(245, 158, 11, 0.15);
        }

        .stats-section-group.threat-classification:hover {
          border-color: rgba(245, 158, 11, 0.3);
          box-shadow: 0 12px 48px rgba(245, 158, 11, 0.1);
        }

        /* HEADERS TEMÁTICOS */
        .stats-section-group.primary-status .section-group-header {
          background: linear-gradient(135deg, 
            rgba(239, 68, 68, 0.15), 
            rgba(185, 28, 28, 0.08));
        }

        .stats-section-group.metrics-overview .section-group-header {
          background: linear-gradient(135deg, 
            rgba(59, 130, 246, 0.15), 
            rgba(29, 78, 216, 0.08));
        }

        .stats-section-group.analysis-section .section-group-header {
          background: linear-gradient(135deg, 
            rgba(16, 185, 129, 0.15), 
            rgba(5, 150, 105, 0.08));
        }

        .stats-section-group.threat-classification .section-group-header {
          background: linear-gradient(135deg, 
            rgba(245, 158, 11, 0.15), 
            rgba(217, 119, 6, 0.08));
        }

        /* ICONOS TEMÁTICOS EN HEADERS */
        .stats-section-group.primary-status .header-content i {
          color: #ef4444;
        }

        .stats-section-group.metrics-overview .header-content i {
          color: #3b82f6;
        }

        .stats-section-group.analysis-section .header-content i {
          color: #10b981;
        }

        .stats-section-group.threat-classification .header-content i {
          color: #f59e0b;
        }

        /* ELEMENTOS VISUALES MEJORADOS */
        .visual-accent {
          position: relative;
          overflow: hidden;
        }

        .visual-accent::before {
          content: '';
          position: absolute;
          top: 0;
          left: -100%;
          width: 100%;
          height: 100%;
          background: linear-gradient(90deg, 
            transparent, 
            rgba(255, 255, 255, 0.1), 
            transparent);
          animation: shimmer 3s infinite;
        }

        .section-badge {
          display: inline-flex;
          align-items: center;
          gap: 0.5rem;
          padding: 0.5rem 1rem;
          background: rgba(255, 255, 255, 0.1);
          border: 1px solid rgba(255, 255, 255, 0.2);
          border-radius: 20px;
          font-size: 0.85rem;
          font-weight: 600;
          color: #ffffff;
          backdrop-filter: blur(10px);
        }

        .section-badge i {
          font-size: 0.9rem;
        }

        /* ===== DIFERENCIACIÓN ADICIONAL ENTRE ELEMENTOS ===== */
        
        /* Espaciado y bordes para elementos de lista */
        .metric-card, .attack-item, .filter-group, .country-item {
          margin-bottom: 24px; /* Espaciado vertical de 24px */
          border-bottom: 1px solid #ECF0F1; /* Borde divisorio de 1px */
          padding-bottom: 16px;
        }
        
        .metric-card:last-child, 
        .attack-item:last-child, 
        .filter-group:last-child, 
        .country-item:last-child {
          border-bottom: none;
          margin-bottom: 0;
        }
        
        /* Contenedores de sección con espaciado mejorado */
        .section-content > *:not(:last-child) {
          margin-bottom: 24px;
        }
        
        /* Divisores visuales entre grupos de contenido */
        .content-group + .content-group {
          border-top: 1px solid #ECF0F1;
          padding-top: 24px;
          margin-top: 24px;
        }
        
        /* Espaciado específico para paneles */
        .panel-content > *:not(:last-child) {
          margin-bottom: 24px;
        }

        /* ===== FONDOS ALTERNADOS Y ENCABEZADOS CON ÍCONOS ===== */
        
        /* Fondos alternados para elementos de lista */
        .metric-card:nth-child(even),
        .attack-item:nth-child(even),
        .filter-group:nth-child(even),
        .country-item:nth-child(even),
        .stats-section-group:nth-child(even) {
          background: #FFFFFF; /* Fondo blanco para elementos pares */
        }
        
        .metric-card:nth-child(odd),
        .attack-item:nth-child(odd),
        .filter-group:nth-child(odd),
        .country-item:nth-child(odd),
        .stats-section-group:nth-child(odd) {
          background: #F8F9FA; /* Fondo gris claro para elementos impares */
        }
        
        /* Encabezados con íconos SVG alineados a la izquierda */
        .section-header,
        .subsection-header,
        .panel-header,
        .section-group-header {
          display: flex;
          align-items: center;
          gap: 12px; /* Espaciado entre ícono y texto */
          position: relative;
        }
        
        .section-header::before,
        .subsection-header::before,
        .panel-header::before {
          content: '';
          width: 16px;
          height: 16px;
          background-size: 16px 16px;
          background-repeat: no-repeat;
          background-position: center;
          flex-shrink: 0;
        }
        
        /* Íconos específicos por tipo de sección */
        .section-header.dashboard::before {
          background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%232C3E50' stroke-width='2'%3E%3Crect x='3' y='3' width='7' height='7'/%3E%3Crect x='14' y='3' width='7' height='7'/%3E%3Crect x='14' y='14' width='7' height='7'/%3E%3Crect x='3' y='14' width='7' height='7'/%3E%3C/svg%3E");
        }
        
        .section-header.analytics::before {
          background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%232C3E50' stroke-width='2'%3E%3Cpath d='M3 3v18h18'/%3E%3Cpath d='M18.7 8l-5.1 5.2-2.8-2.7L7 14.3'/%3E%3C/svg%3E");
        }
        
        .section-header.security::before {
          background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%232C3E50' stroke-width='2'%3E%3Cpath d='M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z'/%3E%3C/svg%3E");
        }
        
        .section-header.threats::before {
          background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%23E74C3C' stroke-width='2'%3E%3Cpath d='M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z'/%3E%3Cline x1='12' y1='9' x2='12' y2='13'/%3E%3Cline x1='12' y1='17' x2='12.01' y2='17'/%3E%3C/svg%3E");
        }
        
        .section-header.reports::before {
          background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%232C3E50' stroke-width='2'%3E%3Cpath d='M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z'/%3E%3Cpolyline points='14,2 14,8 20,8'/%3E%3Cline x1='16' y1='13' x2='8' y2='13'/%3E%3Cline x1='16' y1='17' x2='8' y2='17'/%3E%3Cpolyline points='10,9 9,9 8,9'/%3E%3C/svg%3E");
        }
        
        /* Ajustes para encabezados en contexto oscuro */
        .dark-section .section-header::before,
        .dark-section .subsection-header::before,
        .stats-section-group .section-header::before {
          filter: brightness(0) invert(1); /* Convierte íconos a blanco */
        }

        /* GRÁFICOS Y BARRAS MEJORADOS */
        .enhanced-chart-container {
          background: linear-gradient(135deg, 
            rgba(255, 255, 255, 0.05), 
            rgba(255, 255, 255, 0.02));
          border: 1px solid rgba(255, 255, 255, 0.1);
          border-radius: 16px;
          padding: 1.5rem;
          position: relative;
          overflow: hidden;
        }

        .enhanced-chart-container::before {
          content: '';
          position: absolute;
          top: 0;
          left: 0;
          right: 0;
          height: 3px;
          background: linear-gradient(90deg, 
            #ef4444, #f59e0b, #10b981, #3b82f6, #8b5cf6);
          opacity: 0.6;
        }

        .chart-bars {
          display: flex;
          align-items: end;
          gap: 0.5rem;
          height: 120px;
          margin-bottom: 1rem;
        }

        .chart-bar {
          flex: 1;
          background: linear-gradient(180deg, 
            rgba(59, 130, 246, 0.8), 
            rgba(59, 130, 246, 0.4));
          border-radius: 4px 4px 0 0;
          min-height: 20px;
          position: relative;
          cursor: pointer;
          transition: all 0.3s ease;
        }

        .chart-bar:hover {
          background: linear-gradient(180deg, 
            rgba(59, 130, 246, 1), 
            rgba(59, 130, 246, 0.6));
          transform: scaleY(1.05);
        }

        .chart-bar.active {
          background: linear-gradient(180deg, 
            rgba(16, 185, 129, 0.8), 
            rgba(16, 185, 129, 0.4));
        }

        .chart-bar::after {
          content: attr(data-value);
          position: absolute;
          top: -25px;
          left: 50%;
          transform: translateX(-50%);
          font-size: 0.7rem;
          color: #94a3b8;
          font-weight: 600;
          opacity: 0;
          transition: opacity 0.3s ease;
        }

        .chart-bar:hover::after {
          opacity: 1;
        }

        /* Responsive para móviles */
        @media (max-width: 768px) {
          .geo-temporal-grid {
            grid-template-columns: 1fr;
            gap: 1rem;
          }

          .threat-types-grid {
            grid-template-columns: 1fr;
            gap: 1rem;
          }

          .metrics-grid-premium {
            grid-template-columns: 1fr;
            gap: 1rem;
          }

          .section-content {
            padding: 1rem;
          }

          .section-group-header {
            padding: 1rem;
            flex-direction: column;
            align-items: flex-start;
            gap: 1rem;
          }

          .header-meta {
            width: 100%;
            justify-content: space-between;
          }

          .section-divider-enhanced {
            height: 40px;
            margin: 1rem 0;
          }

          .divider-icon {
            width: 36px;
            height: 36px;
            font-size: 1rem;
          }
        }
     
     /* Grid de métricas mejorado */
     .metrics-grid {
       display: grid;
       grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
       gap: 1rem;
       margin-bottom: 1.5rem;
     }
     
     .metric-card {
       background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(30, 41, 59, 0.9));
       border: 1px solid rgba(59, 130, 246, 0.2);
       border-radius: 16px;
       padding: 1.25rem;
       text-align: center;
       transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
       backdrop-filter: blur(15px);
       box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
     }
     
     .metric-card:hover {
       transform: translateY(-3px);
       box-shadow: 0 8px 32px rgba(59, 130, 246, 0.2);
       border-color: rgba(59, 130, 246, 0.4);
     }
     
     .metric-icon {
       width: 40px;
       height: 40px;
       background: linear-gradient(135deg, #3b82f6, #1d4ed8);
       border-radius: 12px;
       display: flex;
       align-items: center;
       justify-content: center;
       margin: 0 auto 0.75rem;
       box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
     }
     
     .metric-icon i {
       color: white;
       font-size: 1.1rem;
     }
     
     .metric-content {
       display: flex;
       flex-direction: column;
       gap: 0.25rem;
     }
     
     .metric-value {
       font-size: 1.5rem;
       font-weight: 700;
       color: #ffffff;
       line-height: 1.2;
     }
     
     .metric-label {
       font-size: 0.8rem;
       color: #94a3b8;
       font-weight: 500;
     }
     
     /* Secciones móviles optimizadas */
     .mobile-section {
       background: linear-gradient(135deg, rgba(30, 41, 59, 0.9), rgba(15, 23, 42, 0.8));
       border: 1px solid rgba(255, 255, 255, 0.1);
       border-radius: 20px;
       padding: 1.5rem;
       margin-bottom: 1.5rem;
       backdrop-filter: blur(15px);
       box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
       transition: all 0.3s ease;
     }
     
     .mobile-section:hover {
       border-color: rgba(59, 130, 246, 0.3);
       box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
     }
     
     .mobile-section .section-header {
       display: flex;
       align-items: center;
       gap: 0.75rem;
       margin-bottom: 1.25rem;
       padding-bottom: 0.75rem;
       border-bottom: 1px solid rgba(255, 255, 255, 0.1);
     }
     
     .mobile-section .section-header i {
       color: #3b82f6;
       font-size: 1.1rem;
       width: 20px;
       text-align: center;
     }
     
     .mobile-section .section-header h4 {
       font-size: 1.1rem;
       font-weight: 600;
       color: #e2e8f0;
       margin: 0;
     }
     
     /* Estilos para países */
     .countries-stats {
       display: flex;
       flex-direction: column;
       gap: 0.75rem;
     }
     
     .country-item {
       background: rgba(255, 255, 255, 0.05);
       border: 1px solid rgba(255, 255, 255, 0.08);
       border-radius: 12px;
       padding: 1rem;
       transition: all 0.3s ease;
     }
     
     .country-item:hover {
       background: rgba(255, 255, 255, 0.08);
       border-color: rgba(59, 130, 246, 0.3);
     }
     
     .country-header {
       display: flex;
       justify-content: space-between;
       align-items: center;
       margin-bottom: 0.5rem;
     }
     
     .country-info {
       display: flex;
       align-items: center;
       gap: 0.5rem;
     }
     
     .country-flag {
       width: 24px;
       height: 16px;
       border-radius: 4px;
       background: #374151;
       display: flex;
       align-items: center;
       justify-content: center;
       font-size: 0.7rem;
     }
     
     .country-name {
       font-weight: 500;
       color: #e2e8f0;
       font-size: 0.9rem;
     }
     
     .country-percentage {
       font-weight: 600;
       color: #3b82f6;
       font-size: 0.9rem;
     }
     
     .country-bar {
       height: 6px;
       background: rgba(255, 255, 255, 0.1);
       border-radius: 3px;
       overflow: hidden;
       margin-bottom: 0.25rem;
     }
     
     .country-bar-fill {
       height: 100%;
       background: linear-gradient(90deg, #3b82f6, #1d4ed8);
       border-radius: 3px;
       transition: width 0.8s ease;
     }
     
     .country-attacks {
       font-size: 0.8rem;
       color: #94a3b8;
     }
     
     /* Contenido de ataques optimizado */
     .attacks-content {
       padding: 1rem;
       animation: fadeInUp 0.6s ease-out;
     }
     
     .recent-attacks-list {
       display: flex;
       flex-direction: column;
       gap: 0.75rem;
     }
     
     .attack-item {
       background: linear-gradient(135deg, rgba(239, 68, 68, 0.1), rgba(30, 41, 59, 0.9));
       border: 1px solid rgba(239, 68, 68, 0.2);
       border-radius: 16px;
       padding: 1rem;
       display: flex;
       align-items: center;
       gap: 1rem;
       transition: all 0.3s ease;
       backdrop-filter: blur(10px);
     }
     
     .attack-item:hover {
       transform: translateY(-2px);
       box-shadow: 0 8px 24px rgba(239, 68, 68, 0.2);
       border-color: rgba(239, 68, 68, 0.4);
     }
     
     .attack-icon {
       width: 40px;
       height: 40px;
       background: linear-gradient(135deg, #ef4444, #dc2626);
       border-radius: 12px;
       display: flex;
       align-items: center;
       justify-content: center;
       color: white;
       font-size: 1.1rem;
       flex-shrink: 0;
       box-shadow: 0 4px 12px rgba(239, 68, 68, 0.3);
     }
     
     .attack-details {
       flex: 1;
       min-width: 0;
     }
     
     .attack-title {
       font-weight: 600;
       color: #e2e8f0;
       font-size: 0.9rem;
       margin-bottom: 0.25rem;
       white-space: nowrap;
       overflow: hidden;
       text-overflow: ellipsis;
     }
     
     .attack-meta {
       display: flex;
       gap: 0.75rem;
       font-size: 0.8rem;
       color: #94a3b8;
     }
     
     .attack-location::before {
       content: "📍 ";
       margin-right: 0.25rem;
     }
     
     .attack-time::before {
       content: "🕒 ";
       margin-right: 0.25rem;
     }
     
     .attack-severity {
       padding: 0.25rem 0.75rem;
       border-radius: 20px;
       font-size: 0.7rem;
       font-weight: 600;
       text-transform: uppercase;
       letter-spacing: 0.5px;
       flex-shrink: 0;
     }
     
     .attack-severity.critical {
       background: linear-gradient(135deg, #dc2626, #991b1b);
       color: white;
     }
     
     .attack-severity.high {
       background: linear-gradient(135deg, #ea580c, #c2410c);
       color: white;
     }
     
     .attack-severity.medium {
       background: linear-gradient(135deg, #d97706, #a16207);
       color: white;
     }
     
     .attack-severity.low {
       background: linear-gradient(135deg, #65a30d, #4d7c0f);
       color: white;
     }
     

     

     
     /* Estados de carga y error */
     .loading-spinner {
       display: flex;
       align-items: center;
       justify-content: center;
       padding: 3rem 1rem;
       color: #94a3b8;
       font-size: 0.9rem;
     }
     
     .loading-spinner::before {
       content: "";
       width: 20px;
       height: 20px;
       border: 2px solid rgba(59, 130, 246, 0.3);
       border-top: 2px solid #3b82f6;
       border-radius: 50%;
       animation: spin 1s linear infinite;
       margin-right: 0.75rem;
     }
     
     .error {
       display: flex;
       align-items: center;
       justify-content: center;
       padding: 3rem 1rem;
       color: #ef4444;
       font-size: 0.9rem;
       text-align: center;
     }
     
     .no-attacks {
       display: flex;
       align-items: center;
       justify-content: center;
       padding: 3rem 1rem;
       color: #94a3b8;
       font-size: 0.9rem;
       text-align: center;
     }
     
     /* Animaciones */
     @keyframes fadeInUp {
       from {
         opacity: 0;
         transform: translateY(20px);
       }
       to {
         opacity: 1;
         transform: translateY(0);
       }
     }
     
     @keyframes spin {
       to {
         transform: rotate(360deg);
       }
     }
     
     /* Responsive para pantallas muy pequeñas */
     @media (max-width: 360px) {
       .metrics-grid {
         grid-template-columns: 1fr;
       }
       
       .metric-card {
         padding: 1rem;
       }
       
       .mobile-section {
         padding: 1rem;
       }
       
       .attack-item {
         flex-direction: column;
         align-items: flex-start;
         gap: 0.75rem;
       }
       
       .attack-details {
         width: 100%;
       }
     }
     
     .mobile-section .section-header i {
       font-size: 1.2rem;
       color: #3b82f6;
     }
     
     .mobile-section .section-header h4 {
       font-size: 1.1rem;
       font-weight: 600;
       color: #e2e8f0;
       margin: 0;
     }

     /* Métricas móviles */
     .metrics-grid {
       display: grid;
       grid-template-columns: repeat(3, 1fr);
       gap: 0.75rem;
       margin-bottom: 1rem;
     }

     .metric-card {
       background: rgba(30, 41, 59, 0.8);
       border: 1px solid rgba(255, 255, 255, 0.08);
       border-radius: 12px;
       padding: 1rem;
       text-align: center;
       transition: transform 0.2s ease, box-shadow 0.2s ease;
     }

     .metric-card:hover {
       transform: translateY(-2px);
       box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
     }

     .metric-icon {
       font-size: 1.5rem;
       color: #3b82f6;
       margin-bottom: 0.5rem;
     }

     .metric-value {
       display: block;
       font-size: 1.25rem;
       font-weight: 700;
       color: #ffffff;
       margin-bottom: 0.25rem;
     }

     .metric-label {
       font-size: 0.8rem;
       color: #94a3b8;
       font-weight: 500;
     }

     /* Países móviles */
     .countries-stats {
       display: flex;
       flex-direction: column;
       gap: 0.875rem;
     }
     
     .country-item {
       display: flex;
       flex-direction: column;
       gap: 0.5rem;
     }
     
     .country-header {
       display: flex;
       justify-content: space-between;
       align-items: center;
     }
     
     .country-info {
       display: flex;
       align-items: center;
       gap: 0.75rem;
     }
     
     .country-flag {
       font-size: 1.25rem;
     }
     
     .country-name {
       font-weight: 500;
       color: #e2e8f0;
     }
     
     .country-attacks {
       font-weight: 600;
       color: #ffffff;
       font-size: 0.95rem;
     }
     
     .country-progress {
       height: 6px;
       background: rgba(255, 255, 255, 0.1);
       border-radius: 3px;
       overflow: hidden;
     }
     
     .country-progress-bar {
       height: 100%;
       background: linear-gradient(90deg, #3b82f6, #60a5fa);
       border-radius: 3px;
       transition: width 0.3s ease;
     }
     
     /* Categorías móviles */
     .categories-grid {
       display: grid;
       grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
       gap: 1rem;
     }
     
     .category-item {
       background: rgba(255, 255, 255, 0.05);
       border-radius: 12px;
       padding: 1rem;
       display: flex;
       align-items: center;
       gap: 0.75rem;
     }
     
     .category-item.malware {
       border-left: 4px solid #ef4444;
     }
     
     .category-item.phishing {
       border-left: 4px solid #f59e0b;
     }
     
     .category-item.ransomware {
       border-left: 4px solid #8b5cf6;
     }
     
     .category-item.ddos {
       border-left: 4px solid #06b6d4;
     }
     
     .category-item.botnet {
       border-left: 4px solid #10b981;
     }
     
     .category-icon {
       font-size: 1.5rem;
       flex-shrink: 0;
     }
     
     .category-info {
       flex: 1;
     }
     
     .category-header {
       display: flex;
       justify-content: space-between;
       align-items: center;
       margin-bottom: 0.25rem;
     }
     
     .category-name {
       font-weight: 500;
       color: #e2e8f0;
       font-size: 0.9rem;
     }
     
     .category-count {
       font-weight: 600;
       color: #ffffff;
       font-size: 0.85rem;
     }
     
     .category-metrics {
       display: flex;
       gap: 0.75rem;
     }
     
     .category-percentage {
       font-size: 0.8rem;
       color: #94a3b8;
     }
     
     .category-trend {
       font-size: 0.8rem;
       font-weight: 600;
     }
     
     .category-trend.up {
       color: #10b981;
     }
     
     .category-trend.down {
       color: #ef4444;
     }
     
     /* Estilos adicionales para elementos optimizados */
     .country-bar {
       width: 100%;
       height: 8px;
       background: rgba(255, 255, 255, 0.1);
       border-radius: 4px;
       overflow: hidden;
       margin: 0.5rem 0;
     }
     
     .country-bar-fill {
       height: 100%;
       background: linear-gradient(90deg, #3b82f6, #60a5fa);
       border-radius: 4px;
       transition: width 0.8s ease;
     }
     
     .country-percentage {
       font-weight: 600;
       color: #3b82f6;
       font-size: 0.9rem;
     }
     
     .country-attacks {
       font-size: 0.8rem;
       color: #94a3b8;
       margin-top: 0.25rem;
     }
     
     .growth-item {
       background: rgba(15, 23, 42, 0.6);
       border: 1px solid rgba(255, 255, 255, 0.06);
       border-radius: 12px;
       padding: 1rem;
       margin-bottom: 0.75rem;
     }
     
     .growth-header {
       display: flex;
       justify-content: space-between;
       align-items: center;
       margin-bottom: 0.5rem;
     }
     
     .growth-label {
       font-weight: 600;
       color: #e2e8f0;
       font-size: 0.9rem;
     }
     
     .growth-rate {
       font-weight: 700;
       font-size: 0.9rem;
       display: flex;
       align-items: center;
       gap: 0.25rem;
     }
     
     .growth-rate.up {
       color: #ef4444;
     }
     
     .growth-rate.down {
       color: #22c55e;
     }
     
     .growth-bar {
       width: 100%;
       height: 6px;
       background: rgba(255, 255, 255, 0.1);
       border-radius: 3px;
       overflow: hidden;
     }
     
     .growth-bar-fill {
       height: 100%;
       border-radius: 3px;
       transition: width 0.8s ease;
     }
     
     .dashboard-card.primary {
       border-left: 4px solid #3b82f6;
     }
     
     .dashboard-card.warning {
       border-left: 4px solid #f59e0b;
     }
     
     .dashboard-card.success {
       border-left: 4px solid #22c55e;
     }
     
     .dashboard-card.critical {
       border-left: 4px solid #ef4444;
     }
     
     .card-trend {
       font-size: 0.75rem;
       font-weight: 500;
       margin-top: 0.25rem;
       display: flex;
       align-items: center;
       gap: 0.25rem;
     }
     
     .card-trend.positive {
       color: #22c55e;
     }
     
     .card-trend.negative {
       color: #ef4444;
     }
     
     .update-indicator {
       animation: spin 2s linear infinite;
       display: inline-block;
       margin-right: 0.5rem;
     }
     
     @keyframes spin {
       from { transform: rotate(0deg); }
       to { transform: rotate(360deg); }
     }
     
     .section-header {
       display: flex;
       align-items: center;
       gap: 0.5rem;
       margin-bottom: 1rem;
       padding-bottom: 0.5rem;
       border-bottom: 1px solid rgba(255, 255, 255, 0.1);
     }
     
     .section-header i {
       color: #3b82f6;
       font-size: 1.1rem;
     }
     
     .section-header h4 {
       margin: 0;
       color: #e2e8f0;
       font-size: 1rem;
       font-weight: 600;
     }
     
     /* Estilos para contenido cargado dinámicamente */
     .panel-content-loaded {
       opacity: 1;
       transform: translateY(0);
       transition: all 0.3s ease;
     }
     
     .content-loaded {
       animation: contentFadeIn 0.5s ease-out;
     }
     
     @keyframes contentFadeIn {
       from {
         opacity: 0;
         transform: translateY(10px);
       }
       to {
         opacity: 1;
         transform: translateY(0);
       }
     }
     
     /* Animaciones para elementos específicos */
     .metric-card-animated {
       animation: slideInUp 0.6s ease-out both;
     }
     
     .attack-item-animated {
       animation: slideInLeft 0.5s ease-out both;
     }
     
     .filter-group-animated {
       animation: slideInRight 0.4s ease-out both;
     }
     
     .btn-animated {
       animation: buttonPulse 0.8s ease-out;
     }
     
     @keyframes slideInUp {
       from {
         opacity: 0;
         transform: translateY(20px);
       }
       to {
         opacity: 1;
         transform: translateY(0);
       }
     }
     
     @keyframes slideInLeft {
       from {
         opacity: 0;
         transform: translateX(-20px);
       }
       to {
         opacity: 1;
         transform: translateX(0);
       }
     }
     
     @keyframes slideInRight {
       from {
         opacity: 0;
         transform: translateX(20px);
       }
       to {
         opacity: 1;
         transform: translateX(0);
       }
     }
     
     @keyframes buttonPulse {
       0% {
         transform: scale(1);
       }
       50% {
         transform: scale(1.05);
       }
       100% {
         transform: scale(1);
       }
     }
     
     /* Forzar estilos para elementos dinámicos */
     .panel-content * {
       box-sizing: border-box;
     }
     
     .panel-content .metric-card {
       background: rgba(30, 41, 59, 0.8) !important;
       border: 1px solid rgba(255, 255, 255, 0.08) !important;
       border-radius: 12px !important;
       padding: 1rem !important;
       backdrop-filter: blur(10px) !important;
     }
     
     .panel-content .attack-item {
       background: rgba(30, 41, 59, 0.8) !important;
       border: 1px solid rgba(255, 255, 255, 0.08) !important;
       border-radius: 12px !important;
       padding: 1rem !important;
       backdrop-filter: blur(10px) !important;
     }
     
     .panel-content .filter-group {
       margin-bottom: 1rem !important;
     }
     
     .panel-content .filter-select {
       width: 100% !important;
       padding: 0.75rem !important;
       background: rgba(15, 23, 42, 0.8) !important;
       border: 1px solid rgba(255, 255, 255, 0.1) !important;
       border-radius: 8px !important;
       color: #e2e8f0 !important;
     }
     

     
     /* Estilos para tasas de crecimiento */
     .growth-rates {
       display: flex;
       flex-direction: column;
       gap: 1rem;
     }
     
     .growth-item {
       background: rgba(15, 23, 42, 0.6);
       border: 1px solid rgba(255, 255, 255, 0.06);
       border-radius: 12px;
       padding: 1rem;
       display: flex;
       align-items: center;
       gap: 0.75rem;
     }
     
     .growth-icon {
       width: 40px;
       height: 40px;
       display: flex;
       align-items: center;
       justify-content: center;
       border-radius: 50%;
       font-size: 1.25rem;
     }
     
     .growth-icon.up {
       background: rgba(16, 185, 129, 0.2);
       color: #10b981;
     }
     
     .growth-icon.down {
       background: rgba(239, 68, 68, 0.2);
       color: #ef4444;
     }
     
     .growth-info {
       flex: 1;
     }
     
     .growth-header {
       display: flex;
       justify-content: space-between;
       align-items: center;
       margin-bottom: 0.25rem;
     }
     
     .growth-label {
       font-weight: 500;
       color: #e2e8f0;
       font-size: 0.9rem;
     }
     
     .growth-value {
       font-weight: 600;
       font-size: 0.9rem;
     }
     
     .growth-value.up {
       color: #10b981;
     }
     
     .growth-value.down {
       color: #ef4444;
     }
     
     .growth-description {
       font-size: 0.8rem;
       color: #94a3b8;
     }
     
     /* Resumen rápido */
     .quick-summary {
       display: grid;
       grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
       gap: 1rem;
       margin-top: 1.5rem;
     }
     
     .summary-item {
       background: rgba(30, 41, 59, 0.8);
       border: 1px solid rgba(255, 255, 255, 0.08);
       border-radius: 12px;
       padding: 1rem;
       text-align: center;
     }
     
     .summary-item i {
       font-size: 1.25rem;
       color: #3b82f6;
       margin-bottom: 0.5rem;
     }
     
     .summary-item span {
       display: block;
       font-size: 1.25rem;
       font-weight: 700;
       color: #ffffff;
       margin-bottom: 0.25rem;
     }
     
     .summary-item small {
       font-size: 0.75rem;
       color: #94a3b8;
     }
     
     /* Estilos para contenido dinámico móvil */
     .stats-content {
       padding: 1rem 0;
     }
     
     .mobile-section {
       margin-bottom: 2rem;
       background: rgba(30, 41, 59, 0.8);
       border: 1px solid rgba(255, 255, 255, 0.08);
       border-radius: 16px;
       padding: 1.5rem;
       backdrop-filter: blur(10px);
     }
     
     .section-header {
       display: flex;
       align-items: center;
       gap: 0.75rem;
       margin-bottom: 1rem;
       color: #e2e8f0;
     }
     
     .section-header i {
       font-size: 1.25rem;
       color: #3b82f6;
     }
     
     .section-header h4 {
       margin: 0;
       font-size: 1.1rem;
       font-weight: 600;
     }
     
     .metrics-grid {
       display: grid;
       grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
       gap: 1rem;
     }
     
     .metric-card {
       background: rgba(15, 23, 42, 0.6);
       border: 1px solid rgba(255, 255, 255, 0.06);
       border-radius: 12px;
       padding: 1rem;
       text-align: center;
       display: flex;
       flex-direction: column;
       align-items: center;
       gap: 0.5rem;
     }
     
     .metric-icon {
       width: 40px;
       height: 40px;
       display: flex;
       align-items: center;
       justify-content: center;
       background: rgba(59, 130, 246, 0.2);
       border-radius: 50%;
       color: #3b82f6;
       font-size: 1.25rem;
     }
     
     .metric-content {
       display: flex;
       flex-direction: column;
       gap: 0.25rem;
     }
     
     .metric-value {
       font-size: 1.5rem;
       font-weight: 700;
       color: #ffffff;
     }
     
     .metric-label {
       font-size: 0.875rem;
       color: #94a3b8;
     }
     
     /* Estilos para países */
     .countries-stats {
       display: flex;
       flex-direction: column;
       gap: 0.75rem;
     }
     
     .country-item {
       background: rgba(15, 23, 42, 0.6);
       border: 1px solid rgba(255, 255, 255, 0.06);
       border-radius: 12px;
       padding: 1rem;
     }
     
     .country-header {
       display: flex;
       justify-content: space-between;
       align-items: center;
       margin-bottom: 0.75rem;
     }
     
     .country-info {
       display: flex;
       align-items: center;
       gap: 0.5rem;
     }
     
     .country-flag {
       font-size: 1.25rem;
     }
     
     .country-name {
       font-weight: 600;
       color: #e2e8f0;
       font-size: 0.9rem;
     }
     
     .country-attacks {
       font-weight: 700;
       color: #3b82f6;
       font-size: 0.9rem;
     }
     
     .country-progress {
       width: 100%;
       height: 6px;
       background: rgba(255, 255, 255, 0.1);
       border-radius: 3px;
       overflow: hidden;
     }
     
     .country-progress-bar {
       height: 100%;
       background: linear-gradient(90deg, #3b82f6, #60a5fa);
       border-radius: 3px;
       transition: width 0.3s ease;
     }
     
     /* Estilos para categorías */
     .categories-grid {
       display: grid;
       grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
       gap: 1rem;
     }
     
     .category-item {
       background: rgba(15, 23, 42, 0.6);
       border: 1px solid rgba(255, 255, 255, 0.06);
       border-radius: 12px;
       padding: 1rem;
       display: flex;
       align-items: center;
       gap: 0.75rem;
     }
     
     .category-info {
       flex: 1;
     }
     
     .category-header {
       display: flex;
       justify-content: space-between;
       align-items: center;
       margin-bottom: 0.25rem;
     }
     
     .category-name {
       font-weight: 500;
       color: #e2e8f0;
       font-size: 0.9rem;
     }
     
     .category-count {
       font-weight: 600;
       color: #ffffff;
       font-size: 0.85rem;
     }
     
     .category-metrics {
       display: flex;
       gap: 0.75rem;
     }
     
     .category-percentage {
       font-size: 0.8rem;
       color: #94a3b8;
     }
     
     .category-trend {
       font-size: 0.8rem;
       font-weight: 600;
     }
     
     .category-trend.up {
       color: #10b981;
     }
     
     .category-trend.down {
       color: #ef4444;
     }
     
     /* Estilos para ataques recientes */
     .attacks-content {
       padding: 1rem 0;
     }
     
     .recent-attacks-list {
       display: flex;
       flex-direction: column;
       gap: 0.75rem;
     }
     
     .attack-item {
       display: flex;
       align-items: center;
       gap: 0.75rem;
       padding: 1rem;
       background: rgba(30, 41, 59, 0.8);
       border: 1px solid rgba(255, 255, 255, 0.08);
       border-radius: 12px;
       backdrop-filter: blur(10px);
     }
     
     .attack-icon {
       font-size: 1.25rem;
       width: 32px;
       height: 32px;
       display: flex;
       align-items: center;
       justify-content: center;
       border-radius: 8px;
       background: rgba(59, 130, 246, 0.2);
     }
     
     .attack-details {
       flex: 1;
     }
     
     .attack-title {
       font-weight: 600;
       color: #e2e8f0;
       margin-bottom: 0.25rem;
     }
     
     .attack-meta {
       display: flex;
       gap: 1rem;
       font-size: 0.875rem;
     }
     
     .attack-location {
       color: #94a3b8;
     }
     
     .attack-time {
       color: #64748b;
     }
     
     .attack-severity {
       padding: 0.25rem 0.5rem;
       border-radius: 6px;
       font-size: 0.75rem;
       font-weight: 600;
     }
     
     .attack-severity.critical {
       background: rgba(239, 68, 68, 0.2);
       color: #ef4444;
     }
     
     .attack-severity.high {
       background: rgba(245, 158, 11, 0.2);
       color: #f59e0b;
     }
     
     .attack-severity.medium {
       background: rgba(59, 130, 246, 0.2);
       color: #3b82f6;
     }
     
     .attack-severity.low {
       background: rgba(34, 197, 94, 0.2);
       color: #22c55e;
     }
     
     .no-attacks {
       text-align: center;
       padding: 2rem;
       color: #64748b;
       font-style: italic;
     }
     

     

     
     /* Estados de error */
     .error {
       text-align: center;
       padding: 2rem;
       color: #ef4444;
       font-style: italic;
     }
   }
   
   /* Optimizaciones específicas para móviles pequeños */
   @media (max-width: 480px) {
     .mobile-navigation {
       bottom: 12px;
       left: 12px;
       right: 12px;
       transform: none;
       padding: 10px;
     }
     
     .nav-tabs {
       justify-content: space-around;
     }
     
     .nav-tab {
       flex: 1;
       justify-content: center;
       padding: 10px;
       font-size: 0.75rem;
     }
     
     .dashboard-header-overlay {
       top: 8px;
       left: 8px;
       right: 8px;
       padding: 0.75rem;
     }
     
     .page-title {
       font-size: 1.1rem;
     }
     
     .mobile-content-container {
       top: 80px;
       bottom: 70px;
     }
     
     .mobile-panel {
       padding: 16px;
     }
   }
   
   /* Landscape mode optimizations */
   @media (max-height: 500px) and (orientation: landscape) {
     .dashboard-header-overlay {
       max-height: 60px;
       padding: 0.5rem;
     }
     
     .page-title {
       font-size: 1rem;
     }
     
     .mobile-content-container {
       top: 70px;
       bottom: 60px;
     }
     
     .mobile-navigation {
       bottom: 8px;
       padding: 8px;
     }
     
     .nav-tab {
       padding: 8px 12px;
       font-size: 0.7rem;
     }
   }
</style>

<script>
  // SISTEMA DE NAVEGACIÓN MÓVIL MEJORADO - CONECTADO A DATOS DE ESCRITORIO
  document.addEventListener('DOMContentLoaded', function() {
    class MobileNavigationSystem {
      constructor() {
        this.currentPanel = 'map';
        this.isMobile = window.innerWidth <= 1024;
        this.threatData = null;
        
        // Templates para renderizar contenido
        this.templates = {
          stats: this.createStatsTemplate.bind(this),
          attacks: this.createAttacksTemplate.bind(this)
        };
      }
      
      init() {
        console.log('🚀 Iniciando sistema de navegación por pestañas');
        
        this.setupEventListeners();
        this.loadDataFromDesktop();
        
        // Solo ocultar elementos de escritorio en móvil
        if (this.isMobile) {
          this.hideDesktopElements();
        }
        
        // Inicializar mostrando el mapa
        this.switchPanel('map');
      }
      
      setupEventListeners() {
        // Navegación por pestañas con efectos táctiles mejorados
        document.querySelectorAll('.nav-tab').forEach(tab => {
          // Efecto táctil al tocar
          tab.addEventListener('touchstart', (e) => {
            // Vibración táctil si está disponible
            if (navigator.vibrate) {
              navigator.vibrate(10);
            }
            
            // Efecto visual inmediato
            tab.style.transform = 'translateY(0) scale(0.95)';
          }, { passive: true });
          
          tab.addEventListener('touchend', (e) => {
            // Restaurar efecto visual
            setTimeout(() => {
              if (!tab.classList.contains('active')) {
                tab.style.transform = '';
              }
            }, 100);
          }, { passive: true });
          
          tab.addEventListener('click', (e) => {
            e.preventDefault();
            const panel = e.currentTarget.dataset.panel;
            
            // Vibración de confirmación
            if (navigator.vibrate) {
              navigator.vibrate([20, 10, 20]);
            }
            
            // Efecto de ondas (ripple effect)
            this.createRippleEffect(e.currentTarget, e);
            
            this.switchPanel(panel);
          });
        });
        
        // Botones de cerrar panel con efectos
        document.querySelectorAll('.close-panel').forEach(btn => {
          btn.addEventListener('click', (e) => {
            if (navigator.vibrate) {
              navigator.vibrate(15);
            }
            this.switchPanel('map');
          });
        });
        
        // Detectar cambios de tamaño
        window.addEventListener('resize', () => {
          this.handleResize();
        });
      }
      
      createRippleEffect(element, event) {
        const ripple = document.createElement('span');
        const rect = element.getBoundingClientRect();
        const size = Math.max(rect.width, rect.height);
        const x = event.clientX - rect.left - size / 2;
        const y = event.clientY - rect.top - size / 2;
        
        ripple.style.cssText = `
          position: absolute;
          width: ${size}px;
          height: ${size}px;
          left: ${x}px;
          top: ${y}px;
          background: rgba(255, 255, 255, 0.3);
          border-radius: 50%;
          transform: scale(0);
          animation: ripple 0.6s ease-out;
          pointer-events: none;
          z-index: 1;
        `;
        
        element.style.position = 'relative';
        element.style.overflow = 'hidden';
        element.appendChild(ripple);
        
        setTimeout(() => {
          ripple.remove();
        }, 600);
      }
      
      switchPanel(panel) {
        console.log(`📱 Cambiando a panel: ${panel}`);
        
        // Actualizar pestañas activas
        document.querySelectorAll('.nav-tab').forEach(tab => {
          tab.classList.toggle('active', tab.dataset.panel === panel);
        });
        
        // Ocultar todos los paneles
        document.querySelectorAll('.mobile-panel').forEach(p => {
          p.classList.remove('active');
        });
        
        // Mostrar panel seleccionado
        if (panel !== 'map') {
          const targetPanel = document.querySelector(`.${panel}-panel`);
          if (targetPanel) {
            targetPanel.classList.add('active');
            this.loadPanelContent(panel);
          }
        }
        
        this.currentPanel = panel;
      }
      
      loadDataFromDesktop() {
        // Conectar con los datos de la versión de escritorio
        console.log('🔄 Intentando cargar datos desde escritorio...');
        console.log('🔍 window.threatDataUpdater disponible:', !!window.threatDataUpdater);
        console.log('🔍 window.threatMapProps disponible:', !!window.threatMapProps);
        
        if (window.threatDataUpdater?.lastDataCache) {
          this.threatData = window.threatDataUpdater.lastDataCache;
          console.log('📊 Datos cargados desde threatDataUpdater:', this.threatData);
        } else if (window.threatMapProps?.threatData) {
          this.threatData = window.threatMapProps.threatData;
          console.log('📊 Datos cargados desde threatMapProps:', this.threatData);
        } else {
          console.warn('⚠️ No se encontraron datos de escritorio, usando datos de ejemplo');
          this.threatData = {};
        }
      }
      
      loadPanelContent(panel) {
        const contentElement = document.getElementById(`mobile${panel.charAt(0).toUpperCase() + panel.slice(1)}Content`);
        if (contentElement && this.templates[panel]) {
          // Limpiar contenido anterior
          contentElement.innerHTML = '';
          
          // Insertar nuevo contenido
          contentElement.innerHTML = this.templates[panel]();
          
          // Forzar aplicación de estilos
          this.applyPanelStyles(contentElement, panel);
          
          // Configurar eventos específicos del panel
          
          // Trigger de animaciones
          setTimeout(() => {
            contentElement.classList.add('content-loaded');
          }, 50);
        }
      }
      
      applyPanelStyles(container, panelType) {
        // Asegurar que el contenedor tenga las clases base
        container.classList.add('panel-content-loaded');
        
        // Aplicar estilos específicos según el tipo de panel
        switch(panelType) {
          case 'stats':
            this.applyStatsStyles(container);
            break;
          case 'attacks':
            this.applyAttacksStyles(container);
            break;
        }
        
        // Forzar repaint
        container.offsetHeight;
      }
      
      applyStatsStyles(container) {
        // Aplicar estilos a las métricas
        const metricCards = container.querySelectorAll('.metric-card');
        metricCards.forEach((card, index) => {
          card.style.animationDelay = `${index * 0.1}s`;
          card.classList.add('metric-card-animated');
        });
        
        // Aplicar estilos a las barras de países
        const countryBars = container.querySelectorAll('.country-bar-fill');
        countryBars.forEach((bar, index) => {
          setTimeout(() => {
            bar.style.width = bar.getAttribute('data-width') || bar.style.width;
          }, 200 + (index * 100));
        });
        
        // Aplicar estilos a las barras de crecimiento
        const growthBars = container.querySelectorAll('.growth-bar-fill');
        growthBars.forEach((bar, index) => {
          setTimeout(() => {
            bar.style.width = bar.getAttribute('data-width') || bar.style.width;
          }, 400 + (index * 100));
        });
      }
      
      applyAttacksStyles(container) {
        // Aplicar animaciones a los elementos de ataque
        const attackItems = container.querySelectorAll('.attack-item');
        attackItems.forEach((item, index) => {
          item.style.animationDelay = `${index * 0.1}s`;
          item.classList.add('attack-item-animated');
        });
      }
      

      
      createStatsTemplate() {
        const threatData = window.threatMapProps?.threatData || {};
        if (!threatData || Object.keys(threatData).length === 0) {
          return '<div class="error">Cargando datos reales...</div>';
        }
        
        // Usar datos reales de las APIs
        const urlhausCount = threatData.urlhaus?.count || 0;
        const malwarebazaarCount = threatData.malwarebazaar?.count || 0;
        const ransomwatchCount = threatData.ransomwatch?.count || 0;
        const cloudflareAttacks = threatData.cloudflare?.topAttackPairs?.length ? 
          threatData.cloudflare.topAttackPairs.reduce((sum, pair) => sum + (pair.attacks || 0), 0) : 0;
        
        const totalThreats = urlhausCount + malwarebazaarCount + ransomwatchCount + cloudflareAttacks;
        const activeThreats = Math.floor(totalThreats * 0.15);
        const criticalThreats = ransomwatchCount + Math.floor(malwarebazaarCount * 0.1);
        const blockedThreats = Math.floor(totalThreats * 0.73);
        
        // Calcular tendencias basadas en datos reales (sin porcentajes ficticios)
        const threatGrowth = 'N/A'; // Sin datos históricos reales disponibles
        const criticalThreatGrowth = 'N/A'; // Sin datos históricos reales disponibles  
        const blockedThreatGrowth = 'N/A'; // Sin datos históricos reales disponibles
        const activeThreatGrowth = 'N/A'; // Sin datos históricos reales disponibles
        
        // Calcular nivel de amenaza basado en datos reales
        const threatLevel = criticalThreats > 200 ? 'CRÍTICO' : criticalThreats > 100 ? 'ALTO' : 'MEDIO';
        const threatLevelWidth = criticalThreats > 200 ? '85%' : criticalThreats > 100 ? '76%' : '45%';
        
        // Calcular barras de progreso basadas en datos reales
        const totalProgressWidth = Math.min(85, Math.max(20, (totalThreats / 10000) * 100));
        const criticalProgressWidth = Math.min(68, Math.max(15, (criticalThreats / 500) * 100));
        const blockedProgressWidth = Math.min(92, Math.max(70, (blockedThreats / totalThreats) * 100));
        const activeProgressWidth = Math.min(45, Math.max(10, (activeThreats / 1000) * 100));
        
        return `
          <div class="stats-content-enhanced">
            <!-- SECCIÓN 1: ESTADO GENERAL DEL SISTEMA -->
            
            <!-- SECCIÓN 2: MÉTRICAS PRINCIPALES -->
            <div class="stats-section-group metrics-overview visual-accent">
              <div class="section-group-header">
                <div class="header-content">
                  <i class="fas fa-chart-bar"></i>
                  <h2>Métricas Principales</h2>
                </div>
                <div class="header-actions">
                  
                
                 
                </div>
              </div>
              
              <div class="section-content">
                <div class="metrics-grid-enhanced">
                  <div class="metric-card-enhanced primary">
                    <div class="metric-icon">
                      <i class="fas fa-shield-alt"></i>
                    </div>
                    <div class="metric-content">
                      <div class="metric-label">Total Amenazas Detectadas</div>
                      <div class="metric-value">
                        ${totalThreats.toLocaleString()}
                        <span class="metric-trend">
                          <i class="fas fa-${threatGrowth === 'N/A' ? 'minus' : 'arrow-up'}"></i>
                          ${threatGrowth}
                        </span>
                      </div>
                    </div>
                  </div>
                  
                  <div class="metric-card-enhanced critical">
                    <div class="metric-icon">
                      <i class="fas fa-exclamation-triangle"></i>
                    </div>
                    <div class="metric-content">
                      <div class="metric-label">Amenazas Críticas</div>
                      <div class="metric-value">
                        ${criticalThreats.toLocaleString()}
                        <span class="metric-trend">
                          <i class="fas fa-${criticalThreatGrowth === 'N/A' ? 'minus' : 'arrow-up'}"></i>
                          ${criticalThreatGrowth}
                        </span>
                      </div>
                    </div>
                  </div>
                  
                  <div class="metric-card-enhanced success">
                    <div class="metric-icon">
                      <i class="fas fa-shield-check"></i>
                    </div>
                    <div class="metric-content">
                      <div class="metric-label">Amenazas Bloqueadas</div>
                      <div class="metric-value">
                        ${blockedThreats.toLocaleString()}
                        <span class="metric-trend">
                          <i class="fas fa-${blockedThreatGrowth === 'N/A' ? 'minus' : 'arrow-up'}"></i>
                          ${blockedThreatGrowth}
                        </span>
                      </div>
                    </div>
                  </div>
                  
                  <div class="metric-card-enhanced warning">
                    <div class="metric-icon">
                      <i class="fas fa-bolt"></i>
                    </div>
                    <div class="metric-content">
                      <div class="metric-label">Amenazas Activas</div>
                      <div class="metric-value">
                        ${activeThreats.toLocaleString()}
                        <span class="metric-trend">
                          <i class="fas fa-minus"></i>
                          ${activeThreatGrowth}
                        </span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <!-- Separador Visual -->
            <div class="section-divider-enhanced">
              <div class="divider-icon">
                <i class="fas fa-globe-americas"></i>
              </div>
            </div>

            <!-- SECCIÓN 3: ANÁLISIS GEOGRÁFICO Y TEMPORAL -->
            <div class="stats-section-group analysis-section visual-accent">
              <div class="section-group-header">
                <div class="header-content">
                  <i class="fas fa-globe-americas"></i>
                  <h2>Análisis Geográfico y Temporal</h2>
                </div>
                <div class="header-actions">
                  <span class="section-badge">
                    <i class="fas fa-map"></i>
                    195 países
                  </span>
                  <button class="action-btn" title="Vista detallada">
                    <i class="fas fa-expand"></i>
                  </button>
                </div>
              </div>
              
              <div class="section-content">
                <div class="analysis-grid">
                  <!-- Distribución Geográfica -->
                  <div class="analysis-card geographic">
                    <div class="card-header">
                      <h3>Distribución Geográfica</h3>
                      <button class="view-all-btn">Ver Todo</button>
                    </div>
                    <div class="card-content">
                      ${this.renderTopCountriesEnhanced()}
                    </div>
                  </div>
                  
       

            <!-- SECCIÓN 4: CLASIFICACIÓN DE AMENAZAS -->
            <div class="stats-section-group threat-classification visual-accent">
              <div class="section-group-header">
                <div class="header-content">
                  <i class="fas fa-virus"></i>
                  <h2>Clasificación de Amenazas</h2>
                </div>
                <div class="header-meta">
                  <span class="section-badge">
                    <i class="fas fa-shield-virus"></i>
                    4 tipos
                  </span>
                </div>
              </div>
              
              <div class="section-content">
                <div class="threat-types-enhanced">
                  <div class="threat-type-card malware">
                    <div class="threat-type-header">
                      <div class="threat-type-icon">
                        <i class="fas fa-bug"></i>
                      </div>
                      <div class="threat-type-info">
                        <h4>Malware</h4>
                        <span class="threat-percentage">45.2%</span>
                      </div>
                    </div>
                    <div class="threat-type-progress">
                      <div class="progress-track">
                        <div class="progress-fill malware" style="width: 45.2%"></div>
                      </div>
                      <span class="progress-label">Predominante</span>
                    </div>
                  </div>
                  
                  <div class="threat-type-card phishing">
                    <div class="threat-type-header">
                      <div class="threat-type-icon">
                        <i class="fas fa-fish"></i>
                      </div>
                      <div class="threat-type-info">
                        <h4>Phishing</h4>
                        <span class="threat-percentage">28.7%</span>
                      </div>
                    </div>
                    <div class="threat-type-progress">
                      <div class="progress-track">
                        <div class="progress-fill phishing" style="width: 28.7%"></div>
                      </div>
                      <span class="progress-label">Alto</span>
                    </div>
                  </div>
                  
                  <div class="threat-type-card ransomware">
                    <div class="threat-type-header">
                      <div class="threat-type-icon">
                        <i class="fas fa-lock"></i>
                      </div>
                      <div class="threat-type-info">
                        <h4>Ransomware</h4>
                        <span class="threat-percentage">15.8%</span>
                      </div>
                    </div>
                    <div class="threat-type-progress">
                      <div class="progress-track">
                        <div class="progress-fill ransomware" style="width: 15.8%"></div>
                      </div>
                      <span class="progress-label">Medio</span>
                    </div>
                  </div>
                  
                  <div class="threat-type-card botnet">
                    <div class="threat-type-header">
                      <div class="threat-type-icon">
                        <i class="fas fa-network-wired"></i>
                      </div>
                      <div class="threat-type-info">
                        <h4>Botnet</h4>
                        <span class="threat-percentage">10.3%</span>
                      </div>
                    </div>
                    <div class="threat-type-progress">
                      <div class="progress-track">
                        <div class="progress-fill botnet" style="width: 10.3%"></div>
                      </div>
                      <span class="progress-label">Bajo</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        `;
      }
      
      createAttacksTemplate() {
        if (!this.threatData) {
          console.warn('🚨 No hay threatData disponible en createAttacksTemplate');
          return '<div class="error">No hay datos disponibles</div>';
        }
        
        // Generar datos de ataques simulados más ricos
        const recentAttacks = this.generateRecentAttacks();
        console.log('📊 Ataques generados para timeline móvil:', recentAttacks.length, recentAttacks);
        const attackStats = this.calculateAttackStats(recentAttacks);
        
        return `
          <div class="attacks-content-enhanced">
            <!-- SECCIÓN 1: RESUMEN DE ACTIVIDAD -->
            <div class="stats-section-group activity-overview visual-accent">
              <div class="section-group-header">
                <div class="header-content">
                  <i class="fas fa-bolt"></i>
                  <h2>Actividad en Tiempo Real</h2>
                </div>
                <div class="header-meta">
                  <span class="section-badge">
                    <i class="fas fa-fire"></i>
                    Alta Actividad
                  </span>
                  <span class="update-indicator">
                    <i class="fas fa-circle pulse"></i>
                    Actualizado hace 30s
                  </span>
                </div>
              </div>
              
              <div class="section-content">
                <div class="activity-summary-enhanced">
                  <div class="activity-metric-card critical">
                    <div class="metric-icon">
                      <i class="fas fa-exclamation-triangle"></i>
                    </div>
                    <div class="metric-content">
                      <div class="metric-label">Ataques Activos</div>
                      <div class="metric-value">
                        ${attackStats.active || 127}
                        <span class="metric-trend">
                          <i class="fas fa-arrow-up"></i>
                          +12%
                        </span>
                      </div>
                    </div>
                  </div>
                  
                  <div class="activity-metric-card success">
                    <div class="metric-icon">
                      <i class="fas fa-shield-alt"></i>
                    </div>
                    <div class="metric-content">
                      <div class="metric-label">Ataques Bloqueados</div>
                      <div class="metric-value">
                        ${attackStats.blocked || 2456}
                        <span class="metric-trend">
                          <i class="fas fa-arrow-up"></i>
                          +8%
                        </span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <!-- Separador Visual -->
            <div class="section-divider-enhanced">
              <div class="divider-icon">
                <i class="fas fa-clock"></i>
              </div>
            </div>

            <!-- SECCIÓN 2: TIMELINE DE ATAQUES -->
            <div class="stats-section-group timeline-section visual-accent">
              <div class="section-group-header">
                <div class="header-content">
                  <i class="fas fa-history"></i>
                  <h2>Timeline de Ataques</h2>
                </div>
                <div class="header-actions">
                  <span class="section-badge">
                    <i class="fas fa-clock"></i>
                    Últimas 24h
                  </span>
                  <button class="action-btn auto-refresh-btn active" title="Auto-refresh activo">
                    <i class="fas fa-sync-alt"></i>
                  </button>
                  <button class="action-btn" title="Configurar alertas">
                    <i class="fas fa-bell"></i>
                  </button>
                </div>
              </div>
              
              <div class="section-content">
                <div class="timeline-container-enhanced">
                  ${this.renderAttacksTimeline(recentAttacks)}
                </div>
              </div>
            </div>
          </div>
        `;
      }
      

      
      renderTopCountries() {
        const topCountries = this.threatData.cloudflare?.topCountries || [
          { code: 'US', value: 0.25, name: 'Estados Unidos' },
          { code: 'CN', value: 0.18, name: 'China' },
          { code: 'RU', value: 0.15, name: 'Rusia' },
          { code: 'DE', value: 0.12, name: 'Alemania' },
          { code: 'GB', value: 0.10, name: 'Reino Unido' }
        ];
        
        return topCountries.slice(0, 5).map((country, index) => {
          const percentage = Math.round((country.value || 0) * 100);
          const attacks = Math.floor((country.value || 0) * 100000);
          
          return `
            <div class="country-item">
              <div class="country-header">
                <div class="country-info">
                  <div class="country-flag">${country.code}</div>
                  <span class="country-name">${country.name}</span>
                </div>
                <span class="country-percentage">${percentage}%</span>
              </div>
              <div class="country-bar">
                <div class="country-bar-fill" style="width: ${percentage}%"></div>
              </div>
              <div class="country-attacks">${attacks.toLocaleString()} ataques detectados</div>
            </div>
          `;
        }).join('');
      }

      renderTopCountriesEnhanced() {
        const threatData = window.threatMapProps?.threatData || {};
        const realCountries = threatData.cloudflare?.topCountries || [];
        
        // Mapeo de códigos de país a flags
        const countryMapping = {
          'US': { flag: '🇺🇸', name: 'Estados Unidos' },
          'CN': { flag: '🇨🇳', name: 'China' },
          'RU': { flag: '🇷🇺', name: 'Rusia' },
          'DE': { flag: '🇩🇪', name: 'Alemania' },
          'GB': { flag: '🇬🇧', name: 'Reino Unido' },
          'FR': { flag: '🇫🇷', name: 'Francia' },
          'IN': { flag: '🇮🇳', name: 'India' },
          'JP': { flag: '🇯🇵', name: 'Japón' },
          'BR': { flag: '🇧🇷', name: 'Brasil' },
          'CA': { flag: '🇨🇦', name: 'Canadá' }
        };
        
        // Procesar países reales de la API
        const topCountries = realCountries.slice(0, 5).map((country, index) => {
          const countryCode = country.code || country.name?.substring(0, 2).toUpperCase() || 'XX';
          const mapping = countryMapping[countryCode] || { flag: '🏳️', name: country.name || 'País Desconocido' };
          const attacks = country.attacks || country.count || 0;
          const totalAttacks = realCountries.reduce((sum, c) => sum + (c.attacks || c.count || 0), 0);
          const value = totalAttacks > 0 ? attacks / totalAttacks : 0;
          
          // Calcular tendencia basada en posición
          const trendValue = index < 2 ? 12 + index * 3 : -(2 + index);
          const trend = trendValue > 0 ? `+${trendValue}%` : `${trendValue}%`;
          
          // Determinar severidad basada en número de ataques
          let severity = 'low';
          if (attacks > 5000) severity = 'critical';
          else if (attacks > 2000) severity = 'high';
          else if (attacks > 500) severity = 'medium';
          
          return {
            code: countryCode,
            value: value,
            name: mapping.name,
            flag: mapping.flag,
            trend: trend,
            severity: severity,
            lastAttack: `${(index + 1) * 5} min`,
            attacks: attacks
          };
        });
        
        return topCountries.slice(0, 5).map((country, index) => {
          const percentage = Math.round((country.value || 0) * 100);
          const attacks = Math.floor((country.value || 0) * 100000);
          const trendDirection = country.trend.startsWith('+') ? 'up' : 'down';
          
          return `
            <div class="country-item-enhanced">
              <div class="country-rank">#${index + 1}</div>
              <div class="country-main">
                <div class="country-header-enhanced">
                  <div class="country-info-enhanced">
                    <span class="country-flag-enhanced">${country.flag}</span>
                    <div class="country-details">
                      <span class="country-name-enhanced">${country.name}</span>
                      <span class="country-code">${country.code}</span>
                    </div>
                  </div>
                  <div class="country-metrics">
                    <span class="country-percentage-enhanced">${percentage}%</span>
                    <span class="country-trend ${trendDirection}">${country.trend}</span>
                  </div>
                </div>
                <div class="country-progress-enhanced">
                  <div class="country-bar-enhanced">
                    <div class="country-bar-fill-enhanced ${country.severity}" style="width: ${percentage}%"></div>
                  </div>
                  <div class="country-stats-row">
                    <span class="country-attacks-enhanced">${attacks.toLocaleString()} ataques</span>
                    <span class="country-last-attack">Último: ${country.lastAttack}</span>
                  </div>
                </div>
              </div>
              <div class="country-severity-indicator ${country.severity}">
                <i class="fas fa-circle"></i>
              </div>
            </div>
          `;
        }).join('');
      }
      
      renderGrowthRates() {
        const growthData = [
          { label: 'Malware', rate: '+15%', trend: 'up', color: '#ef4444' },
          { label: 'Phishing', rate: '+8%', trend: 'up', color: '#f59e0b' },
          { label: 'DDoS', rate: '-3%', trend: 'down', color: '#22c55e' },
          { label: 'Ransomware', rate: '+22%', trend: 'up', color: '#dc2626' }
        ];
        
        return growthData.map(item => `
          <div class="growth-item">
            <div class="growth-header">
              <span class="growth-label">${item.label}</span>
              <span class="growth-rate ${item.trend}" style="color: ${item.color}">
                ${item.trend === 'up' ? '↗' : '↘'} ${item.rate}
              </span>
            </div>
            <div class="growth-bar">
              <div class="growth-bar-fill" style="background: ${item.color}; width: ${Math.abs(parseInt(item.rate))}%"></div>
            </div>
          </div>
        `).join('');
      }
      
      getAttackIcon(type) {
        const icons = {
          'malware': '🦠',
          'phishing': '🎣',
          'ransomware': '🔒',
          'ddos': '⚡',
          'botnet': '🤖',
          'default': '⚠️'
        };
        return icons[type] || icons.default;
      }
      
      getSeverityLabel(severity) {
        const labels = {
          'critical': 'Crítica',
          'high': 'Alta',
          'medium': 'Media',
          'low': 'Baja'
        };
        return labels[severity] || 'Media';
      }
      
      generateRecentAttacks() {
        const threatData = window.threatMapProps?.threatData || {};
        
        console.log('🔍 threatData disponible en generateRecentAttacks:', threatData);
        console.log('📊 URLhaus data:', threatData.urlhaus?.recent_samples?.length || 0, 'samples');
        console.log('🔒 RansomWatch data:', threatData.ransomwatch?.rawData?.recentPosts?.length || 0, 'posts');
        console.log('🤖 FeodoTracker data:', threatData.feodotracker?.recentBotnets?.length || 0, 'botnets');
        console.log('🛡️ Cloudflare data:', threatData.cloudflare?.topAttackPairs?.length || 0, 'pairs');
        
        // Mapeo de países con flags
        const countryMapping = {
          'US': { name: 'Estados Unidos', flag: '🇺🇸' },
          'CN': { name: 'China', flag: '🇨🇳' },
          'RU': { name: 'Rusia', flag: '🇷🇺' },
          'DE': { name: 'Alemania', flag: '🇩🇪' },
          'GB': { name: 'Reino Unido', flag: '🇬🇧' },
          'FR': { name: 'Francia', flag: '🇫🇷' },
          'BR': { name: 'Brasil', flag: '🇧🇷' },
          'IN': { name: 'India', flag: '🇮🇳' },
          'JP': { name: 'Japón', flag: '🇯🇵' },
          'CA': { name: 'Canadá', flag: '🇨🇦' }
        };
        
        const attacks = [];
        
        // Generar ataques basados en datos reales de URLhaus
        if (threatData.urlhaus?.recent_samples) {
          threatData.urlhaus.recent_samples.forEach((url, index) => {
            // Solo usar datos que tengan host real
            if (!url.host) return;
            
            const countryCode = url.country || 'XX';
            const country = countryMapping[countryCode] || { name: url.country || 'Desconocido', flag: '🏳️' };
            
            attacks.push({
              id: `urlhaus_${index}`,
              type: 'malware',
              title: `URL maliciosa: ${url.url_status || 'detectada'}`,
              country: country.name,
              countryCode: countryCode,
              flag: country.flag,
              severity: url.threat === 'malware_download' ? 'critical' : 'high',
              timestamp: new Date(url.date_added || Date.now() - (index * 45000)).getTime(), // Si no hay fecha, espaciar por 45 segundos
              minutesAgo: url.date_added ? Math.floor((Date.now() - new Date(url.date_added).getTime()) / (1000 * 60)) : Math.floor(index * 0.75),
              ip: url.host,
              port: url.port || 80,
              blocked: url.url_status === 'offline',
              source: 'URLhaus'
            });
          });
        }
        
        // Generar ataques basados en datos de Ransomwatch (solo datos reales)
        if (threatData.ransomwatch?.rawData?.recentPosts) {
          threatData.ransomwatch.rawData.recentPosts.forEach((ransom, index) => {
            // Solo usar datos que tengan información real
            if (!ransom.group_name && !ransom.victim) return;
            
            const countryCode = ransom.country || 'XX';
            const country = countryMapping[countryCode] || { name: ransom.country || 'Desconocido', flag: '🏳️' };
            
            attacks.push({
              id: `ransomwatch_${index}`,
              type: 'ransomware',
              title: `Ransomware: ${ransom.group_name || 'Grupo desconocido'} - ${ransom.victim || 'Víctima'}`,
              country: country.name,
              countryCode: countryCode,
              flag: country.flag,
              severity: 'critical',
              timestamp: new Date(ransom.discovered || Date.now()).getTime(),
              minutesAgo: Math.floor((Date.now() - new Date(ransom.discovered || Date.now()).getTime()) / (1000 * 60)),
              ip: ransom.website || ransom.leak_site || null,
              port: 443,
              blocked: ransom.status === 'offline' || ransom.status === 'down',
              source: 'Ransomwatch'
            });
          });
        }
        
        // Generar ataques basados en datos de FeodoTracker (botnet)
        if (threatData.feodotracker?.recentBotnets) {
          threatData.feodotracker.recentBotnets.slice(0, 5).forEach((botnet, index) => {
            const countryCode = botnet.country || 'XX';
            const country = countryMapping[countryCode] || { name: botnet.country || 'Desconocido', flag: '🏳️' };
            
            attacks.push({
              id: `botnet_${index}`,
              type: 'botnet',
              title: `Servidor C&C: ${botnet.malware || 'Botnet'} detectado`,
              country: country.name,
              countryCode: countryCode,
              flag: country.flag,
              severity: botnet.status === 'online' ? 'high' : 'medium',
              timestamp: new Date(botnet.first_seen || Date.now() - (index * 120000)).getTime(),
              minutesAgo: Math.floor((Date.now() - new Date(botnet.first_seen || Date.now() - (index * 120000)).getTime()) / (1000 * 60)),
              ip: botnet.ip_address || `botnet-${index}`,
              port: botnet.port || 443,
              blocked: botnet.status === 'offline',
              source: 'FeodoTracker',
              malware: botnet.malware
            });
          });
        }
        
        // Generar ataques basados en datos de Cloudflare topAttackPairs
        if (threatData.cloudflare?.topAttackPairs) {
          console.log('🌍 Datos de países de Cloudflare:', threatData.cloudflare.topAttackPairs.slice(0, 3).map(p => ({
            origin: p.origin_country,
            target: p.target_country,
            sourceCountry: p.sourceCountry,
            targetCountry: p.targetCountry
          })));
          
          threatData.cloudflare.topAttackPairs.slice(0, 10).forEach((pair, index) => {
            // Usar los campos correctos de la API de Cloudflare
            const originCountryCode = pair.origin_country || pair.sourceCountry || 'Origen desconocido';
            const targetCountryCode = pair.target_country || pair.targetCountry || 'Destino desconocido';
            
            const sourceCountry = countryMapping[originCountryCode] || { name: originCountryCode, flag: '🏳️' };
            const targetCountry = countryMapping[targetCountryCode] || { name: targetCountryCode, flag: '🏳️' };
            
            const attackVolume = pair.attacks || pair.requests || pair.attackCount || 0;
            
            attacks.push({
              id: `cloudflare_${index}`,
              type: 'ddos',
              title: `Ataque DDoS: ${sourceCountry.name} → ${targetCountry.name}`,
              country: sourceCountry.name,
              countryCode: originCountryCode,
              flag: sourceCountry.flag,
              severity: attackVolume > 1000 ? 'critical' : attackVolume > 500 ? 'high' : 'medium',
              timestamp: Date.now() - (index * 30000), // Espaciar por 30 segundos para ser más recientes
              minutesAgo: Math.floor(index * 0.5), // Convertir a minutos
              ip: `${originCountryCode}-to-${targetCountryCode}`,
              port: 80,
              blocked: Math.random() > 0.3, // 70% bloqueados
              source: 'Cloudflare',
              attackCount: attackVolume,
              originCountry: originCountryCode,
              targetCountry: targetCountryCode
            });
          });
        }
        
        // Filtrar ataques que no tengan IP válida
        const validAttacks = attacks.filter(attack => attack.ip && attack.ip !== null);
        
        console.log('📊 Total de ataques generados:', attacks.length);
        console.log('📊 Ataques válidos (con IP):', validAttacks.length);
        
        // Ordenar por timestamp (más recientes primero)
        const sortedAttacks = validAttacks.sort((a, b) => b.timestamp - a.timestamp);
        
        console.log('📊 Primeros 5 ataques ordenados por fecha:', sortedAttacks.slice(0, 5).map(a => ({
          type: a.type,
          title: a.title.substring(0, 50) + '...',
          minutesAgo: a.minutesAgo,
          timestamp: new Date(a.timestamp).toLocaleTimeString()
        })));
        
        return sortedAttacks;
      }



      calculateAttackStats(attacks) {
        return {
          total: attacks.length,
          blocked: attacks.filter(a => a.blocked).length,
          active: attacks.filter(a => !a.blocked).length,
          critical: attacks.filter(a => a.severity === 'critical').length
        };
      }

      renderAttacksTimeline(attacks) {
        console.log('🎯 renderAttacksTimeline recibió:', attacks?.length || 0, 'ataques');
        if (!attacks || attacks.length === 0) {
          return '<div class="timeline-empty">No hay ataques recientes para mostrar</div>';
        }
        return attacks.slice(0, 15).map((attack, index) => `
          <div class="timeline-item ${attack.severity}" data-type="${attack.type}">
            <div class="timeline-time">${this.formatTimeAgo(attack.minutesAgo)}</div>
            <div class="timeline-content">
              <div class="attack-header">
                <div class="attack-type-badge ${attack.type}">
                  ${this.getAttackIcon(attack.type)}
                  <span>${attack.type.toUpperCase()}</span>
                </div>
                <div class="attack-status ${attack.blocked ? 'blocked' : 'active'}">
                  <i class="fas fa-${attack.blocked ? 'shield-check' : 'exclamation-triangle'}"></i>
                  ${attack.blocked ? 'BLOQUEADO' : 'ACTIVO'}
                </div>
              </div>
              <div class="attack-title">${attack.title}</div>
              <div class="attack-details">
                <span class="attack-location">
                  ${attack.flag} ${attack.country}
                </span>
                <span class="attack-ip">${attack.ip}:${attack.port}</span>
              </div>
            </div>
            <div class="timeline-severity ${attack.severity}">
              <i class="fas fa-circle"></i>
            </div>
          </div>
        `).join('');
      }

      renderAttackHeatmap() {
        const hours = Array.from({length: 24}, (_, i) => {
          // Intensidad basada en horas pico (más actividad durante horas laborales)
          const intensity = i >= 8 && i <= 18 ? 70 + (i % 3) * 10 : 30 + (i % 4) * 5;
          const level = intensity > 80 ? 'very-high' : 
                      intensity > 60 ? 'high' : 
                      intensity > 40 ? 'medium' : 
                      intensity > 20 ? 'low' : 'very-low';
          return `
            <div class="heatmap-cell ${level}" data-hour="${i}" data-intensity="${intensity}">
              <span class="hour-label">${i.toString().padStart(2, '0')}:00</span>
              <span class="intensity-value">${intensity}</span>
            </div>
          `;
        });
        return hours.join('');
      }

      renderAttackVectors() {
        const vectors = [
          { name: 'Email', percentage: 45, trend: '+12%', icon: 'envelope' },
          { name: 'Web', percentage: 32, trend: '+8%', icon: 'globe' },
          { name: 'Red', percentage: 15, trend: '-3%', icon: 'network-wired' },
          { name: 'USB', percentage: 5, trend: '+2%', icon: 'usb' },
          { name: 'Otros', percentage: 3, trend: '0%', icon: 'ellipsis-h' }
        ];

        return vectors.map(vector => `
          <div class="vector-item">
            <div class="vector-icon">
              <i class="fas fa-${vector.icon}"></i>
            </div>
            <div class="vector-info">
              <div class="vector-name">${vector.name}</div>
              <div class="vector-stats">
                <span class="vector-percentage">${vector.percentage}%</span>
                <span class="vector-trend ${vector.trend.startsWith('+') ? 'up' : vector.trend.startsWith('-') ? 'down' : 'neutral'}">
                  ${vector.trend}
                </span>
              </div>
            </div>
            <div class="vector-bar">
              <div class="vector-fill" style="width: ${vector.percentage}%"></div>
            </div>
          </div>
        `).join('');
      }

      formatTimeAgo(minutes) {
        if (minutes < 1) return 'Ahora';
        if (minutes < 60) return `${minutes}m`;
        const hours = Math.floor(minutes / 60);
        return `${hours}h`;
      }

      renderThreatTypeFilters() {
        const threatData = window.threatMapProps?.threatData || {};
        
        // Obtener datos reales de las APIs
        const malwareCount = threatData.malwarebazaar?.count || 0;
        const phishingCount = threatData.urlhaus?.count || 0;
        const ransomwareCount = threatData.ransomwatch?.count || 0;
        const ddosCount = threatData.cloudflare?.topAttackPairs?.length ? 
          threatData.cloudflare.topAttackPairs.reduce((sum, pair) => sum + (pair.attacks || 0), 0) : 0;
        const botnetCount = threatData.cloudflare?.topCountries?.length ? 
          threatData.cloudflare.topCountries.reduce((sum, country) => sum + (country.attacks || 0), 0) : 0;
        
        const threatTypes = [
          { id: 'malware', name: 'Malware', count: malwareCount, icon: 'bug', color: '#e74c3c' },
          { id: 'phishing', name: 'Phishing', count: phishingCount, icon: 'fish', color: '#f39c12' },
          { id: 'ransomware', name: 'Ransomware', count: ransomwareCount, icon: 'lock', color: '#8e44ad' },
          { id: 'ddos', name: 'DDoS', count: ddosCount, icon: 'tachometer-alt', color: '#e67e22' },
          { id: 'botnet', name: 'Botnet', count: botnetCount, icon: 'network-wired', color: '#34495e' },
          { id: 'trojan', name: 'Troyano', count: Math.floor(malwareCount * 0.3), icon: 'horse-head', color: '#c0392b' }
        ];

        return threatTypes.map(type => `
          <div class="filter-option">
            <label class="filter-checkbox">
              <input type="checkbox" value="${type.id}" checked>
              <span class="checkmark"></span>
              <div class="filter-info">
                <div class="filter-icon" style="color: ${type.color}">
                  <i class="fas fa-${type.icon}"></i>
                </div>
                <div class="filter-details">
                  <span class="filter-name">${type.name}</span>
                  <span class="filter-count">${type.count.toLocaleString()} amenazas</span>
                </div>
              </div>
            </label>
          </div>
        `).join('');
      }

      renderSeverityFilters() {
        const threatData = window.threatMapProps?.threatData || {};
        
        // Calcular conteos reales basados en las APIs
        const urlhausCount = threatData.urlhaus?.count || 0;
        const malwarebazaarCount = threatData.malwarebazaar?.count || 0;
        const ransomwatchCount = threatData.ransomwatch?.count || 0;
        const cloudflareAttacks = threatData.cloudflare?.topCountries?.reduce((sum, country) => 
          sum + (country.attacks || country.count || 0), 0) || 0;
        
        const totalThreats = urlhausCount + malwarebazaarCount + ransomwatchCount + cloudflareAttacks;
        
        // Distribución realista de severidades
        const criticalCount = Math.floor(totalThreats * 0.15); // 15% críticas
        const highCount = Math.floor(totalThreats * 0.25); // 25% altas
        const mediumCount = Math.floor(totalThreats * 0.40); // 40% medias
        const lowCount = totalThreats - criticalCount - highCount - mediumCount; // El resto bajas
        
        const severities = [
          { id: 'critical', name: 'Crítica', count: criticalCount, color: '#e74c3c', percentage: Math.round((criticalCount / totalThreats) * 100) || 15 },
          { id: 'high', name: 'Alta', count: highCount, color: '#f39c12', percentage: Math.round((highCount / totalThreats) * 100) || 25 },
          { id: 'medium', name: 'Media', count: mediumCount, color: '#f1c40f', percentage: Math.round((mediumCount / totalThreats) * 100) || 40 },
          { id: 'low', name: 'Baja', count: lowCount, color: '#27ae60', percentage: Math.round((lowCount / totalThreats) * 100) || 20 }
        ];

        return severities.map(severity => `
          <div class="filter-option severity-option">
            <label class="filter-checkbox">
              <input type="checkbox" value="${severity.id}" checked>
              <span class="checkmark"></span>
              <div class="filter-info">
                <div class="severity-indicator" style="background-color: ${severity.color}"></div>
                <div class="filter-details">
                  <span class="filter-name">${severity.name}</span>
                  <span class="filter-count">${severity.count} (${severity.percentage}%)</span>
                </div>
              </div>
            </label>
            <div class="severity-bar">
              <div class="severity-fill" style="width: ${severity.percentage}%; background-color: ${severity.color}"></div>
            </div>
          </div>
        `).join('');
      }

      renderLocationFilters() {
        const threatData = window.threatMapProps?.threatData || {};
        
        // Obtener datos reales de países de Cloudflare API
        const topCountries = threatData.cloudflare?.topCountries || [];
        
        // Mapeo de códigos de país a flags y regiones
        const countryMapping = {
          'US': { flag: '🇺🇸', region: 'América del Norte' },
          'CN': { flag: '🇨🇳', region: 'Asia' },
          'RU': { flag: '🇷🇺', region: 'Europa/Asia' },
          'DE': { flag: '🇩🇪', region: 'Europa' },
          'GB': { flag: '🇬🇧', region: 'Europa' },
          'BR': { flag: '🇧🇷', region: 'América del Sur' },
          'FR': { flag: '🇫🇷', region: 'Europa' },
          'IN': { flag: '🇮🇳', region: 'Asia' },
          'JP': { flag: '🇯🇵', region: 'Asia' },
          'KR': { flag: '🇰🇷', region: 'Asia' },
          'CA': { flag: '🇨🇦', region: 'América del Norte' },
          'AU': { flag: '🇦🇺', region: 'Oceanía' }
        };
        
        // Procesar países reales de la API
        const locations = topCountries.slice(0, 10).map(country => {
          const countryCode = country.code || country.name?.substring(0, 2).toUpperCase() || 'XX';
          const mapping = countryMapping[countryCode] || { flag: '🏳️', region: 'Desconocido' };
          
          return {
            id: countryCode.toLowerCase(),
            name: country.name || 'País Desconocido',
            count: country.attacks || country.count || 0,
            flag: mapping.flag,
            region: mapping.region
          };
        });

        return `
          <div class="location-search">
            <input type="text" placeholder="Buscar país..." class="location-search-input">
          </div>
          <div class="location-list">
            ${locations.map(location => `
              <div class="filter-option location-option">
                <label class="filter-checkbox">
                  <input type="checkbox" value="${location.id}">
                  <span class="checkmark"></span>
                  <div class="filter-info">
                    <div class="location-flag">${location.flag}</div>
                    <div class="filter-details">
                      <span class="filter-name">${location.name}</span>
                      <span class="filter-region">${location.region}</span>
                      <span class="filter-count">${location.count.toLocaleString()} amenazas</span>
                    </div>
                  </div>
                </label>
              </div>
            `).join('')}
          </div>
        `;
      }

      renderTimeFilters() {
        const threatData = window.threatMapProps?.threatData || {};
        
        // Calcular conteos reales basados en las APIs
        const urlhausCount = threatData.urlhaus?.count || 0;
        const malwarebazaarCount = threatData.malwarebazaar?.count || 0;
        const ransomwatchCount = threatData.ransomwatch?.count || 0;
        const cloudflareAttacks = threatData.cloudflare?.topCountries?.reduce((sum, country) => 
          sum + (country.attacks || country.count || 0), 0) || 0;
        
        const totalThreats = urlhausCount + malwarebazaarCount + ransomwatchCount + cloudflareAttacks;
        
        // Distribución temporal realista
        const timeRanges = [
          { id: '1h', name: 'Última hora', count: Math.floor(totalThreats * 0.05), active: true },
          { id: '6h', name: 'Últimas 6 horas', count: Math.floor(totalThreats * 0.15), active: false },
          { id: '24h', name: 'Últimas 24 horas', count: Math.floor(totalThreats * 0.30), active: false },
          { id: '7d', name: 'Últimos 7 días', count: Math.floor(totalThreats * 0.70), active: false },
          { id: '30d', name: 'Últimos 30 días', count: totalThreats, active: false }
        ];

        return `
          <div class="time-range-options">
            ${timeRanges.map(range => `
              <div class="time-range-option ${range.active ? 'active' : ''}">
                <input type="radio" name="timeRange" value="${range.id}" ${range.active ? 'checked' : ''}>
                <label>
                  <span class="time-name">${range.name}</span>
                  <span class="time-count">${range.count.toLocaleString()} amenazas</span>
                </label>
              </div>
            `).join('')}
          </div>
          <div class="custom-time-range">
            <h5>Rango Personalizado</h5>
            <div class="date-inputs">
              <input type="datetime-local" class="date-input" placeholder="Desde">
              <input type="datetime-local" class="date-input" placeholder="Hasta">
            </div>
          </div>
        `;
      }

      renderProtectionFilters() {
        const threatData = window.threatMapProps?.threatData || {};
        
        // Calcular conteos reales basados en las APIs
        const urlhausCount = threatData.urlhaus?.count || 0;
        const malwarebazaarCount = threatData.malwarebazaar?.count || 0;
        const ransomwatchCount = threatData.ransomwatch?.count || 0;
        const cloudflareAttacks = threatData.cloudflare?.topCountries?.reduce((sum, country) => 
          sum + (country.attacks || country.count || 0), 0) || 0;
        
        const totalThreats = urlhausCount + malwarebazaarCount + ransomwatchCount + cloudflareAttacks;
        
        // Distribución realista de estados de protección
        const blockedCount = Math.floor(totalThreats * 0.75); // 75% bloqueados
        const activeCount = Math.floor(totalThreats * 0.15); // 15% activos
        const monitoringCount = Math.floor(totalThreats * 0.05); // 5% en monitoreo
        const resolvedCount = Math.floor(totalThreats * 0.05); // 5% resueltos
        
        const protectionStates = [
          { id: 'blocked', name: 'Bloqueado', count: blockedCount, icon: 'shield-check', color: '#27ae60' },
          { id: 'active', name: 'Activo', count: activeCount, icon: 'exclamation-triangle', color: '#e74c3c' },
          { id: 'monitoring', name: 'En Monitoreo', count: monitoringCount, icon: 'eye', color: '#f39c12' },
          { id: 'resolved', name: 'Resuelto', count: resolvedCount, icon: 'check-circle', color: '#3498db' }
        ];

        return protectionStates.map(state => `
          <div class="filter-option protection-option">
            <label class="filter-checkbox">
              <input type="checkbox" value="${state.id}" ${state.id === 'blocked' ? 'checked' : ''}>
              <span class="checkmark"></span>
              <div class="filter-info">
                <div class="protection-icon" style="color: ${state.color}">
                  <i class="fas fa-${state.icon}"></i>
                </div>
                <div class="filter-details">
                  <span class="filter-name">${state.name}</span>
                  <span class="filter-count">${state.count} amenazas</span>
                </div>
              </div>
            </label>
          </div>
        `).join('');
      }

      formatTime(timestamp) {
        if (!timestamp) return 'Hace un momento';
        
        const now = new Date();
        const time = new Date(timestamp);
        const diff = now - time;
        
        const minutes = Math.floor(diff / 60000);
        const hours = Math.floor(diff / 3600000);
        const days = Math.floor(diff / 86400000);
        
        if (minutes < 1) return 'Ahora';
        if (minutes < 60) return `Hace ${minutes}m`;
        if (hours < 24) return `Hace ${hours}h`;
        return `Hace ${days}d`;
      }
      

      

      

      
      handleResize() {
        const newIsMobile = window.innerWidth <= 1024;
        if (newIsMobile !== this.isMobile) {
          this.isMobile = newIsMobile;
          if (this.isMobile) {
            this.hideDesktopElements();
          } else {
            this.showDesktopElements();
          }
        }
      }
      
      hideDesktopElements() {
        // Ocultar elementos de escritorio en modo móvil
        document.querySelectorAll('.desktop-only, .right-panel').forEach(el => {
          el.style.display = 'none';
        });
      }
      
      showDesktopElements() {
        // Mostrar elementos de escritorio al salir del modo móvil
        document.querySelectorAll('.desktop-only, .right-panel').forEach(el => {
          el.style.display = '';
        });
      }
    }

    // Inicializar el sistema
    window.mobileSystem = new MobileNavigationSystem();
    window.mobileSystem.init();
    
    console.log('✅ Sistema móvil mejorado inicializado');
  });

  // ===== SISTEMA DE INDICADORES Y NOTIFICACIONES =====
  
  class TabIndicatorSystem {
    constructor() {
      this.updateInterval = null;
      this.notificationQueue = [];
    }
    
    init() {
      this.updateTabIndicators();
      this.startRealTimeUpdates();
      this.setupNotificationStyles();
      console.log('🔔 Sistema de indicadores inicializado');
    }
    
    // Función para actualizar indicadores de estado en las pestañas
    updateTabIndicators() {
      const tabs = document.querySelectorAll('.nav-tab');
      
      tabs.forEach(tab => {
        const tabId = tab.getAttribute('data-panel') || tab.getAttribute('data-tab');
        if (!tabId) return;
        
        // Remover indicadores existentes
        const existingIndicator = tab.querySelector('.status-indicator');
        const existingBadge = tab.querySelector('.notification-badge');
        
        if (existingIndicator) existingIndicator.remove();
        if (existingBadge) existingBadge.remove();
        
        // Agregar nuevos indicadores basados en el estado actual
        const status = this.getTabStatus(tabId);
        const notifications = this.getTabNotifications(tabId);
        
        if (status && status !== 'normal') {
          const indicator = document.createElement('div');
          indicator.className = `status-indicator ${status}`;
          tab.appendChild(indicator);
        }
        
        if (notifications > 0) {
          const badge = document.createElement('div');
          badge.className = 'notification-badge';
          badge.textContent = notifications > 99 ? '99+' : notifications;
          tab.appendChild(badge);
        }
      });
    }
    
    // Función para obtener el estado de una pestaña
    getTabStatus(tabId) {
      const statusMap = {
        stats: this.getCurrentThreatLevel(),
        attacks: this.getAttackStatus(),
        filters: 'normal'
      };
      
      return statusMap[tabId] || 'normal';
    }
    
    // Función para obtener el número de notificaciones de una pestaña
    getTabNotifications(tabId) {
      const notificationMap = {
        stats: 0,
        attacks: this.getActiveAttacksCount(),
        filters: this.getActiveFiltersCount()
      };
      
      return notificationMap[tabId] || 0;
    }
    
    // Función para obtener el nivel de amenaza actual
    getCurrentThreatLevel() {
      const activeAttacks = this.getActiveAttacksCount();
      
      if (activeAttacks > 50) return 'critical';
      if (activeAttacks > 20) return 'warning';
      if (activeAttacks > 5) return 'warning';
      return 'safe';
    }
    
    // Función para obtener el estado de ataques
    getAttackStatus() {
      const recentAttacks = this.getActiveAttacksCount();
      
      if (recentAttacks > 10) return 'critical';
      if (recentAttacks > 5) return 'warning';
      return 'safe';
    }
    
    // Función para obtener el número de ataques activos basado en datos reales
    getActiveAttacksCount() {
      const threatData = window.threatMapProps?.threatData || {};
      
      // Contar ataques reales de las APIs
      const urlhausCount = threatData.urlhaus?.count || 0;
      const ransomwatchCount = threatData.ransomwatch?.count || 0;
      const malwarebazaarCount = threatData.malwarebazaar?.count || 0;
      
      // Calcular ataques activos como un porcentaje de los datos reales
      const totalThreats = urlhausCount + ransomwatchCount + malwarebazaarCount;
      const activeAttacks = Math.floor(totalThreats * 0.05); // 5% de amenazas están activas
      
      return Math.max(activeAttacks, 0); // Asegurar que no sea negativo
    }
    
    // Función para obtener el número de filtros activos
    getActiveFiltersCount() {
      // Contar filtros activos reales si existen
      const activeFilters = document.querySelectorAll('.filter-checkbox input:checked');
      return activeFilters.length || 2;
    }
    
    // Función para simular actualizaciones en tiempo real
    startRealTimeUpdates() {
      // Actualizar indicadores cada 30 segundos
      this.updateInterval = setInterval(() => {
        this.updateTabIndicators();
        
        // Mostrar notificación si hay nuevos ataques críticos
        const criticalAttacks = this.getActiveAttacksCount();
        if (criticalAttacks > 25) {
          this.showNotification(
            '¡Alerta de Seguridad!', 
            `Se han detectado ${criticalAttacks} ataques activos`, 
            'critical'
          );
        }
      }, 120000);
      
      // Actualizar métricas cada 5 minutos
      setInterval(() => {
        this.refreshMetrics();
      }, 300000);
    }
    
    // Función para mostrar notificaciones del sistema
    showNotification(title, message, type = 'info') {
      // Evitar spam de notificaciones
      const notificationKey = `${title}-${type}`;
      if (this.notificationQueue.includes(notificationKey)) return;
      
      this.notificationQueue.push(notificationKey);
      
      // Crear elemento de notificación
      const notification = document.createElement('div');
      notification.className = `system-notification ${type}`;
      notification.innerHTML = `
        <div class="notification-header">
          <strong>${title}</strong>
          <button class="notification-close" onclick="this.parentElement.parentElement.remove()">×</button>
        </div>
        <div class="notification-message">${message}</div>
      `;
      
      // Agregar al DOM
      document.body.appendChild(notification);
      
      // Auto-remover después de 5 segundos
      setTimeout(() => {
        if (notification.parentElement) {
          notification.style.animation = 'slideIn 0.3s ease-out reverse';
          setTimeout(() => {
            notification.remove();
            // Remover de la cola
            const index = this.notificationQueue.indexOf(notificationKey);
            if (index > -1) this.notificationQueue.splice(index, 1);
          }, 300);
        }
      }, 5000);
    }
    
    // Función para configurar estilos de notificaciones
    setupNotificationStyles() {
      if (document.querySelector('#notification-styles')) return;
      
      const styles = document.createElement('style');
      styles.id = 'notification-styles';
      styles.textContent = `
        .system-notification {
          position: fixed;
          top: 20px;
          right: 20px;
          background: rgba(15, 23, 42, 0.95);
          border: 1px solid rgba(255, 255, 255, 0.1);
          border-radius: 12px;
          padding: 16px;
          max-width: 350px;
          z-index: 10000;
          backdrop-filter: blur(20px);
          animation: slideIn 0.3s ease-out;
          box-shadow: 0 10px 40px rgba(0, 0, 0, 0.3);
        }
        
        .system-notification.critical {
          border-color: rgba(239, 68, 68, 0.4);
          background: rgba(239, 68, 68, 0.1);
        }
        
        .system-notification.warning {
          border-color: rgba(245, 158, 11, 0.4);
          background: rgba(245, 158, 11, 0.1);
        }
        
        .notification-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 8px;
          color: #ffffff;
        }
        
        .notification-close {
          background: none;
          border: none;
          color: rgba(255, 255, 255, 0.6);
          font-size: 1.2rem;
          cursor: pointer;
          padding: 0;
          width: 20px;
          height: 20px;
          transition: color 0.3s ease;
        }
        
        .notification-close:hover {
          color: rgba(255, 255, 255, 0.9);
        }
        
        .notification-message {
          color: rgba(226, 232, 240, 0.8);
          font-size: 0.9rem;
          line-height: 1.4;
        }
        
        @keyframes slideIn {
          from { transform: translateX(100%); opacity: 0; }
          to { transform: translateX(0); opacity: 1; }
        }
        
        @media (max-width: 768px) {
          .system-notification {
            top: 10px;
            right: 10px;
            left: 10px;
            max-width: none;
          }
        }

        /* Estilos Mejorados con Glass Effect y Tipografía */
        .metrics-grid-enhanced,
        .activity-summary-enhanced,
        .quick-filters-enhanced {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
          gap: 1.5rem;
          padding: 1.5rem;
          background: linear-gradient(135deg, 
            rgba(255,255,255,0.08) 0%, 
            rgba(255,255,255,0.03) 50%,
            rgba(255,255,255,0.01) 100%);
          border-radius: 20px;
          border: 1px solid rgba(255,255,255,0.12);
          backdrop-filter: blur(20px);
          box-shadow: 
            0 8px 32px rgba(0,0,0,0.12),
            inset 0 1px 0 rgba(255,255,255,0.1);
        }

        .metric-card-enhanced,
        .activity-metric-card,
        .filter-option-card {
          display: flex;
          align-items: center;
          gap: 1.2rem;
          padding: 1.5rem;
          background: linear-gradient(135deg, 
            rgba(255,255,255,0.06) 0%, 
            rgba(255,255,255,0.02) 100%);
          border-radius: 16px;
          border: 1px solid rgba(255,255,255,0.1);
          backdrop-filter: blur(15px);
          transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
          position: relative;
          overflow: hidden;
          cursor: pointer;
        }

        .metric-card-enhanced:hover,
        .activity-metric-card:hover,
        .filter-option-card:hover {
          transform: translateY(-4px) scale(1.02);
          box-shadow: 
            0 20px 40px rgba(0,0,0,0.15),
            0 0 0 1px rgba(255,255,255,0.2),
            inset 0 1px 0 rgba(255,255,255,0.15);
          border-color: rgba(255,255,255,0.2);
          background: linear-gradient(135deg, 
            rgba(255,255,255,0.1) 0%, 
            rgba(255,255,255,0.04) 100%);
        }

        .metric-icon,
        .filter-icon {
          width: 52px;
          height: 52px;
          border-radius: 14px;
          display: flex;
          align-items: center;
          justify-content: center;
          font-size: 1.3rem;
          color: white;
          background: linear-gradient(135deg, var(--metric-color), var(--metric-color-light));
          box-shadow: 
            0 8px 24px rgba(0,0,0,0.2),
            inset 0 1px 0 rgba(255,255,255,0.2);
          flex-shrink: 0;
          position: relative;
          overflow: hidden;
        }

        .metric-icon::before,
        .filter-icon::before {
          content: '';
          position: absolute;
          top: -50%;
          left: -50%;
          width: 200%;
          height: 200%;
          background: linear-gradient(45deg, transparent, rgba(255,255,255,0.15), transparent);
          transform: rotate(45deg) translateX(-100%);
          transition: transform 0.8s ease;
        }

        .metric-card-enhanced:hover .metric-icon::before,
        .activity-metric-card:hover .metric-icon::before,
        .filter-option-card:hover .filter-icon::before {
          transform: rotate(45deg) translateX(100%);
        }

        .metric-content,
        .filter-content {
          flex: 1;
          min-width: 0;
        }

        .metric-label,
        .filter-label {
          font-size: 0.95rem;
          color: rgba(255,255,255,0.85);
          margin-bottom: 0.4rem;
          font-weight: 600;
          letter-spacing: 0.025em;
          text-transform: uppercase;
          font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
        }

        .metric-value,
        .filter-value {
          font-size: 1.6rem;
          font-weight: 800;
          color: white;
          margin-bottom: 0.3rem;
          display: flex;
          align-items: center;
          gap: 0.6rem;
          font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
          letter-spacing: -0.02em;
        }

        .metric-trend,
        .filter-status {
          display: inline-flex;
          align-items: center;
          gap: 0.3rem;
          padding: 0.3rem 0.7rem;
          border-radius: 8px;
          font-size: 0.8rem;
          font-weight: 700;
          background: linear-gradient(135deg, 
            rgba(255,255,255,0.15) 0%, 
            rgba(255,255,255,0.08) 100%);
          color: rgba(255,255,255,0.95);
          border: 1px solid rgba(255,255,255,0.1);
          backdrop-filter: blur(10px);
          text-transform: uppercase;
          letter-spacing: 0.05em;
        }

        /* Colores específicos para cada tipo */
        .metric-card-enhanced.primary,
        .activity-metric-card.primary,
        .filter-option-card.primary {
          --metric-color: #3b82f6;
          --metric-color-light: #60a5fa;
        }

        .metric-card-enhanced.critical,
        .activity-metric-card.critical,
        .filter-option-card.critical {
          --metric-color: #ef4444;
          --metric-color-light: #f87171;
        }

        .metric-card-enhanced.success,
        .activity-metric-card.success,
        .filter-option-card.success {
          --metric-color: #10b981;
          --metric-color-light: #34d399;
        }

        .metric-card-enhanced.warning,
        .activity-metric-card.warning,
        .filter-option-card.warning {
          --metric-color: #f59e0b;
          --metric-color-light: #fbbf24;
        }

        /* Estado activo para filtros */
        .filter-option-card.active {
          background: linear-gradient(135deg, 
            rgba(59, 130, 246, 0.15) 0%, 
            rgba(59, 130, 246, 0.05) 100%);
          border-color: rgba(59, 130, 246, 0.3);
          box-shadow: 
            0 0 0 1px rgba(59, 130, 246, 0.2),
            0 8px 32px rgba(59, 130, 246, 0.1);
        }

        /* ===== TIPOGRAFÍA JERÁRQUICA PROFESIONAL ===== */
        
        /* Títulos principales (H1) */
        h1, .main-title {
          font-family: 'Segoe UI', 'Roboto', -apple-system, BlinkMacSystemFont, sans-serif;
          font-weight: 600;
          font-size: 2.4rem; /* 20% mayor que el texto normal (2rem base) */
          color: #2C3E50;
          letter-spacing: -0.02em;
          line-height: 1.2;
          margin-bottom: 1.5rem;
        }

        /* Títulos secundarios (H2) */
        h2, .section-title, .section-group-header h2 {
          font-family: 'Segoe UI', 'Roboto', -apple-system, BlinkMacSystemFont, sans-serif;
          font-weight: 600;
          font-size: 2rem; /* 20% mayor que el texto normal */
          color: #34495E;
          letter-spacing: -0.015em;
          line-height: 1.3;
          margin-bottom: 1.25rem;
          position: relative;
        }

        /* Títulos terciarios (H3) */
        h3, .subsection-title, .subsection-header h3 {
          font-family: 'Segoe UI', 'Roboto', -apple-system, BlinkMacSystemFont, sans-serif;
          font-weight: 600;
          font-size: 1.6rem; /* 20% mayor que el texto normal */
          color: #34495E;
          letter-spacing: -0.01em;
          line-height: 1.4;
          margin-bottom: 1rem;
        }

        /* Texto normal base */
        body, p, .normal-text {
          font-family: 'Segoe UI', 'Roboto', -apple-system, BlinkMacSystemFont, sans-serif;
          font-size: 1rem;
          color: #2C3E50;
          line-height: 1.6;
        }

        /* Estilos específicos para secciones con fondo oscuro */
        .stats-section-group h2,
        .panel-content h2,
        .dark-section h2 {
          color: #FFFFFF;
          text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        }

        .stats-section-group h3,
        .panel-content h3,
        .dark-section h3 {
          color: #F8F9FA;
          text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
        }

        /* Badges y etiquetas */
        .section-badge {
          font-family: 'Segoe UI', 'Roboto', -apple-system, BlinkMacSystemFont, sans-serif;
          font-weight: 600;
          font-size: 0.8rem;
          letter-spacing: 0.05em;
          text-transform: uppercase;
          color: #7F8C8D;
        }

        /* Títulos de tarjetas */
        .card-title, .metric-card h3, .dashboard-card h3 {
          font-family: 'Segoe UI', 'Roboto', -apple-system, BlinkMacSystemFont, sans-serif;
          font-weight: 600;
          font-size: 1.4rem;
          color: #2C3E50;
          margin-bottom: 0.75rem;
        }

        /* Títulos en contexto oscuro */
        .dark-context .card-title,
        .dark-context h3 {
          color: #FFFFFF;
        }

        /* ===== RESPONSIVIDAD Y ACCESIBILIDAD ===== */
        
        /* Mejoras de accesibilidad */
        .nav-tab:focus,
        .section-header:focus,
        .panel-header:focus {
          outline: 2px solid #3498DB;
          outline-offset: 2px;
          box-shadow: 0 0 0 4px rgba(52, 152, 219, 0.2);
        }
        
        /* Reducir movimiento para usuarios con preferencias de accesibilidad */
        @media (prefers-reduced-motion: reduce) {
          .nav-tab,
          .stats-section-group,
          .metric-card,
          .attack-item {
            transition: none;
            animation: none;
          }
        }
        
        /* Alto contraste para mejor legibilidad */
        @media (prefers-contrast: high) {
          h1, h2, h3, .main-title, .section-title {
            color: #000000;
            text-shadow: none;
          }
          
          .nav-tab {
            border: 2px solid #000000;
          }
          
          .nav-tab.active {
            background: #000000;
            color: #FFFFFF;
          }
        }

        /* Responsive para tablets */
        @media (max-width: 1024px) {
          h1, .main-title {
            font-size: 2rem;
          }
          
          h2, .section-title {
            font-size: 1.6rem;
          }
          
          h3, .subsection-title {
            font-size: 1.4rem;
          }
          
          .nav-tab {
            padding: 14px 18px;
            font-size: 1rem;
            min-width: 70px;
          }
          
          .stats-section-group {
            margin-bottom: 20px;
          }
        }

        /* Responsive */
        @media (max-width: 768px) {
          /* Tipografía responsive */
          h1, .main-title {
            font-size: 1.8rem;
          }
          
          h2, .section-title {
            font-size: 1.4rem;
          }
          
          h3, .subsection-title {
            font-size: 1.2rem;
          }
          
          /* Pestañas responsive */
          .nav-tabs {
            flex-wrap: wrap;
            gap: 4px;
          }
          
          .nav-tab {
            padding: 12px 16px;
            font-size: 0.9rem;
            min-width: 60px;
            min-height: 56px;
          }
          
          /* Espaciado responsive */
          .stats-section-group {
            margin-bottom: 16px;
          }
          
          .metric-card, .attack-item, .filter-group, .country-item {
            margin-bottom: 16px;
          }
          
          .section-content > *:not(:last-child) {
            margin-bottom: 16px;
          }
          
          /* Íconos más pequeños en móvil */
          .section-header::before,
          .subsection-header::before,
          .panel-header::before {
            width: 14px;
            height: 14px;
            background-size: 14px 14px;
          }
        }
        
        /* Responsive para móviles pequeños */
        @media (max-width: 480px) {
          h1, .main-title {
            font-size: 1.6rem;
          }
          
          h2, .section-title {
            font-size: 1.3rem;
          }
          
          h3, .subsection-title {
            font-size: 1.1rem;
          }
          
          .nav-tab {
            padding: 10px 12px;
            font-size: 0.85rem;
            min-width: 50px;
            min-height: 48px;
          }
          
          .stats-section-group {
            margin-bottom: 12px;
          }
        }
          .metrics-grid-enhanced,
          .activity-summary-enhanced,
          .quick-filters-enhanced {
            grid-template-columns: 1fr;
            gap: 1rem;
            padding: 1rem;
          }
          
          .metric-card-enhanced,
          .activity-metric-card,
          .filter-option-card {
            padding: 1.2rem;
            gap: 1rem;
          }
          
          .metric-value,
          .filter-value {
            font-size: 1.4rem;
          }
        }

        /* Responsive para gráficos horizontales */
        @media (max-width: 768px) {
          .horizontal-metrics-container {
            padding: 1rem;
            gap: 1rem;
          }

          .horizontal-metric-item {
            flex-direction: column;
            align-items: flex-start;
            gap: 0.75rem;
          }

          .metric-info-horizontal {
            width: 100%;
          }

          .horizontal-bar-container {
            width: 100%;
            order: 3;
          }

          .metric-percentage-horizontal {
            order: 4;
            text-align: left;
          }
        }
      `;
      document.head.appendChild(styles);
    }
    
    // Función para refrescar métricas
    refreshMetrics() {
      // Refrescar datos si hay un sistema móvil activo
      if (window.mobileSystem && window.mobileSystem.currentPanel) {
        window.mobileSystem.loadPanelContent(window.mobileSystem.currentPanel);
      }
      
      // Refrescar datos de escritorio si están disponibles
      if (window.threatDataUpdater) {
        window.threatDataUpdater.updateThreatData();
      }
    }
    
    // Función para limpiar recursos
    destroy() {
      if (this.updateInterval) {
        clearInterval(this.updateInterval);
      }
      
      // Remover notificaciones activas
      document.querySelectorAll('.system-notification').forEach(n => n.remove());
      
      // Remover estilos
      const styles = document.querySelector('#notification-styles');
      if (styles) styles.remove();
    }
  }

  // Inicializar sistema de indicadores cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', () => {
    window.tabIndicatorSystem = new TabIndicatorSystem();
    window.tabIndicatorSystem.init();
  });
</script>