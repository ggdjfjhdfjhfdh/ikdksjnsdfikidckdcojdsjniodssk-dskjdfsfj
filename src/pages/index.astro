---
import Layout from '../layouts/Layout.astro';
import Hero from '../components/Hero.astro';
import Section from '../components/Section.astro';
import Card from '../components/Card.astro';
import Timeline from '../components/Timeline.astro';
import LogoStrip from '../components/LogoStrip.astro';
import BigCTA from '../components/BigCTA.astro';
import SEO from '../components/SEO.astro';
import Button from '../components/Button.astro';

// Servicios destacados
const featuredServices = [
  {
    title: "Auditorías de Seguridad",
    description: "Evaluación integral de infraestructura para identificar vulnerabilidades antes que los atacantes.",
    link: {
      href: "/servicios#auditorias",
      text: "Ver detalles"
    }
  },
  {
    title: "Pentesting Avanzado",
    description: "Simulación de ataques reales para probar la resistencia de tus sistemas en un entorno controlado.",
    link: {
      href: "/servicios#pentesting",
      text: "Ver detalles"
    }
  },
  {
    title: "Hardening de Sistemas",
    description: "Fortalecimiento y configuración segura de servidores, redes y aplicaciones críticas.",
    link: {
      href: "/servicios#hardening",
      text: "Ver detalles"
    }
  },
  {
    title: "Respuesta a Incidentes",
    description: "Protocolo de respuesta rápida ante brechas de seguridad con análisis forense completo.",
    link: {
      href: "/servicios#respuesta",
      text: "Ver detalles"
    }
  },
  {
    title: "Consultoría RGPD",
    description: "Asesoramiento integral para cumplimiento normativo y protección de datos personales.",
    link: {
      href: "/servicios#rgpd",
      text: "Ver detalles"
    }
  },
  {
    title: "Formación Especializada",
    description: "Capacitación técnica para equipos de TI en las últimas técnicas de ciberseguridad.",
    link: {
      href: "/servicios#formacion",
      text: "Ver detalles"
    }
  }
];

// Casos de uso por sectores
const useCases = [
  {
    title: "Sector Financiero",
    description: "Protección de transacciones, cumplimiento PCI-DSS y prevención de fraude para entidades bancarias.",
    image: "/images/sector-financiero.svg",
    link: {
      href: "/casos/financiero",
      text: "Ver caso"
    }
  },
  {
    title: "E-commerce",
    description: "Seguridad en pagos online, protección de datos de clientes y continuidad del negocio.",
    image: "/images/sector-ecommerce.svg",
    link: {
      href: "/casos/ecommerce",
      text: "Ver caso"
    }
  },
  {
    title: "Industria 4.0",
    description: "Ciberseguridad industrial, protección de sistemas SCADA y seguridad IoT.",
    image: "/images/sector-industria.svg",
    link: {
      href: "/casos/industria",
      text: "Ver caso"
    }
  },
  {
    title: "Startups Tecnológicas",
    description: "Seguridad by design, protección de IP y escalabilidad segura para empresas emergentes.",
    image: "/images/sector-startups.svg",
    link: {
      href: "/casos/startups",
      text: "Ver caso"
    }
  }
];

// Metodología (timeline)
const methodologySteps = [
  {
    title: "Reconocimiento",
    description: "Análisis integral del perímetro digital, identificación de activos y mapeo de superficie de ataque.",
    duration: "1-2 semanas"
  },
  {
    title: "Pentesting",
    description: "Pruebas de penetración controladas siguiendo metodologías OWASP y NIST.",
    duration: "2-4 semanas"
  },
  {
    title: "Implementación",
    description: "Despliegue de medidas correctivas, hardening de sistemas y configuración de controles de seguridad.",
    duration: "3-6 semanas"
  },
  {
    title: "Mantenimiento",
    description: "Monitorización continua, actualizaciones de seguridad y respuesta proactiva ante nuevas amenazas.",
    duration: "Continuo"
  }
];

// Partners/Logos - Lista actualizada con Cloudflare, sin AWS ni Cisco
const partners = [
  {
    name: "Microsoft",
    src: "/images/partners/microsoft.svg",
    alt: "Microsoft Partner",
    width: 140,
    height: 60
  },
  {
    name: "Cloudflare",
    src: "/images/partners/cloudflare.svg",
    alt: "Cloudflare Security Partner",
    width: 150,
    height: 60
  },
  {
    name: "Palo Alto",
    src: "/images/partners/paloalto.svg",
    alt: "Palo Alto Networks Partner",
    width: 150,
    height: 60
  },
  {
    name: "CrowdStrike",
    src: "/images/partners/crowdstrike.svg",
    alt: "CrowdStrike Partner",
    width: 160,
    height: 60
  },
  {
    name: "Fortinet",
    src: "/images/partners/fortinet.svg",
    alt: "Fortinet Partner",
    width: 140,
    height: 60
  }
];

// Testimonios
const testimonials = [
  {
    title: "Trabajo excelente",
    description: "El equipo de Sesecpro identificó vulnerabilidades críticas que habíamos pasado por alto. Su enfoque profesional y recomendaciones claras nos permitieron mejorar significativamente nuestra postura de seguridad.",
    author: {
      name: "Carlos Mendoza",
      role: "CTO, TechCorp",
      avatar: "/images/testimonials/carlos.jpg"
    }
  },
  {
    title: "Respuesta rápida y efectiva",
    description: "Cuando sufrimos un incidente de seguridad, Sesecpro respondió inmediatamente. Su protocolo de respuesta y análisis forense nos ayudó a contener el problema y evitar daños mayores.",
    author: {
      name: "Ana García",
      role: "CISO, FinanceSecure",
      avatar: "/images/testimonials/ana.jpg"
    }
  },
  {
    title: "Cumplimiento garantizado",
    description: "Gracias a su consultoría RGPD, logramos la certificación sin complicaciones. Su conocimiento normativo y enfoque práctico fueron clave para nuestro éxito.",
    author: {
      name: "Miguel Torres",
      role: "Director Legal, DataFlow",
      avatar: "/images/testimonials/miguel.jpg"
    }
  }
];
---

<Layout title="Sesecpro - Todo por la seguridad digital">
  <SEO 
    slot="head"
    title="Sesecpro - Todo por la seguridad digital"
    description="Consultoría especializada en ciberseguridad para empresas. Auditorías, implementación de soluciones Zero Trust, y estrategias de seguridad personalizadas."
    canonical="https://sesecpro.com/"
    image="/images/hero-og.jpg"
  />

  <main>
    <!-- Hero Section -->
    <Hero 
      title="Defiende tu empresa con ciberseguridad de vanguardia"
      subtitle="Consultoría especializada en seguridad digital para empresas que buscan protección integral y estrategias personalizadas."
      ctaPrimary={{
        text: "Solicitar consulta gratuita",
        href: "/contacto"
      }}
      ctaSecondary={{
        text: "Ver servicios",
        href: "/servicios"
      }}
    />

    <!-- Featured Services Section -->
    <Section 
      title="Seguridad que protege hoy y escala mañana"
      subtitle="Servicios especializados diseñados para empresas que entienden que la ciberseguridad es una inversión, no un gasto."
      background="soft"
      spacing="large"
    >
      <div class="services-grid">
        {featuredServices.map((service) => (
          <Card 
            variant="service"
            title={service.title}
            description={service.description}
            link={service.link}
            icon="service"
          />
        ))}
      </div>
    </Section>

    <!-- Real-time Cybersecurity Dashboard -->
    <Section 
      title="Amenazas en Tiempo Real"
      subtitle="Datos actualizados sobre el estado actual de la ciberseguridad global y en España"
      background="gradient"
      spacing="large"
    >
      <div class="realtime-cyber-dashboard">



        <div class="cyber-cards-grid">
          <!-- Card 1: URLs Maliciosas -->
          <div class="cyber-card glass-card malicious-urls" data-api="urlhaus">
            <div class="card-header">
              <div class="status-indicator" data-status="loading"></div>
            </div>
            <div class="card-content">
              <div class="metric-value-large">
                <span class="counter" data-target="0">---</span>
                <div class="loading-skeleton"></div>
              </div>
              <h3 class="card-title-modern">URL'S PELIGROSAS</h3>
              <p class="card-subtitle-modern">Páginas maliciosas detectadas en 24h</p>
            
            </div>
            <div class="sparkline-container">
              <canvas class="sparkline" width="80" height="20" data-trend="[]"></canvas>
              <div class="sparkline-loading"></div>
            </div>

          </div>

          <!-- Card 2: Ataques DDoS España -->
          <div class="cyber-card glass-card spain-attacks" data-api="cloudflare">
            <div class="card-header">
              <div class="status-indicator" data-status="loading"></div>
            </div>
            <div class="card-content">
              <div class="metric-value-large">
                <span class="counter" data-target="0">---</span>
                <span class="unit">%</span>
                <div class="loading-skeleton"></div>
              </div>
              <h3 class="card-title-modern">ATAQUES PAÍS A PAÍS</h3>
              <p class="card-subtitle-modern">Rutas de ataque globales</p>
             
            </div>
            <div class="sparkline-container">
              <canvas class="sparkline" width="80" height="20" data-trend="[]"></canvas>
              <div class="sparkline-loading"></div>
            </div>

          </div>



          <!-- Card 4: Víctimas Ransomware -->
          <div class="cyber-card glass-card ransomware-victims" data-api="ransomwatch">
            <div class="card-header">
              <div class="status-indicator" data-status="loading"></div>
            </div>
            <div class="card-content">
              <div class="metric-value-large">
                <span class="counter" data-target="0">---</span>
                <div class="loading-skeleton"></div>
              </div>
              <h3 class="card-title-modern">VICTIMAS DE RANSOMWARE</h3>
              <p class="card-subtitle-modern">Reportadas en 24h</p>
             
            </div>
            <div class="sparkline-container">
              <canvas class="sparkline" width="80" height="20" data-trend="[]"></canvas>
              <div class="sparkline-loading"></div>
            </div>

          </div>
        </div>

        <!-- Enlace a página de amenazas -->
        <div class="threats-link-container">
            <Button
              href="/amenazas"
              variant="primary"
              size="lg"
              ariaLabel="Análisis y tendencias"
            >
              ANÁLISIS Y TENDENCIAS
            </Button>
          </div>


      </div>
    </Section>

    <!-- Methodology Section -->
    <Section 
      title="Nuestra metodología probada"
      subtitle="Un enfoque sistemático que garantiza resultados medibles y duraderos."
      background="soft"
      spacing="large"
    >
      <Timeline steps={methodologySteps} />
    </Section>

    <!-- Partners Section -->
    <Section 
      title="Partners tecnológicos"
      subtitle="Trabajamos con las mejores herramientas y plataformas del mercado."
      spacing="normal"
    >
      <LogoStrip 
        logos={partners}
        speed="normal"
        pauseOnHover={true}
      />
    </Section>

    <!-- Testimonials Section -->
    <Section 
      id="testimonios"
      title="Lo que dicen nuestros clientes"
      subtitle="Testimonios reales de empresas que confían en nosotros"
      variant="light"
    >
      <div class="testimonials-grid">
        {testimonials.map((testimonial) => (
          <Card 
            title={testimonial.title}
            description={testimonial.description}
            author={testimonial.author}
          />
        ))}
      </div>
    </Section>



    <!-- CTA Section -->
    <BigCTA 
      title="¿Listo para fortalecer tu ciberseguridad?"
      subtitle="Contacta con nuestros expertos y descubre cómo podemos proteger tu empresa de las amenazas digitales más avanzadas."
      primaryButton={{
        text: "Solicitar consulta gratuita",
        href: "/contacto",
        variant: "primary"
      }}
      secondaryButton={{
        text: "Ver servicios",
        href: "/servicios",
        variant: "outline"
      }}
      background="gradient"
      size="large"
    />
  </main>
</Layout>

<!-- Importar estilos del dashboard desde archivo externo -->
<link rel="stylesheet" href="/styles/dashboard.css" />

<script>
  // Cybersecurity Dashboard API Integration
  class CyberDashboard {
    constructor() {
      const BACKEND_URL = import.meta.env.PUBLIC_BACKEND_URL || 'https://sesec-backend.fly.dev';
this.apiEndpoint = `${BACKEND_URL}/api/threat/data`;
      this.refreshInterval = 15 * 60 * 1000; // 15 minutes
      this.retryAttempts = 3;
      this.retryDelay = 5000;
    }

    // Enhanced counter animation with easing
    animateCounter(element, target, duration = 2000) {
      const start = parseInt(element.textContent.replace(/[^0-9]/g, '')) || 0;
      const startTime = performance.now();
      
      function easeOutQuart(t) {
        return 1 - Math.pow(1 - t, 4);
      }
      
      function update(currentTime) {
        const elapsed = currentTime - startTime;
        const progress = Math.min(elapsed / duration, 1);
        const easedProgress = easeOutQuart(progress);
        const current = Math.floor(start + (target - start) * easedProgress);
        
        element.textContent = current.toLocaleString();
        
        if (progress < 1) {
          requestAnimationFrame(update);
        }
      }
      
      requestAnimationFrame(update);
    }

    // Sparkline drawing and animation
    drawSparkline(canvas, data) {
      const ctx = canvas.getContext('2d');
      const width = canvas.width;
      const height = canvas.height;
      const padding = 2;
      
      ctx.clearRect(0, 0, width, height);
      
      if (!data || data.length === 0) return;
      
      const max = Math.max(...data);
      const min = Math.min(...data);
      const range = max - min || 1;
      
      // Create gradient
      const gradient = ctx.createLinearGradient(0, 0, 0, height);
      gradient.addColorStop(0, 'rgba(59, 130, 246, 0.8)');
      gradient.addColorStop(1, 'rgba(59, 130, 246, 0.2)');
      
      // Draw area
      ctx.beginPath();
      ctx.moveTo(padding, height - padding);
      
      data.forEach((value, index) => {
        const x = padding + (index / (data.length - 1)) * (width - 2 * padding);
        const y = height - padding - ((value - min) / range) * (height - 2 * padding);
        
        if (index === 0) {
          ctx.lineTo(x, y);
        } else {
          ctx.lineTo(x, y);
        }
      });
      
      ctx.lineTo(width - padding, height - padding);
      ctx.closePath();
      ctx.fillStyle = gradient;
      ctx.fill();
      
      // Draw line
      ctx.beginPath();
      data.forEach((value, index) => {
        const x = padding + (index / (data.length - 1)) * (width - 2 * padding);
        const y = height - padding - ((value - min) / range) * (height - 2 * padding);
        
        if (index === 0) {
          ctx.moveTo(x, y);
        } else {
          ctx.lineTo(x, y);
        }
      });
      
      ctx.strokeStyle = 'rgba(59, 130, 246, 1)';
      ctx.lineWidth = 1.5;
      ctx.stroke();
    }

    // Update API status indicators
    updateAPIStatus(apiName, status, type = 'free') {
      const card = document.querySelector(`[data-api="${apiName}"]`);
      if (!card) return;
      
      const statusIndicator = card.querySelector('.status-indicator');
      const apiStatus = card.querySelector('.api-status');
      
      if (statusIndicator) statusIndicator.setAttribute('data-status', status);
      if (apiStatus) {
        apiStatus.setAttribute('data-status', status);
        
        let statusText = '';
        switch(status) {
          case 'ok':
            statusText = '🟢 En línea';
            break;
          case 'fallback':
            statusText = '🟡 Datos simulados';
            break;
          case 'requires_token':
            statusText = '🔑 Requiere token';
            break;
          case 'error':
            statusText = '🔴 Error';
            break;
          default:
            statusText = '🟡 Cargando...';
        }
        
        apiStatus.textContent = statusText;
      }
    }

    // Hide loading skeletons
    hideLoadingStates(card) {
      const skeletons = card.querySelectorAll('.loading-skeleton, .sparkline-loading, .port-loading');
      skeletons.forEach(skeleton => {
        skeleton.style.opacity = '0';
        setTimeout(() => skeleton.style.display = 'none', 300);
      });
    }

    // Update card data
    updateCardData(apiName, data) {
      const card = document.querySelector(`[data-api="${apiName}"]`);
      if (!card) return;

      this.hideLoadingStates(card);

      if (data.error) {
        this.updateAPIStatus(apiName, 'error');
        const subtitle = card.querySelector('.card-subtitle');
        if (subtitle) subtitle.textContent = `Error: ${data.error}`;
        return;
      }

      this.updateAPIStatus(apiName, 'ok');

      // Update based on API type
      switch (apiName) {
        case 'urlhaus':
          this.updateURLhausCard(card, data);
          break;
        case 'cloudflare':
          this.updateCloudflareCard(card, data);
          break;
        case 'sansISC':
          this.updateSANSISCCard(card, data);
          break;
        case 'ransomwatch':
          this.updateRansomwatchCard(card, data);
          break;
      }
    }

    updateURLhausCard(card, data) {
      const counter = card.querySelector('.counter');
      const subtitle = card.querySelector('.card-subtitle');
      const sparkline = card.querySelector('.sparkline');
      
      if (counter && data.count !== undefined) {
        this.animateCounter(counter, data.count);
      }
      if (subtitle) subtitle.textContent = `Detectadas últimas 24h`;
      if (sparkline && data.trend) {
        this.drawSparkline(sparkline, data.trend);
      }
    }

    updateCloudflareCard(card, data) {
      const counter = card.querySelector('.counter');
      const subtitle = card.querySelector('.card-subtitle-modern');
      const sparkline = card.querySelector('.sparkline');
      const trendText = card.querySelector('.trend-text');
      
      // Calcular el total de ataques país a país usando topAttackPairs
      const totalAttacks = data.topAttackPairs ? 
        data.topAttackPairs.reduce((sum, pair) => sum + (pair.attacks || 0), 0) : 0;

      console.log('Cloudflare Data:', data);
      console.log('Total Attack Pairs (index.astro):', totalAttacks);
      console.log('Top Attack Pairs (index.astro):', data.topAttackPairs);

      if (counter) {
        this.animateCounter(counter, totalAttacks);
        card.querySelector('.unit').textContent = ''; // No mostrar '%' si es un conteo total
      }
      
      // Actualizar subtítulo con información sobre los ataques país a país
      if (subtitle) {
        const uniquePairs = data.topAttackPairs ? data.topAttackPairs.length : 0;
        subtitle.textContent = `${uniquePairs} Ataques en 24h`;
      }
      
      // Actualizar tendencia con el total de ataques país a país
      if (trendText) {
        trendText.textContent = `${totalAttacks} ataques entre países`;
      }
      
      if (sparkline && data.trend) {
        this.drawSparkline(sparkline, data.trend);
      }
    }

    updateSANSISCCard(card, data) {
      const portItems = card.querySelectorAll('.port-item');
      const sparkline = card.querySelector('.sparkline');
      
      if (data.ports && portItems.length >= 3) {
        data.ports.slice(0, 3).forEach((port, index) => {
          if (portItems[index]) {
            const portNumber = portItems[index].querySelector('.port-number');
            const portCount = portItems[index].querySelector('.port-count');
            
            if (portNumber) portNumber.textContent = port.port;
            if (portCount) portCount.textContent = `(${this.formatNumber(port.count)})`;
          }
        });
      }
      
      if (sparkline && data.trend) {
        this.drawSparkline(sparkline, data.trend);
      }
    }

    updateRansomwatchCard(card, data) {
      const counter = card.querySelector('.counter');
      const subtitle = card.querySelector('.card-subtitle');
      const sparkline = card.querySelector('.sparkline');
      
      if (counter && data.count !== undefined) {
        this.animateCounter(counter, data.count);
      }
      if (subtitle) subtitle.textContent = `Publicadas últimas 24h`;
      if (sparkline && data.trend) {
        this.drawSparkline(sparkline, data.trend);
      }
    }

    // Format numbers for display
    formatNumber(num) {
      if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
      if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
      return num.toString();
    }

    // Fetch data from API
    async fetchData(attempt = 1) {
      try {
        const response = await fetch(this.apiEndpoint, {
          method: 'GET',
          headers: {
            'Accept': 'application/json',
            'Cache-Control': 'no-cache'
          }
        });

        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const result = await response.json();
        
        if (result.success && result.data) {
          // Update API status for each service
          if (result.apis) {
            Object.entries(result.apis).forEach(([apiName, apiInfo]) => {
              this.updateAPIStatus(apiName, apiInfo.status, apiInfo.type);
            });
          }
          
          // Update dashboard data
          console.log('Datos recibidos del backend para dashboard:', result.data);
          this.updateDashboard(result.data);
        } else {
          throw new Error(result.error || 'Invalid API response');
        }
        
      } catch (error) {
        console.error(`API fetch attempt ${attempt} failed:`, error);
        
        if (attempt < this.retryAttempts) {
          setTimeout(() => {
            this.fetchData(attempt + 1);
          }, this.retryDelay * attempt);
        } else {
          this.handleAPIError(error);
        }
      }
    }

    // Update dashboard with API data
    updateDashboard(data) {
      Object.keys(data).forEach(apiName => {
        if (data[apiName]) {
          this.updateCardData(apiName, data[apiName]);
        }
      });
    }

    // Handle API errors
    handleAPIError(error) {
      console.error('Dashboard API Error:', error);
      
      // Update all cards to show error state
      const cards = document.querySelectorAll('[data-api]');
      cards.forEach(card => {
        const apiName = card.getAttribute('data-api');
        this.updateAPIStatus(apiName, 'error');
        this.hideLoadingStates(card);
        
        const subtitle = card.querySelector('.card-subtitle');
        if (subtitle) subtitle.textContent = 'Error de conexión - Reintentando...';
      });
    }

    // Update dashboard with API response including status
    updateDashboardWithStatus(response) {
      // Update API status for each service
      if (response.apis) {
        Object.entries(response.apis).forEach(([apiName, apiInfo]) => {
          this.updateAPIStatus(apiName, apiInfo.status, apiInfo.type);
        });
      }
      
      // Update data if available
      if (response.data) {
        this.updateDashboard(response.data);
      }
    }

    // Card entrance animations
    animateCards() {
      const cards = document.querySelectorAll('.cyber-card');
      cards.forEach((card, index) => {
        card.style.opacity = '0';
        card.style.transform = 'translateY(20px)';
        
        setTimeout(() => {
          card.style.transition = 'all 0.6s cubic-bezier(0.4, 0, 0.2, 1)';
          card.style.opacity = '1';
          card.style.transform = 'translateY(0)';
        }, index * 150);
      });
    }

    // Initialize dashboard
    init() {
      // Animate cards entrance
      this.animateCards();
      
      // Start fetching data
      setTimeout(() => {
        this.fetchData();
      }, 1000);
      
      // Set up refresh interval
      setInterval(() => {
        this.fetchData();
      }, this.refreshInterval);
    }
  }

  // Initialize dashboard when DOM is ready
  document.addEventListener('DOMContentLoaded', function() {
    const dashboard = new CyberDashboard();
    dashboard.init();
  });
</script>